unit AMIConnectUnit;

interface

uses TCPClientUnit, Classes, WinSock, Windows, StdCtrls,
      Controls, SysUtils, Dialogs, MessageCollection,
      uLkJSON, IdTCPServer, Sockets, DateUtils, SimpleTCPUnit;

type

    TAMICoordinator = class(TThread)
    private
      //FTCPClientCollection: TTCPClientCollection;
    protected
    public
      wData: WSADATA;
      sServerListen: TSOCKET;
      server_addr: sockaddr_in;
      iRet, ListenPort: Integer;
      ClientThread: SimpleTCPClientThread;
      ThreadCreated,ServerIsActive: Boolean;
      UseUsDGRProt: Boolean;
	    CurrentAMIAnaliseStr: Widestring;
      InpStrList: TStringList;
      LastInputHeaderIsBridge: Boolean;
      LastBridgeStateStateIsLink: Boolean;
      LastInputHeaderIsDial: Boolean;
      LastDialStateIsBegin: Boolean;
      LastInputHeaderIsNewChannel: Boolean;
      EVENT_BRIDGE: String;
      BRIDGE_STATE_LINK: String;
      BRIDGE_CALLERID1: String;
      EVENT_DIAL: String;
      DIAL_STATE_BEGIN: String;
      DIAL_CALLERID: String;
      EVENT_SUB: String;
      EVENT_NEW_CHANNEL: String;
      CHAN_CALLERID: String;
      PONG_ANSWER: String;
      crashedAMISocket: Boolean;
      pongAnswerCounter: Integer;
      pongAnswerWaiting: Boolean;
	    EVENT_HPREFIX: String;
      PING_HPREFIX: String;
	    RESPONSE_HPREFIX: String;
	    PSTN1_CHANN_CODE: String;
	    PSTN2_CHANN_CODE: String;
	    GSM1_CHANN_CODE: String;
	    CHANN_CODE_PREFIX: String;
	    numRulesCount: Integer;
	    InReceiving: Boolean;
      AMIPPCounter: Integer;
      procedure Execute; override;
      //procedure SetTCPClientCollection(const Value: TTCPClientCollection);
      constructor Create;
      destructor Destroy;
      {procedure ShowAcceptMsg;
      procedure ShowAcceptMaxConnCountDenyMsg;
      procedure ShowErrorMsg;}
      procedure TestWinSockError(S:String);
      {procedure ShowConnMsg;
      procedure ShowMemoStr; }
      function TestFuncError
        (iErr:Integer; FuncName:String): Boolean;
      function createTCPClientSocket: Boolean;
      procedure ShowAMILogMsg;
      procedure ShowAMIInpLogMsg;
      procedure ShowAMIStatusBar;
      procedure streamParseAMIData(AMIInput: String);
      procedure addOrderOnExtractedNumber;
      procedure ShowAMIAnLogMsg;
      function sendAMICommand(AMICmd: String): Boolean;
      //procedure ShowSendErr;
    //published
    //  property TCPClientCollection: TTCPClientCollection read FTCPClientCollection
    //    write SetTCPClientCollection;
  end;

var
  sFullErr:String;
  MemoStr: String;
  LogStr: String;
  StreamAnalyseMemoList: TStringList;
  amiDetectedNumber: String;
  crashedAMIAuth : Boolean = True;

implementation

uses RemoteControlUnit, ServerMainUnit, AMIClient;

function TAMICoordinator.sendAMICommand(AMICmd: String): Boolean;
var res: Boolean;
begin
  res:=False;
  if ThreadCreated then
        begin
          self.ClientThread.SendUTFString(
            StringReplace(AMICmd,'***___CRLF',CRLF,[rfReplaceAll]));
          res:=True;
        end;
  Result:=res;
end;

procedure TAMICoordinator.TestWinSockError(S:String);
var
 iErr:Integer;
begin

 iErr:=WSAGetLastError();
 sFullErr:='Неизвестная ошибка '+IntToStr(iErr);

 case iErr of
  WSANOTINITIALISED: sFullErr:='Нужно сначала вызвать функцию WSASturtup, а потом создавать сокет';
	WSAENETDOWN: sFullErr:='Cвязь нарушена, возможные причины - отошёл кабель или отключились от Интернета';
	WSAEADDRINUSE: sFullErr:='Указанный адрес уже используется';
	WSAEFAULT: sFullErr:='Параметры name и namelen не соответствуют выбранной адресации. Параметр namelen может быть меньше необходимого значения, а name содержать некорректные данные';
	WSAEINPROGRESS: sFullErr:='Выполняется операция в блокирующем режиме. Вы уже запустили на выполнение какую-то функцию и нужно дождаться завершения её работы';
	WSAEINVAL: sFullErr:='Сокет уже связан с адресом';
	WSAENOBUFS: sFullErr:='Недостаточно буферов, слишком много соединений';
	WSAENOTSOCK: sFullErr:='Неверный дескриптор сокета';
  WSAEISCONN: sFullErr:='Сокет уже подключён';
  WSAEMFILE: sFullErr:='Нет больше доступных дескрипторов';
 end;

 sFullErr:=S+' '+sFullErr;
 //Synchronize(ShowErrorMsg);
end;

function TAMICoordinator.TestFuncError
  (iErr:Integer; FuncName:String): Boolean;
begin
 Result:=false;
 if iErr = SOCKET_ERROR then
  begin
   TestWinSockError(FuncName);
   Result:=true;
  end;
end;

function LookupName(const AAddress: AnsiString): TInAddr;
begin
  FillChar(Result, sizeOf(Result), 0);
  Result.s_addr := inet_addr(PAnsiChar(AAddress))
end;

procedure TAMICoordinator.ShowAMILogMsg;
begin
  AMIClientForm.AMIOutputMemo.Lines.Append(DateTimeToStr(Today+Time)+LogStr);
end;

procedure TAMICoordinator.ShowAMIInpLogMsg;
begin
  AMIClientForm.AMIInputMemo.Lines.Append(DateTimeToStr(Today+Time)+LogStr);
end;

procedure TAMICoordinator.ShowAMIAnLogMsg;
begin
  AMIClientForm.StreamAnalyseMemo.Lines.Append(DateTimeToStr(Today+Time)+LogStr);
end;

procedure TAMICoordinator.ShowAMIStatusBar;
begin
  AMIClientForm.StatusBar1.Panels[0].Text:=DateTimeToStr(Today+Time)+ LogStr;
end;

procedure TAMICoordinator.addOrderOnExtractedNumber;
begin
  AMIClientForm.addOrderOnExtractedNumber(amiDetectedNumber);
end;

function TAMICoordinator.createTCPClientSocket: Boolean;
begin
  // Создание сокета
  Result:=False;
  try
  LogStr := ' Попытка соединения с AMI!!!';
  Synchronize(ShowAMILogMsg);
  sServerListen := Socket(AF_INET, SOCK_STREAM, IPPROTO_IP);
  if sServerListen = INVALID_SOCKET then
    begin
      LogStr := ' Ошибка создания сокета';
      Synchronize(ShowAMILogMsg);
      Exit;
    end;

  // Запонение структуры адреса
  server_addr.sin_addr.s_addr := htonl(INADDR_ANY);
  server_addr.sin_family := AF_INET;
  server_addr.sin_port := htons(IniFile.
    ReadInteger('BUSINESS_DATA',
    'AMI_порт',5038));
  server_addr.sin_addr := LookupName(IniFile.
    ReadString('BUSINESS_DATA',
    'IP_адрес_ASTERISK','192.168.0.25'));

  if (Connect(sServerListen, server_addr, sizeof(server_addr)) = SOCKET_ERROR) then
    begin
      LogStr := ' Ошибка соединения сокета '+IntToStr(WSAGetLastError())+', '+
        IniFile.ReadString('BUSINESS_DATA','IP_адрес_ASTERISK','192.168.0.25')+', '+
        IntToStr(IniFile.ReadInteger('BUSINESS_DATA','AMI_порт',5038));
      Synchronize(ShowAMILogMsg);
      Exit;
    end;
  //MessageBox(0, 'Жду ответа сервера', 'Внимание!!!', 0);
    ClientThread := SimpleTCPClientThread.Create(true);
    ClientThread.Sock:=sServerListen;
    ClientThread.ClientID:=Integer(sServerListen);
    ClientThread.BSize:=8192;
    ClientThread.UseNonBlockingMode:=False;
    ClientThread.StatusStr:='Создаем нить';
    ClientThread.Resume;
    ClientThread.notUseJSON:=True;
    ThreadCreated:=True;
    Result:=True;
  except on E:Exception do
  begin
    LogStr := ' Ошибка создания нити сокета '+E.Message;
    Synchronize(ShowAMILogMsg);
  end
  end;
end;

constructor TAMICoordinator.Create;
begin
  inherited Create(True);
  //ServerIsActive:=False;

  InReceiving:=False;
  AMIPPCounter:=10;
  ThreadCreated:=False;
  CurrentAMIAnaliseStr:='';
  InpStrList := TStringList.Create;
  pongAnswerCounter := IniFile.ReadInteger('BUSINESS_DATA',
    'время_ожидания_PING_ASTERISK',15);
  pongAnswerWaiting := False;
  EVENT_BRIDGE := IniFile.ReadString('call_centre_settings',
    'EVENT_BRIDGE','Event: Bridge');
  BRIDGE_STATE_LINK := IniFile.ReadString('call_centre_settings',
    'BRIDGE_STATE_LINK','Bridgestate: Link');
  BRIDGE_CALLERID1 := IniFile.ReadString('call_centre_settings',
    'BRIDGE_CALLERID1','CallerID1: ');
  EVENT_DIAL := IniFile.ReadString('call_centre_settings',
    'EVENT_DIAL','Event: Dial');
  DIAL_STATE_BEGIN := IniFile.ReadString('call_centre_settings',
    'DIAL_STATE_BEGIN','SubEvent: Begin');
  DIAL_CALLERID := IniFile.ReadString('call_centre_settings',
    'DIAL_CALLERID','CallerIDNum: ');
  EVENT_SUB := IniFile.ReadString('call_centre_settings',
    'EVENT_SUB','SubEvent:');
  EVENT_NEW_CHANNEL := IniFile.ReadString('call_centre_settings',
    'EVENT_NEW_CHANNEL','Event: Newchannel');
  CHAN_CALLERID := IniFile.ReadString('call_centre_settings',
    'CHAN_CALLERID','CallerIDNum: ');
  PONG_ANSWER := IniFile.ReadString('call_centre_settings',
    'PONG_ANSWER','Ping: Pong');
  EVENT_HPREFIX := IniFile.ReadString('call_centre_settings',
    'EVENT_HPREFIX','Event:');
  PING_HPREFIX := IniFile.ReadString('call_centre_settings',
    'PING_HPREFIX','Ping:');
  RESPONSE_HPREFIX := IniFile.ReadString('call_centre_settings',
    'RESPONSE_HPREFIX','Response:');
  PSTN1_CHANN_CODE := IniFile.ReadString('call_centre_settings',
    'PSTN1_CHANN_CODE','fxo1');
  PSTN2_CHANN_CODE := IniFile.ReadString('call_centre_settings',
    'PSTN2_CHANN_CODE','fxo2');
  GSM1_CHANN_CODE := IniFile.ReadString('call_centre_settings',
    'GSM1_CHANN_CODE','gsm343');
  CHANN_CODE_PREFIX := IniFile.ReadString('call_centre_settings',
    'CHANN_CODE_PREFIX','Channel1:');
  crashedAMISocket:=False;
  try
  if IniFile.ReadString('BUSINESS_DATA',
    'активировать_AMI_клиента_TCPTHRD','NO')='YES' then
  begin
    if WSAStartup(MAKEWORD(1,1), wData) <> 0 then
    begin
      LogStr := ' Не могу загрузить WinSock! ';
      Synchronize(ShowAMILogMsg);
    end;
    ThreadCreated:=False;
    self.createTCPClientSocket;

    if ThreadCreated then
    begin
      LogStr := 'ThreadCreated! ';
      Synchronize(ShowAMILogMsg);
    end;

    LogStr := 'After Sock Create! ';
    Synchronize(ShowAMILogMsg);

    if ThreadCreated or True then
    begin
    LogStr := 'Before Auth! ';
    Synchronize(ShowAMILogMsg);
    try
    self.ClientThread.SendUTFString(
    'Action: Login'+CRLF+'Username: '+
        IniFile.ReadString('BUSINESS_DATA',
        'AMI_логин','admin')+CRLF+'Secret: '+
        IniFile.ReadString('BUSINESS_DATA',
        'AMI_пароль','amp111')+CRLF+
        'Events: on'+CRLF+CRLF);
    crashedAMIAuth := False;
    except on E: Exception do
    begin
      //ClientThread.  +IntToStr(ClientThread.Sock)
      crashedAMIAuth := True;
      LogStr := ' Ощибка аутентификации AMI-модуля!!! '+E.Message;
      Synchronize(ShowAMILogMsg);
    end;
    end;
    end
    else
    begin
          self.crashedAMISocket := True;
          LogStr := ' НЕУДАЧА попытки первоначального соединения с AMI!!!';
          Synchronize(ShowAMILogMsg);
    end;

  end;
  except on E: Exception do
    begin
      //ClientThread.  +IntToStr(ClientThread.Sock)
      self.crashedAMISocket := True;
      LogStr := ' Ощибка инициализации AMI-модуля!!! '+E.Message;
      Synchronize(ShowAMILogMsg);
    end;
  end;
end;

destructor TAMICoordinator.Destroy;
begin
  if IniFile.ReadString('BUSINESS_DATA',
    'активировать_AMI_клиента_TCPTHRD','NO')='YES' then
  begin
    if self.ThreadCreated then
    begin
      ShutDown(sServerListen, SD_BOTH);
      CloseSocket(self.sServerListen);
    end;
    WSACleanUp;
  end;
  inherited Destroy;
end;

procedure TAMICoordinator.Execute;
var i: Integer;
begin
  StreamAnalyseMemoList := TStringList.Create;
  while (true) do
    begin
      if AMIPPCounter<=0 then
      begin
        if self.ThreadCreated then
          AMIPPCounter:=10
        else
          AMIPPCounter:=IniFile.ReadInteger('BUSINESS_DATA',
            'интервал_восстан_связи_с_ASTERISK',10);
      end;
      AMIPPCounter:=AMIPPCounter-1;
      if not InReceiving then
      begin
      try
      try
        InReceiving:=True;
        if IniFile.ReadString('BUSINESS_DATA',
        'активировать_AMI_клиента_TCPTHRD','NO')='YES' then
        begin
          if ThreadCreated then
            begin
              if ClientThread.ErrorClientSocket or
                (Self.pongAnswerCounter<=0) then
                begin
                  if (Self.pongAnswerCounter<=0) then
                    begin
                      ClientThread.ErrorClientSocket:=True;
                      LogStr := ' Подтверждение PONG НЕ ПРИШЛО!!! ';
                      Synchronize(ShowAMILogMsg);
                    end
              else
                begin
                  LogStr := ' Сбой сокет-соединения с AMI!!!';
                  Synchronize(ShowAMILogMsg);
                end;
              ClientThread.Terminated:=True;
              Self.ThreadCreated:=False;
              Self.crashedAMISocket:=True;
              AMIPPCounter:=IniFile.ReadInteger('BUSINESS_DATA',
	              'интервал_восстан_связи_с_ASTERISK',10);
              CloseSocket(self.sServerListen);
            end
          else
            begin
              if Self.pongAnswerWaiting and
                (Self.pongAnswerCounter>=0) then
                Self.pongAnswerCounter:=
                  Self.pongAnswerCounter-1;
              LogStr := ': TCPTHRD Статус '+ ClientThread.StatusStr;
              Synchronize(ShowAMIStatusBar);
              for i:=0 to self.ClientThread.ThreadMessagesStringList.Count-1 do
                begin
                  LogStr := ': TCPTHRD '+
                  ClientThread.ThreadMessagesStringList.Strings[i];
                  Synchronize(ShowAMILogMsg);
                end;
          ClientThread.ThreadMessagesStringList.Clear;
          for i:=0 to self.ClientThread.InputDataStringList.Count-1 do
          begin
            LogStr := ': TCPTHRD '+
              ClientThread.InputDataStringList.Strings[i];
            Synchronize(ShowAMIInpLogMsg);
            if (IniFile.ReadString('BUSINESS_DATA',
	            'потоковый_анализ_AMI_данных','NO')='YES') then
              streamParseAMIData(ClientThread.
                InputDataStringList.Strings[i]);
          end;
          ClientThread.InputDataStringList.Clear;
          if AMIPPCounter<=0 then
            begin

              if crashedAMIAuth then
              begin

              try
              self.ClientThread.SendUTFString(
                'Action: Login'+CRLF+'Username: '+
                IniFile.ReadString('BUSINESS_DATA',
                'AMI_логин','admin')+CRLF+'Secret: '+
                IniFile.ReadString('BUSINESS_DATA',
                'AMI_пароль','amp111')+CRLF+
                'Events: on'+CRLF+CRLF);
              crashedAMIAuth := False;
              except on E: Exception do
              begin
              //ClientThread.  +IntToStr(ClientThread.Sock)
              crashedAMIAuth := True;
              LogStr := ' Ощибка аутентификации AMI-модуля!!! '+E.Message;
              Synchronize(ShowAMILogMsg);
              end;
              end;

              end;

              ClientThread.SendUTFString('Action: Ping'+CRLF+CRLF);
              pongAnswerCounter := IniFile.ReadInteger('BUSINESS_DATA',
                'время_ожидания_PING_ASTERISK',15);
              Self.pongAnswerWaiting:=True;
            end;
          end;
        end
        else
        begin
          if self.crashedAMISocket and
            (AMIPPCounter<=0) then
          begin
            Self.createTCPClientSocket;
            if ThreadCreated then
            begin
              try
              self.ClientThread.SendUTFString(
                'Action: Login'+CRLF+'Username: '+
                IniFile.ReadString('BUSINESS_DATA',
                'AMI_логин','admin')+CRLF+'Secret: '+
                IniFile.ReadString('BUSINESS_DATA',
                'AMI_пароль','amp111')+CRLF+
                'Events: on'+CRLF+CRLF);
              crashedAMIAuth := False;
              except on E: Exception do
              begin
              //ClientThread.  +IntToStr(ClientThread.Sock)
              crashedAMIAuth := True;
              LogStr := ' Ощибка аутентификации AMI-модуля!!! '+E.Message;
              Synchronize(ShowAMILogMsg);
              end;
              end;
            end
            else
              begin
              LogStr := ' НЕУДАЧА попытки повторного соединения с AMI!!! ';
              Synchronize(ShowAMILogMsg);
              end;
          end;
        end;
        end;
      except on E: Exception do
        begin
          LogStr := ': Ошибка итерации опроса сокета AMI: '+E.Message;
          Synchronize(ShowAMILogMsg);
        end;
      end;
      finally
        InReceiving:=False;
      end;
      end;

      Sleep(1000);
    end;
  //Советуют предварительно вызвать
  Shutdown(sServerListen, SD_Both);
  CloseSocket(sServerListen);
end;

procedure TAMICoordinator.streamParseAMIData(AMIInput: String);
var i: Integer;
    cutNumAnalysStr: String;
    callerIdHeaderPos: Integer;
begin
  try
    StreamAnalyseMemoList.Clear;
    StreamAnalyseMemoList.Append(AMIInput);
    for i:=0 to StreamAnalyseMemoList.Count-1 do
    begin
      //if self.LastInputHeaderIsDial or self.LastDialStateIsBegin then
    //AMIOutputMemo.Lines.Append('-----'+DateTimeToStr(Today+Time)+
    //StreamAnalyseMemo.Lines.Strings[i]);
      if Pos(Self.PONG_ANSWER,StreamAnalyseMemoList.Strings[i])>0 then
      begin
        self.pongAnswerWaiting:=False;
        LogStr := ' Подтверждение PONG. ';
        Synchronize(ShowAMILogMsg);
      end;
      if Pos(Self.EVENT_BRIDGE,
          StreamAnalyseMemoList.Strings[i])>0 then
      begin
        self.LastInputHeaderIsBridge:=True;
        LogStr := ' Найден признак LastInputHeaderIsBridge. Строка для анализа: '+
              StreamAnalyseMemoList.Strings[i];
        Synchronize(ShowAMILogMsg);
      end
      else if Pos(Self.EVENT_DIAL,
          StreamAnalyseMemoList.Strings[i])>0 then
      begin
        self.LastInputHeaderIsDial:=True;
        LogStr := ' Найден признак LastInputHeaderIsDial. Строка для анализа: '+
              StreamAnalyseMemoList.Strings[i];
        Synchronize(ShowAMILogMsg);
        //AMIOutputMemo.Lines.Append(Self.DIAL_STATE_BEGIN);
        //AMIOutputMemo.Lines.AddStrings(StreamAnalyseMemo.Lines);
      end
      else if Pos(Self.EVENT_NEW_CHANNEL,
          StreamAnalyseMemoList.Strings[i])>0 then
      begin
        self.LastInputHeaderIsNewChannel:=True;
        LogStr := ' Найден признак LastInputHeaderIsNewChannel. Строка для анализа: '+
              StreamAnalyseMemoList.Strings[i];
        Synchronize(ShowAMILogMsg);
        //AMIOutputMemo.Lines.Append(Self.DIAL_STATE_BEGIN);
        //AMIOutputMemo.Lines.AddStrings(StreamAnalyseMemo.Lines);
      end
	  else if ( (Pos(Self.EVENT_HPREFIX,
          StreamAnalyseMemoList.Strings[i])>0)
          and not (Pos(EVENT_SUB,
          StreamAnalyseMemoList.Strings[i])>0) )
          or (Pos(Self.PING_HPREFIX,
          StreamAnalyseMemoList.Strings[i])>0)
          or (Pos(Self.RESPONSE_HPREFIX,
          StreamAnalyseMemoList.Strings[i])>0) then
      begin
		  self.LastInputHeaderIsBridge:=False;
		  self.LastBridgeStateStateIsLink:=False;
      self.LastInputHeaderIsNewChannel:=False;
      self.LastInputHeaderIsDial:=False;
      self.LastDialStateIsBegin:=False;
	  end
	  else
	  begin
	  end;
    if IniFile.ReadString('call_centre_settings',
        'AMI_CALLERID_по_факту_поднятия','NO')='YES' then
    begin
      if (Pos(Self.BRIDGE_STATE_LINK,
          StreamAnalyseMemoList.Strings[i])>0)
        and self.LastInputHeaderIsBridge then
      begin
        self.LastBridgeStateStateIsLink:=True;
        LogStr := ' Найден признак BridgeStateStateIsLink. Строка для анализа: '+
              StreamAnalyseMemoList.Strings[i];
        Synchronize(ShowAMIAnLogMsg);
        Synchronize(ShowAMILogMsg);
      end;
      callerIdHeaderPos:=Pos(Trim(Self.BRIDGE_CALLERID1),
          StreamAnalyseMemoList.Strings[i]);
      if (callerIdHeaderPos>0)
        and self.LastBridgeStateStateIsLink then
      begin
        self.LastInputHeaderIsBridge:=False;
        self.LastBridgeStateStateIsLink:=False;
        LogStr := ' Найден номер по CALLERID.. Строка для анализа: '+
              StreamAnalyseMemoList.Strings[i];
        Synchronize(ShowAMIAnLogMsg);
        Synchronize(ShowAMILogMsg);
        if (
          (callerIdHeaderPos+
          Length(Self.BRIDGE_CALLERID1)-1) <=
          (Length(StreamAnalyseMemoList.Strings[i])-12)
          )
          then
          begin
            cutNumAnalysStr:=
              Copy(
              StreamAnalyseMemoList.Strings[i],
              (callerIdHeaderPos+Length(Self.BRIDGE_CALLERID1)),
              (Length(StreamAnalyseMemoList.Strings[i])-
              (callerIdHeaderPos+Length(Self.BRIDGE_CALLERID1))+1)
              );
            cutNumAnalysStr:=Trim(cutNumAnalysStr);
            LogStr := ' CALLERID: '+cutNumAnalysStr;
            Synchronize(ShowAMIAnLogMsg);
            Synchronize(ShowAMILogMsg);
            if Length(cutNumAnalysStr)>12 then
              cutNumAnalysStr:=Copy(cutNumAnalysStr,1,12);
            amiDetectedNumber:=cutNumAnalysStr;
            LogStr := ' CUT CALLERID: '+amiDetectedNumber;
            Synchronize(ShowAMIAnLogMsg);
            Synchronize(ShowAMILogMsg);
            Synchronize(addOrderOnExtractedNumber);
          end;
      end;
      end
      else if IniFile.ReadString('call_centre_settings',
        'AMI_CALLERID_по_DIAL','NO')='YES' then
      begin
      if (Pos(Self.DIAL_STATE_BEGIN,
          StreamAnalyseMemoList.Strings[i])>0)
        and self.LastInputHeaderIsDial then
      begin
        self.LastDialStateIsBegin:=True;
        LogStr := ' Найден признак LastDialStateIsBegin. Строка для анализа: '+
              StreamAnalyseMemoList.Strings[i];
        Synchronize(ShowAMIAnLogMsg);
        Synchronize(ShowAMILogMsg);
      end;
      callerIdHeaderPos:=Pos(Trim(Self.DIAL_CALLERID),
          StreamAnalyseMemoList.Strings[i]);
      if (callerIdHeaderPos>0)
        and self.LastDialStateIsBegin then
      begin
        //AMIOutputMemo.Lines.AddStrings(StreamAnalyseMemo.Lines);
        self.LastInputHeaderIsDial:=False;
        self.LastDialStateIsBegin:=False;
        LogStr := ' Найден номер по CALLERID. Строка для анализа: '+
              StreamAnalyseMemoList.Strings[i];
        Synchronize(ShowAMIAnLogMsg);
        Synchronize(ShowAMILogMsg);
        if (
          (callerIdHeaderPos+
          Length(Self.DIAL_CALLERID)-1) <=
          (Length(StreamAnalyseMemoList.Strings[i])-12)
          )
          then
          begin
            cutNumAnalysStr:=
              Copy(
              StreamAnalyseMemoList.Strings[i],
              (callerIdHeaderPos+Length(Self.DIAL_CALLERID)),
              (Length(StreamAnalyseMemoList.Strings[i])-
              (callerIdHeaderPos+Length(Self.DIAL_CALLERID))+1)
              );
            cutNumAnalysStr:=Trim(cutNumAnalysStr);
            if Length(cutNumAnalysStr)>12 then
              cutNumAnalysStr:=Copy(cutNumAnalysStr,1,12);
            amiDetectedNumber:=cutNumAnalysStr;
            Synchronize(addOrderOnExtractedNumber);
          end;
      end;
    end
    else
    begin
      callerIdHeaderPos:=Pos(Trim(Self.CHAN_CALLERID),
          StreamAnalyseMemoList.Strings[i]);
      if (callerIdHeaderPos>0)
        and self.LastInputHeaderIsNewChannel then
      begin
        //AMIOutputMemo.Lines.AddStrings(StreamAnalyseMemo.Lines);
        self.LastInputHeaderIsNewChannel:=False;
        LogStr := ' Найден номер по CALLERID. Строка для анализа: '+
              StreamAnalyseMemoList.Strings[i];
        Synchronize(ShowAMILogMsg);
        if (
          (callerIdHeaderPos+
          Length(Self.DIAL_CALLERID)-1) <=
          (Length(StreamAnalyseMemoList.Strings[i])-12)
          )
          then
          begin
            cutNumAnalysStr:=
              Copy(
              StreamAnalyseMemoList.Strings[i],
              (callerIdHeaderPos+Length(Self.CHAN_CALLERID)),
              (Length(StreamAnalyseMemoList.Strings[i])-
              (callerIdHeaderPos+Length(Self.CHAN_CALLERID))+1)
              );
            cutNumAnalysStr:=Trim(cutNumAnalysStr);
            if Length(cutNumAnalysStr)>12 then
              cutNumAnalysStr:=Copy(cutNumAnalysStr,1,12);
            amiDetectedNumber:=cutNumAnalysStr;
            Synchronize(addOrderOnExtractedNumber);
          end;
      end;
    end;
    end;
  except on E:Exception do
    begin
      LogStr := ' Ошибка подг. строки (stream-analys)! '+E.Message;
      Synchronize(ShowAMILogMsg);
      //AnalyseMemo.Lines.Add('Ошибка подг. строки (stream-analys)! '+E.Message);
    end;
  end;
end;


end.
