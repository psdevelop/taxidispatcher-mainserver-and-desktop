(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 30.11.2006 12:31:54         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

unit BusinessClasses;

{$DEFINE BusinessClasses_unitheader}
{$INCLUDE BusinessClasses_Interface.inc}

{ Includefile for methodimplementations }

{$INCLUDE BusinessClasses.inc}

const
  BoldMemberAssertInvalidObjectType: string = 'Object of singlelink (%s.%s) is of wrong type (is %s, should be %s)';

{ TBusinessClassesRoot }

procedure TBusinessClassesRootList.Add(NewObject: TBusinessClassesRoot);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBusinessClassesRootList.IndexOf(anObject: TBusinessClassesRoot): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBusinessClassesRootList.Includes(anObject: TBusinessClassesRoot) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBusinessClassesRootList.AddNew: TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(InternalAddNew);
end;

procedure TBusinessClassesRootList.Insert(index: Integer; NewObject: TBusinessClassesRoot);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBusinessClassesRootList.GetBoldObject(index: Integer): TBusinessClassesRoot;
begin
  result := TBusinessClassesRoot(GetElement(index));
end;

procedure TBusinessClassesRootList.SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
begin;
  SetElement(index, NewObject);
end;

{ TBalans }

function TBalans._Get_M_Balans: TBAFloat;
begin
  assert(ValidateMember('TBalans', 'Balans', 0, TBAFloat));
  Result := TBAFloat(BoldMembers[0]);
end;

function TBalans._GetBalans: double;
begin
  Result := M_Balans.AsFloat;
end;

function TBalans._Get_M_Balans_na_datu: TBAFloat;
begin
  assert(ValidateMember('TBalans', 'Balans_na_datu', 1, TBAFloat));
  Result := TBAFloat(BoldMembers[1]);
end;

function TBalans._GetBalans_na_datu: double;
begin
  Result := M_Balans_na_datu.AsFloat;
end;

function TBalans._Get_M_Data_vych_balansa: TBADateTime;
begin
  assert(ValidateMember('TBalans', 'Data_vych_balansa', 2, TBADateTime));
  Result := TBADateTime(BoldMembers[2]);
end;

function TBalans._GetData_vych_balansa: TDateTime;
begin
  Result := M_Data_vych_balansa.AsDateTime;
end;

procedure TBalans._SetData_vych_balansa(const NewValue: TDateTime);
begin
  M_Data_vych_balansa.AsDateTime := NewValue;
end;

function TBalans._Getimeet_rashody: TRashodList;
begin
  assert(ValidateMember('TBalans', 'imeet_rashody', 3, TRashodList));
  Result := TRashodList(BoldMembers[3]);
end;

function TBalans._Getimeet_prihody: TPrihodList;
begin
  assert(ValidateMember('TBalans', 'imeet_prihody', 4, TPrihodList));
  Result := TPrihodList(BoldMembers[4]);
end;

procedure TBalansList.Add(NewObject: TBalans);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TBalansList.IndexOf(anObject: TBalans): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TBalansList.Includes(anObject: TBalans) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TBalansList.AddNew: TBalans;
begin
  result := TBalans(InternalAddNew);
end;

procedure TBalansList.Insert(index: Integer; NewObject: TBalans);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TBalansList.GetBoldObject(index: Integer): TBalans;
begin
  result := TBalans(GetElement(index));
end;

procedure TBalansList.SetBoldObject(index: Integer; NewObject: TBalans);
begin;
  SetElement(index, NewObject);
end;

{ TVhody_poljz }

function TVhody_poljz._Get_M_Data: TBADateTime;
begin
  assert(ValidateMember('TVhody_poljz', 'Data', 0, TBADateTime));
  Result := TBADateTime(BoldMembers[0]);
end;

function TVhody_poljz._GetData: TDateTime;
begin
  Result := M_Data.AsDateTime;
end;

procedure TVhody_poljz._SetData(const NewValue: TDateTime);
begin
  M_Data.AsDateTime := NewValue;
end;

function TVhody_poljz._Get_M_Vhod: TBABoolean;
begin
  assert(ValidateMember('TVhody_poljz', 'Vhod', 1, TBABoolean));
  Result := TBABoolean(BoldMembers[1]);
end;

function TVhody_poljz._GetVhod: Boolean;
begin
  Result := M_Vhod.AsBoolean;
end;

procedure TVhody_poljz._SetVhod(const NewValue: Boolean);
begin
  M_Vhod.AsBoolean := NewValue;
end;

function TVhody_poljz._Get_M_Vyhod: TBABoolean;
begin
  assert(ValidateMember('TVhody_poljz', 'Vyhod', 2, TBABoolean));
  Result := TBABoolean(BoldMembers[2]);
end;

function TVhody_poljz._GetVyhod: Boolean;
begin
  Result := M_Vyhod.AsBoolean;
end;

procedure TVhody_poljz._SetVyhod(const NewValue: Boolean);
begin
  M_Vyhod.AsBoolean := NewValue;
end;

function TVhody_poljz._Get_M_V_roli_operatora: TBABoolean;
begin
  assert(ValidateMember('TVhody_poljz', 'V_roli_operatora', 3, TBABoolean));
  Result := TBABoolean(BoldMembers[3]);
end;

function TVhody_poljz._GetV_roli_operatora: Boolean;
begin
  Result := M_V_roli_operatora.AsBoolean;
end;

procedure TVhody_poljz._SetV_roli_operatora(const NewValue: Boolean);
begin
  M_V_roli_operatora.AsBoolean := NewValue;
end;

function TVhody_poljz._Get_M_V_roli_dispetchera: TBABoolean;
begin
  assert(ValidateMember('TVhody_poljz', 'V_roli_dispetchera', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TVhody_poljz._GetV_roli_dispetchera: Boolean;
begin
  Result := M_V_roli_dispetchera.AsBoolean;
end;

procedure TVhody_poljz._SetV_roli_dispetchera(const NewValue: Boolean);
begin
  M_V_roli_dispetchera.AsBoolean := NewValue;
end;

function TVhody_poljz._Get_M_Skoljko_chasov: TBAFloat;
begin
  assert(ValidateMember('TVhody_poljz', 'Skoljko_chasov', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TVhody_poljz._GetSkoljko_chasov: double;
begin
  Result := M_Skoljko_chasov.AsFloat;
end;

function TVhody_poljz._Get_M_yavl_vhodom_poljz: TBoldObjectReference;
begin
  assert(ValidateMember('TVhody_poljz', 'yavl_vhodom_poljz', 6, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[6]);
end;

function TVhody_poljz._Getyavl_vhodom_poljz: TPersonal;
begin
  assert(not assigned(M_yavl_vhodom_poljz.BoldObject) or (M_yavl_vhodom_poljz.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavl_vhodom_poljz', M_yavl_vhodom_poljz.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_yavl_vhodom_poljz.BoldObject);
end;

procedure TVhody_poljz._Setyavl_vhodom_poljz(const value: TPersonal);
begin
  M_yavl_vhodom_poljz.BoldObject := value;
end;

procedure TVhody_poljzList.Add(NewObject: TVhody_poljz);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TVhody_poljzList.IndexOf(anObject: TVhody_poljz): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TVhody_poljzList.Includes(anObject: TVhody_poljz) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TVhody_poljzList.AddNew: TVhody_poljz;
begin
  result := TVhody_poljz(InternalAddNew);
end;

procedure TVhody_poljzList.Insert(index: Integer; NewObject: TVhody_poljz);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TVhody_poljzList.GetBoldObject(index: Integer): TVhody_poljz;
begin
  result := TVhody_poljz(GetElement(index));
end;

procedure TVhody_poljzList.SetBoldObject(index: Integer; NewObject: TVhody_poljz);
begin;
  SetElement(index, NewObject);
end;

{ TKlass_poiska }

function TKlass_poiska._Get_M_Iskatj_po_klientu: TBABoolean;
begin
  assert(ValidateMember('TKlass_poiska', 'Iskatj_po_klientu', 0, TBABoolean));
  Result := TBABoolean(BoldMembers[0]);
end;

function TKlass_poiska._GetIskatj_po_klientu: Boolean;
begin
  Result := M_Iskatj_po_klientu.AsBoolean;
end;

procedure TKlass_poiska._SetIskatj_po_klientu(const NewValue: Boolean);
begin
  M_Iskatj_po_klientu.AsBoolean := NewValue;
end;

function TKlass_poiska._Get_M_Imya_klienta: TBAString;
begin
  assert(ValidateMember('TKlass_poiska', 'Imya_klienta', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TKlass_poiska._GetImya_klienta: String;
begin
  Result := M_Imya_klienta.AsString;
end;

procedure TKlass_poiska._SetImya_klienta(const NewValue: String);
begin
  M_Imya_klienta.AsString := NewValue;
end;

function TKlass_poiska._Get_M_Familiya_klienta: TBAString;
begin
  assert(ValidateMember('TKlass_poiska', 'Familiya_klienta', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TKlass_poiska._GetFamiliya_klienta: String;
begin
  Result := M_Familiya_klienta.AsString;
end;

function TKlass_poiska._Get_M_Otchestvo_klienta: TBAString;
begin
  assert(ValidateMember('TKlass_poiska', 'Otchestvo_klienta', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TKlass_poiska._GetOtchestvo_klienta: String;
begin
  Result := M_Otchestvo_klienta.AsString;
end;

procedure TKlass_poiska._SetOtchestvo_klienta(const NewValue: String);
begin
  M_Otchestvo_klienta.AsString := NewValue;
end;

function TKlass_poiska._Get_M_Iskatj_po_klyuch_slovam: TBABoolean;
begin
  assert(ValidateMember('TKlass_poiska', 'Iskatj_po_klyuch_slovam', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TKlass_poiska._GetIskatj_po_klyuch_slovam: Boolean;
begin
  Result := M_Iskatj_po_klyuch_slovam.AsBoolean;
end;

procedure TKlass_poiska._SetIskatj_po_klyuch_slovam(const NewValue: Boolean);
begin
  M_Iskatj_po_klyuch_slovam.AsBoolean := NewValue;
end;

function TKlass_poiska._Get_M_Klyuch_slovo: TBAString;
begin
  assert(ValidateMember('TKlass_poiska', 'Klyuch_slovo', 5, TBAString));
  Result := TBAString(BoldMembers[5]);
end;

function TKlass_poiska._GetKlyuch_slovo: String;
begin
  Result := M_Klyuch_slovo.AsString;
end;

procedure TKlass_poiska._SetKlyuch_slovo(const NewValue: String);
begin
  M_Klyuch_slovo.AsString := NewValue;
end;

function TKlass_poiska._Get_M_Iskatj_po_date_dob: TBABoolean;
begin
  assert(ValidateMember('TKlass_poiska', 'Iskatj_po_date_dob', 6, TBABoolean));
  Result := TBABoolean(BoldMembers[6]);
end;

function TKlass_poiska._GetIskatj_po_date_dob: Boolean;
begin
  Result := M_Iskatj_po_date_dob.AsBoolean;
end;

procedure TKlass_poiska._SetIskatj_po_date_dob(const NewValue: Boolean);
begin
  M_Iskatj_po_date_dob.AsBoolean := NewValue;
end;

function TKlass_poiska._Get_M_S_daty_dob: TBADate;
begin
  assert(ValidateMember('TKlass_poiska', 'S_daty_dob', 7, TBADate));
  Result := TBADate(BoldMembers[7]);
end;

function TKlass_poiska._GetS_daty_dob: TDate;
begin
  Result := M_S_daty_dob.AsDate;
end;

procedure TKlass_poiska._SetS_daty_dob(const NewValue: TDate);
begin
  M_S_daty_dob.AsDate := NewValue;
end;

function TKlass_poiska._Get_M_Po_datu_dob: TBADate;
begin
  assert(ValidateMember('TKlass_poiska', 'Po_datu_dob', 8, TBADate));
  Result := TBADate(BoldMembers[8]);
end;

function TKlass_poiska._GetPo_datu_dob: TDate;
begin
  Result := M_Po_datu_dob.AsDate;
end;

procedure TKlass_poiska._SetPo_datu_dob(const NewValue: TDate);
begin
  M_Po_datu_dob.AsDate := NewValue;
end;

function TKlass_poiska._Get_M_Seg_data: TBADate;
begin
  assert(ValidateMember('TKlass_poiska', 'Seg_data', 9, TBADate));
  Result := TBADate(BoldMembers[9]);
end;

function TKlass_poiska._GetSeg_data: TDate;
begin
  Result := M_Seg_data.AsDate;
end;

procedure TKlass_poiska._SetSeg_data(const NewValue: TDate);
begin
  M_Seg_data.AsDate := NewValue;
end;

function TKlass_poiska._Get_M_Nomer_sled_vyp: TBAInteger;
begin
  assert(ValidateMember('TKlass_poiska', 'Nomer_sled_vyp', 10, TBAInteger));
  Result := TBAInteger(BoldMembers[10]);
end;

function TKlass_poiska._GetNomer_sled_vyp: Integer;
begin
  Result := M_Nomer_sled_vyp.AsInteger;
end;

procedure TKlass_poiska._SetNomer_sled_vyp(const NewValue: Integer);
begin
  M_Nomer_sled_vyp.AsInteger := NewValue;
end;

function TKlass_poiska._Get_M_God_sled_vyp: TBAInteger;
begin
  assert(ValidateMember('TKlass_poiska', 'God_sled_vyp', 11, TBAInteger));
  Result := TBAInteger(BoldMembers[11]);
end;

function TKlass_poiska._GetGod_sled_vyp: Integer;
begin
  Result := M_God_sled_vyp.AsInteger;
end;

procedure TKlass_poiska._SetGod_sled_vyp(const NewValue: Integer);
begin
  M_God_sled_vyp.AsInteger := NewValue;
end;

function TKlass_poiska._Get_M_Data_sled_vyp: TBADate;
begin
  assert(ValidateMember('TKlass_poiska', 'Data_sled_vyp', 12, TBADate));
  Result := TBADate(BoldMembers[12]);
end;

function TKlass_poiska._GetData_sled_vyp: TDate;
begin
  Result := M_Data_sled_vyp.AsDate;
end;

procedure TKlass_poiska._SetData_sled_vyp(const NewValue: TDate);
begin
  M_Data_sled_vyp.AsDate := NewValue;
end;

function TKlass_poiska._Get_M_Iskatj_dvoinikov: TBABoolean;
begin
  assert(ValidateMember('TKlass_poiska', 'Iskatj_dvoinikov', 13, TBABoolean));
  Result := TBABoolean(BoldMembers[13]);
end;

function TKlass_poiska._GetIskatj_dvoinikov: Boolean;
begin
  Result := M_Iskatj_dvoinikov.AsBoolean;
end;

procedure TKlass_poiska._SetIskatj_dvoinikov(const NewValue: Boolean);
begin
  M_Iskatj_dvoinikov.AsBoolean := NewValue;
end;

function TKlass_poiska._Get_M_Tek_izdanie_ident: TBAInteger;
begin
  assert(ValidateMember('TKlass_poiska', 'Tek_izdanie_ident', 14, TBAInteger));
  Result := TBAInteger(BoldMembers[14]);
end;

function TKlass_poiska._GetTek_izdanie_ident: Integer;
begin
  Result := M_Tek_izdanie_ident.AsInteger;
end;

procedure TKlass_poiska._SetTek_izdanie_ident(const NewValue: Integer);
begin
  M_Tek_izdanie_ident.AsInteger := NewValue;
end;

procedure TKlass_poiskaList.Add(NewObject: TKlass_poiska);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TKlass_poiskaList.IndexOf(anObject: TKlass_poiska): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TKlass_poiskaList.Includes(anObject: TKlass_poiska) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TKlass_poiskaList.AddNew: TKlass_poiska;
begin
  result := TKlass_poiska(InternalAddNew);
end;

procedure TKlass_poiskaList.Insert(index: Integer; NewObject: TKlass_poiska);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TKlass_poiskaList.GetBoldObject(index: Integer): TKlass_poiska;
begin
  result := TKlass_poiska(GetElement(index));
end;

procedure TKlass_poiskaList.SetBoldObject(index: Integer; NewObject: TKlass_poiska);
begin;
  SetElement(index, NewObject);
end;

function TKlass_poiska.GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe;
begin
  if (Member = M_Familiya_klienta) then result := _Familiya_klienta_DeriveAndSubscribe else
  result := inherited GetDeriveMethodForMember(Member);
end;

function TKlass_poiska.GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive;
begin
  result := inherited GetReverseDeriveMethodForMember(Member);
end;

{ TLog_operacii }

function TLog_operacii._Get_M_Naimenovanie_operacii: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Naimenovanie_operacii', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TLog_operacii._GetNaimenovanie_operacii: String;
begin
  Result := M_Naimenovanie_operacii.AsString;
end;

procedure TLog_operacii._SetNaimenovanie_operacii(const NewValue: String);
begin
  M_Naimenovanie_operacii.AsString := NewValue;
end;

function TLog_operacii._Get_M_Subjekt: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Subjekt', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TLog_operacii._GetSubjekt: String;
begin
  Result := M_Subjekt.AsString;
end;

function TLog_operacii._Get_M_Data_i_vremya: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Data_i_vremya', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TLog_operacii._GetData_i_vremya: String;
begin
  Result := M_Data_i_vremya.AsString;
end;

function TLog_operacii._Get_M_Data: TBADate;
begin
  assert(ValidateMember('TLog_operacii', 'Data', 3, TBADate));
  Result := TBADate(BoldMembers[3]);
end;

function TLog_operacii._GetData: TDate;
begin
  Result := M_Data.AsDate;
end;

procedure TLog_operacii._SetData(const NewValue: TDate);
begin
  M_Data.AsDate := NewValue;
end;

function TLog_operacii._Get_M_Vremya: TBAString;
begin
  assert(ValidateMember('TLog_operacii', 'Vremya', 4, TBAString));
  Result := TBAString(BoldMembers[4]);
end;

function TLog_operacii._GetVremya: String;
begin
  Result := M_Vremya.AsString;
end;

procedure TLog_operacii._SetVremya(const NewValue: String);
begin
  M_Vremya.AsString := NewValue;
end;

function TLog_operacii._Get_M_ot_deistvii: TBoldObjectReference;
begin
  assert(ValidateMember('TLog_operacii', 'ot_deistvii', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TLog_operacii._Getot_deistvii: TPersonal;
begin
  assert(not assigned(M_ot_deistvii.BoldObject) or (M_ot_deistvii.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ot_deistvii', M_ot_deistvii.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_ot_deistvii.BoldObject);
end;

procedure TLog_operacii._Setot_deistvii(const value: TPersonal);
begin
  M_ot_deistvii.BoldObject := value;
end;

procedure TLog_operaciiList.Add(NewObject: TLog_operacii);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TLog_operaciiList.IndexOf(anObject: TLog_operacii): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TLog_operaciiList.Includes(anObject: TLog_operacii) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TLog_operaciiList.AddNew: TLog_operacii;
begin
  result := TLog_operacii(InternalAddNew);
end;

procedure TLog_operaciiList.Insert(index: Integer; NewObject: TLog_operacii);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TLog_operaciiList.GetBoldObject(index: Integer): TLog_operacii;
begin
  result := TLog_operacii(GetElement(index));
end;

procedure TLog_operaciiList.SetBoldObject(index: Integer; NewObject: TLog_operacii);
begin;
  SetElement(index, NewObject);
end;

{ TObjekt_vyborki_otchyotnosti }

function TObjekt_vyborki_otchyotnosti._Get_M_Tip_objekta: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Tip_objekta', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TObjekt_vyborki_otchyotnosti._GetTip_objekta: String;
begin
  Result := M_Tip_objekta.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetTip_objekta(const NewValue: String);
begin
  M_Tip_objekta.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Data_nachala: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Data_nachala', 1, TBADateTime));
  Result := TBADateTime(BoldMembers[1]);
end;

function TObjekt_vyborki_otchyotnosti._GetData_nachala: TDateTime;
begin
  Result := M_Data_nachala.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._SetData_nachala(const NewValue: TDateTime);
begin
  M_Data_nachala.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Data_konca: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Data_konca', 2, TBADateTime));
  Result := TBADateTime(BoldMembers[2]);
end;

function TObjekt_vyborki_otchyotnosti._GetData_konca: TDateTime;
begin
  Result := M_Data_konca.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._SetData_konca(const NewValue: TDateTime);
begin
  M_Data_konca.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Procent_otchisleniya: TBAFloat;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Procent_otchisleniya', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TObjekt_vyborki_otchyotnosti._GetProcent_otchisleniya: double;
begin
  Result := M_Procent_otchisleniya.AsFloat;
end;

procedure TObjekt_vyborki_otchyotnosti._SetProcent_otchisleniya(const NewValue: double);
begin
  M_Procent_otchisleniya.AsFloat := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Filjtr_pozyvnoi: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Filjtr_pozyvnoi', 4, TBABoolean));
  Result := TBABoolean(BoldMembers[4]);
end;

function TObjekt_vyborki_otchyotnosti._GetFiljtr_pozyvnoi: Boolean;
begin
  Result := M_Filjtr_pozyvnoi.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetFiljtr_pozyvnoi(const NewValue: Boolean);
begin
  M_Filjtr_pozyvnoi.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Filjtr_data_nachala: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Filjtr_data_nachala', 5, TBADateTime));
  Result := TBADateTime(BoldMembers[5]);
end;

function TObjekt_vyborki_otchyotnosti._GetFiljtr_data_nachala: TDateTime;
begin
  Result := M_Filjtr_data_nachala.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._SetFiljtr_data_nachala(const NewValue: TDateTime);
begin
  M_Filjtr_data_nachala.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Filjtr_data_konca: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Filjtr_data_konca', 6, TBADateTime));
  Result := TBADateTime(BoldMembers[6]);
end;

function TObjekt_vyborki_otchyotnosti._GetFiljtr_data_konca: TDateTime;
begin
  Result := M_Filjtr_data_konca.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._SetFiljtr_data_konca(const NewValue: TDateTime);
begin
  M_Filjtr_data_konca.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Cvet_prinyatyh: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Cvet_prinyatyh', 7, TBAString));
  Result := TBAString(BoldMembers[7]);
end;

function TObjekt_vyborki_otchyotnosti._GetCvet_prinyatyh: String;
begin
  Result := M_Cvet_prinyatyh.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetCvet_prinyatyh(const NewValue: String);
begin
  M_Cvet_prinyatyh.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Cvet_nachavshihsya: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Cvet_nachavshihsya', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TObjekt_vyborki_otchyotnosti._GetCvet_nachavshihsya: String;
begin
  Result := M_Cvet_nachavshihsya.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetCvet_nachavshihsya(const NewValue: String);
begin
  M_Cvet_nachavshihsya.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Cvet_okonchivshihsya: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Cvet_okonchivshihsya', 9, TBAString));
  Result := TBAString(BoldMembers[9]);
end;

function TObjekt_vyborki_otchyotnosti._GetCvet_okonchivshihsya: String;
begin
  Result := M_Cvet_okonchivshihsya.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetCvet_okonchivshihsya(const NewValue: String);
begin
  M_Cvet_okonchivshihsya.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Vybratj_poslednie_nesk_dnei: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Vybratj_poslednie_nesk_dnei', 10, TBABoolean));
  Result := TBABoolean(BoldMembers[10]);
end;

function TObjekt_vyborki_otchyotnosti._GetVybratj_poslednie_nesk_dnei: Boolean;
begin
  Result := M_Vybratj_poslednie_nesk_dnei.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetVybratj_poslednie_nesk_dnei(const NewValue: Boolean);
begin
  M_Vybratj_poslednie_nesk_dnei.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Kol_posl_dnei: TBAFloat;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Kol_posl_dnei', 11, TBAFloat));
  Result := TBAFloat(BoldMembers[11]);
end;

function TObjekt_vyborki_otchyotnosti._GetKol_posl_dnei: double;
begin
  Result := M_Kol_posl_dnei.AsFloat;
end;

procedure TObjekt_vyborki_otchyotnosti._SetKol_posl_dnei(const NewValue: double);
begin
  M_Kol_posl_dnei.AsFloat := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Posl_data: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Posl_data', 12, TBADateTime));
  Result := TBADateTime(BoldMembers[12]);
end;

function TObjekt_vyborki_otchyotnosti._GetPosl_data: TDateTime;
begin
  Result := M_Posl_data.AsDateTime;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Data_minus_vybir_dni: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Data_minus_vybir_dni', 13, TBADateTime));
  Result := TBADateTime(BoldMembers[13]);
end;

function TObjekt_vyborki_otchyotnosti._GetData_minus_vybir_dni: TDateTime;
begin
  Result := M_Data_minus_vybir_dni.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._SetData_minus_vybir_dni(const NewValue: TDateTime);
begin
  M_Data_minus_vybir_dni.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Nomer_pozyvnoi_filjtr: TBAInteger;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Nomer_pozyvnoi_filjtr', 14, TBAInteger));
  Result := TBAInteger(BoldMembers[14]);
end;

function TObjekt_vyborki_otchyotnosti._GetNomer_pozyvnoi_filjtr: Integer;
begin
  Result := M_Nomer_pozyvnoi_filjtr.AsInteger;
end;

procedure TObjekt_vyborki_otchyotnosti._SetNomer_pozyvnoi_filjtr(const NewValue: Integer);
begin
  M_Nomer_pozyvnoi_filjtr.AsInteger := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Cvet_predvarit: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Cvet_predvarit', 15, TBAString));
  Result := TBAString(BoldMembers[15]);
end;

function TObjekt_vyborki_otchyotnosti._GetCvet_predvarit: String;
begin
  Result := M_Cvet_predvarit.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetCvet_predvarit(const NewValue: String);
begin
  M_Cvet_predvarit.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Data_po_umolchaniyu: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Data_po_umolchaniyu', 16, TBADateTime));
  Result := TBADateTime(BoldMembers[16]);
end;

function TObjekt_vyborki_otchyotnosti._GetData_po_umolchaniyu: TDateTime;
begin
  Result := M_Data_po_umolchaniyu.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._SetData_po_umolchaniyu(const NewValue: TDateTime);
begin
  M_Data_po_umolchaniyu.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Avtozapoln_sektorov: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Avtozapoln_sektorov', 17, TBABoolean));
  Result := TBABoolean(BoldMembers[17]);
end;

function TObjekt_vyborki_otchyotnosti._GetAvtozapoln_sektorov: Boolean;
begin
  Result := M_Avtozapoln_sektorov.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetAvtozapoln_sektorov(const NewValue: Boolean);
begin
  M_Avtozapoln_sektorov.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Naznach_iz_obsh__spiska: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Naznach_iz_obsh__spiska', 18, TBABoolean));
  Result := TBABoolean(BoldMembers[18]);
end;

function TObjekt_vyborki_otchyotnosti._GetNaznach_iz_obsh__spiska: Boolean;
begin
  Result := M_Naznach_iz_obsh__spiska.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetNaznach_iz_obsh__spiska(const NewValue: Boolean);
begin
  M_Naznach_iz_obsh__spiska.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_rep_time: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'rep_time', 19, TBADateTime));
  Result := TBADateTime(BoldMembers[19]);
end;

function TObjekt_vyborki_otchyotnosti._Getrep_time: TDateTime;
begin
  Result := M_rep_time.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._Setrep_time(const NewValue: TDateTime);
begin
  M_rep_time.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Avtozap_konechn_sekt: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Avtozap_konechn_sekt', 20, TBABoolean));
  Result := TBABoolean(BoldMembers[20]);
end;

function TObjekt_vyborki_otchyotnosti._GetAvtozap_konechn_sekt: Boolean;
begin
  Result := M_Avtozap_konechn_sekt.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetAvtozap_konechn_sekt(const NewValue: Boolean);
begin
  M_Avtozap_konechn_sekt.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Avtozap_nach_sektora: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Avtozap_nach_sektora', 21, TBABoolean));
  Result := TBABoolean(BoldMembers[21]);
end;

function TObjekt_vyborki_otchyotnosti._GetAvtozap_nach_sektora: Boolean;
begin
  Result := M_Avtozap_nach_sektora.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetAvtozap_nach_sektora(const NewValue: Boolean);
begin
  M_Avtozap_nach_sektora.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Zapros_nach_sektora: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Zapros_nach_sektora', 22, TBABoolean));
  Result := TBABoolean(BoldMembers[22]);
end;

function TObjekt_vyborki_otchyotnosti._GetZapros_nach_sektora: Boolean;
begin
  Result := M_Zapros_nach_sektora.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetZapros_nach_sektora(const NewValue: Boolean);
begin
  M_Zapros_nach_sektora.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Zapros_konech_sektora: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Zapros_konech_sektora', 23, TBABoolean));
  Result := TBABoolean(BoldMembers[23]);
end;

function TObjekt_vyborki_otchyotnosti._GetZapros_konech_sektora: Boolean;
begin
  Result := M_Zapros_konech_sektora.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetZapros_konech_sektora(const NewValue: Boolean);
begin
  M_Zapros_konech_sektora.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Soobsh_o_netochn_sekt_reg: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Soobsh_o_netochn_sekt_reg', 24, TBABoolean));
  Result := TBABoolean(BoldMembers[24]);
end;

function TObjekt_vyborki_otchyotnosti._GetSoobsh_o_netochn_sekt_reg: Boolean;
begin
  Result := M_Soobsh_o_netochn_sekt_reg.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetSoobsh_o_netochn_sekt_reg(const NewValue: Boolean);
begin
  M_Soobsh_o_netochn_sekt_reg.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Prizovoe_kolichestvo_1: TBAInteger;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Prizovoe_kolichestvo_1', 25, TBAInteger));
  Result := TBAInteger(BoldMembers[25]);
end;

function TObjekt_vyborki_otchyotnosti._GetPrizovoe_kolichestvo_1: Integer;
begin
  Result := M_Prizovoe_kolichestvo_1.AsInteger;
end;

procedure TObjekt_vyborki_otchyotnosti._SetPrizovoe_kolichestvo_1(const NewValue: Integer);
begin
  M_Prizovoe_kolichestvo_1.AsInteger := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Prizovoe_kolichestvo_2: TBAInteger;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Prizovoe_kolichestvo_2', 26, TBAInteger));
  Result := TBAInteger(BoldMembers[26]);
end;

function TObjekt_vyborki_otchyotnosti._GetPrizovoe_kolichestvo_2: Integer;
begin
  Result := M_Prizovoe_kolichestvo_2.AsInteger;
end;

procedure TObjekt_vyborki_otchyotnosti._SetPrizovoe_kolichestvo_2(const NewValue: Integer);
begin
  M_Prizovoe_kolichestvo_2.AsInteger := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Prizovoe_kolichestvo_3: TBAInteger;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Prizovoe_kolichestvo_3', 27, TBAInteger));
  Result := TBAInteger(BoldMembers[27]);
end;

function TObjekt_vyborki_otchyotnosti._GetPrizovoe_kolichestvo_3: Integer;
begin
  Result := M_Prizovoe_kolichestvo_3.AsInteger;
end;

procedure TObjekt_vyborki_otchyotnosti._SetPrizovoe_kolichestvo_3(const NewValue: Integer);
begin
  M_Prizovoe_kolichestvo_3.AsInteger := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Koeff_prizov_sbavki_1: TBAFloat;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Koeff_prizov_sbavki_1', 28, TBAFloat));
  Result := TBAFloat(BoldMembers[28]);
end;

function TObjekt_vyborki_otchyotnosti._GetKoeff_prizov_sbavki_1: double;
begin
  Result := M_Koeff_prizov_sbavki_1.AsFloat;
end;

procedure TObjekt_vyborki_otchyotnosti._SetKoeff_prizov_sbavki_1(const NewValue: double);
begin
  M_Koeff_prizov_sbavki_1.AsFloat := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Velichina_priz_sbavki_1: TBAFloat;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Velichina_priz_sbavki_1', 29, TBAFloat));
  Result := TBAFloat(BoldMembers[29]);
end;

function TObjekt_vyborki_otchyotnosti._GetVelichina_priz_sbavki_1: double;
begin
  Result := M_Velichina_priz_sbavki_1.AsFloat;
end;

procedure TObjekt_vyborki_otchyotnosti._SetVelichina_priz_sbavki_1(const NewValue: double);
begin
  M_Velichina_priz_sbavki_1.AsFloat := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Koeff_prizov_sbavki_2: TBAFloat;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Koeff_prizov_sbavki_2', 30, TBAFloat));
  Result := TBAFloat(BoldMembers[30]);
end;

function TObjekt_vyborki_otchyotnosti._GetKoeff_prizov_sbavki_2: double;
begin
  Result := M_Koeff_prizov_sbavki_2.AsFloat;
end;

procedure TObjekt_vyborki_otchyotnosti._SetKoeff_prizov_sbavki_2(const NewValue: double);
begin
  M_Koeff_prizov_sbavki_2.AsFloat := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Velichina_priz_sbavki_2: TBAFloat;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Velichina_priz_sbavki_2', 31, TBAFloat));
  Result := TBAFloat(BoldMembers[31]);
end;

function TObjekt_vyborki_otchyotnosti._GetVelichina_priz_sbavki_2: double;
begin
  Result := M_Velichina_priz_sbavki_2.AsFloat;
end;

procedure TObjekt_vyborki_otchyotnosti._SetVelichina_priz_sbavki_2(const NewValue: double);
begin
  M_Velichina_priz_sbavki_2.AsFloat := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Koeff_prizov_sbavki_3: TBAFloat;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Koeff_prizov_sbavki_3', 32, TBAFloat));
  Result := TBAFloat(BoldMembers[32]);
end;

function TObjekt_vyborki_otchyotnosti._GetKoeff_prizov_sbavki_3: double;
begin
  Result := M_Koeff_prizov_sbavki_3.AsFloat;
end;

procedure TObjekt_vyborki_otchyotnosti._SetKoeff_prizov_sbavki_3(const NewValue: double);
begin
  M_Koeff_prizov_sbavki_3.AsFloat := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Velichina_priz_sbavki_3: TBAFloat;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Velichina_priz_sbavki_3', 33, TBAFloat));
  Result := TBAFloat(BoldMembers[33]);
end;

function TObjekt_vyborki_otchyotnosti._GetVelichina_priz_sbavki_3: double;
begin
  Result := M_Velichina_priz_sbavki_3.AsFloat;
end;

procedure TObjekt_vyborki_otchyotnosti._SetVelichina_priz_sbavki_3(const NewValue: double);
begin
  M_Velichina_priz_sbavki_3.AsFloat := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Ispoljz_priz_1: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Ispoljz_priz_1', 34, TBABoolean));
  Result := TBABoolean(BoldMembers[34]);
end;

function TObjekt_vyborki_otchyotnosti._GetIspoljz_priz_1: Boolean;
begin
  Result := M_Ispoljz_priz_1.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetIspoljz_priz_1(const NewValue: Boolean);
begin
  M_Ispoljz_priz_1.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Ispoljz_priz_2: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Ispoljz_priz_2', 35, TBABoolean));
  Result := TBABoolean(BoldMembers[35]);
end;

function TObjekt_vyborki_otchyotnosti._GetIspoljz_priz_2: Boolean;
begin
  Result := M_Ispoljz_priz_2.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetIspoljz_priz_2(const NewValue: Boolean);
begin
  M_Ispoljz_priz_2.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Ispoljz_priz_3: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Ispoljz_priz_3', 36, TBABoolean));
  Result := TBABoolean(BoldMembers[36]);
end;

function TObjekt_vyborki_otchyotnosti._GetIspoljz_priz_3: Boolean;
begin
  Result := M_Ispoljz_priz_3.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetIspoljz_priz_3(const NewValue: Boolean);
begin
  M_Ispoljz_priz_3.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Regim_dispetchera: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Regim_dispetchera', 37, TBABoolean));
  Result := TBABoolean(BoldMembers[37]);
end;

function TObjekt_vyborki_otchyotnosti._GetRegim_dispetchera: Boolean;
begin
  Result := M_Regim_dispetchera.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetRegim_dispetchera(const NewValue: Boolean);
begin
  M_Regim_dispetchera.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Estj_otpravlennye: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Estj_otpravlennye', 38, TBABoolean));
  Result := TBABoolean(BoldMembers[38]);
end;

function TObjekt_vyborki_otchyotnosti._GetEstj_otpravlennye: Boolean;
begin
  Result := M_Estj_otpravlennye.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetEstj_otpravlennye(const NewValue: Boolean);
begin
  M_Estj_otpravlennye.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Estj_nachatye: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Estj_nachatye', 39, TBABoolean));
  Result := TBABoolean(BoldMembers[39]);
end;

function TObjekt_vyborki_otchyotnosti._GetEstj_nachatye: Boolean;
begin
  Result := M_Estj_nachatye.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetEstj_nachatye(const NewValue: Boolean);
begin
  M_Estj_nachatye.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Ne_uchit_zanyat_drug_disp: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Ne_uchit_zanyat_drug_disp', 40, TBABoolean));
  Result := TBABoolean(BoldMembers[40]);
end;

function TObjekt_vyborki_otchyotnosti._GetNe_uchit_zanyat_drug_disp: Boolean;
begin
  Result := M_Ne_uchit_zanyat_drug_disp.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetNe_uchit_zanyat_drug_disp(const NewValue: Boolean);
begin
  M_Ne_uchit_zanyat_drug_disp.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Kolich_deg_grupp: TBAInteger;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Kolich_deg_grupp', 41, TBAInteger));
  Result := TBAInteger(BoldMembers[41]);
end;

function TObjekt_vyborki_otchyotnosti._GetKolich_deg_grupp: Integer;
begin
  Result := M_Kolich_deg_grupp.AsInteger;
end;

procedure TObjekt_vyborki_otchyotnosti._SetKolich_deg_grupp(const NewValue: Integer);
begin
  M_Kolich_deg_grupp.AsInteger := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Tek_deg_gruppa: TBAInteger;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Tek_deg_gruppa', 42, TBAInteger));
  Result := TBAInteger(BoldMembers[42]);
end;

function TObjekt_vyborki_otchyotnosti._GetTek_deg_gruppa: Integer;
begin
  Result := M_Tek_deg_gruppa.AsInteger;
end;

procedure TObjekt_vyborki_otchyotnosti._SetTek_deg_gruppa(const NewValue: Integer);
begin
  M_Tek_deg_gruppa.AsInteger := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Vr_smeny_deg_grupp: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Vr_smeny_deg_grupp', 43, TBAString));
  Result := TBAString(BoldMembers[43]);
end;

function TObjekt_vyborki_otchyotnosti._GetVr_smeny_deg_grupp: String;
begin
  Result := M_Vr_smeny_deg_grupp.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetVr_smeny_deg_grupp(const NewValue: String);
begin
  M_Vr_smeny_deg_grupp.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Sutki_deg_gruppy: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Sutki_deg_gruppy', 44, TBADateTime));
  Result := TBADateTime(BoldMembers[44]);
end;

function TObjekt_vyborki_otchyotnosti._GetSutki_deg_gruppy: TDateTime;
begin
  Result := M_Sutki_deg_gruppy.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._SetSutki_deg_gruppy(const NewValue: TDateTime);
begin
  M_Sutki_deg_gruppy.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Per_obnovl_deg: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Per_obnovl_deg', 45, TBAString));
  Result := TBAString(BoldMembers[45]);
end;

function TObjekt_vyborki_otchyotnosti._GetPer_obnovl_deg: String;
begin
  Result := M_Per_obnovl_deg.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetPer_obnovl_deg(const NewValue: String);
begin
  M_Per_obnovl_deg.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Per_obnovl_obychn_vod: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Per_obnovl_obychn_vod', 46, TBAString));
  Result := TBAString(BoldMembers[46]);
end;

function TObjekt_vyborki_otchyotnosti._GetPer_obnovl_obychn_vod: String;
begin
  Result := M_Per_obnovl_obychn_vod.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetPer_obnovl_obychn_vod(const NewValue: String);
begin
  M_Per_obnovl_obychn_vod.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Namen_organizacii: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Namen_organizacii', 47, TBAString));
  Result := TBAString(BoldMembers[47]);
end;

function TObjekt_vyborki_otchyotnosti._GetNamen_organizacii: String;
begin
  Result := M_Namen_organizacii.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetNamen_organizacii(const NewValue: String);
begin
  M_Namen_organizacii.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Putev_list_seriya: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Putev_list_seriya', 48, TBAString));
  Result := TBAString(BoldMembers[48]);
end;

function TObjekt_vyborki_otchyotnosti._GetPutev_list_seriya: String;
begin
  Result := M_Putev_list_seriya.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetPutev_list_seriya(const NewValue: String);
begin
  M_Putev_list_seriya.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Nom_putevogo_lista: TBAInteger;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Nom_putevogo_lista', 49, TBAInteger));
  Result := TBAInteger(BoldMembers[49]);
end;

function TObjekt_vyborki_otchyotnosti._GetNom_putevogo_lista: Integer;
begin
  Result := M_Nom_putevogo_lista.AsInteger;
end;

procedure TObjekt_vyborki_otchyotnosti._SetNom_putevogo_lista(const NewValue: Integer);
begin
  M_Nom_putevogo_lista.AsInteger := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Kolich_vyd_benzina: TBAFloat;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Kolich_vyd_benzina', 50, TBAFloat));
  Result := TBAFloat(BoldMembers[50]);
end;

function TObjekt_vyborki_otchyotnosti._GetKolich_vyd_benzina: double;
begin
  Result := M_Kolich_vyd_benzina.AsFloat;
end;

procedure TObjekt_vyborki_otchyotnosti._SetKolich_vyd_benzina(const NewValue: double);
begin
  M_Kolich_vyd_benzina.AsFloat := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Napravlenie_1: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Napravlenie_1', 51, TBAString));
  Result := TBAString(BoldMembers[51]);
end;

function TObjekt_vyborki_otchyotnosti._GetNapravlenie_1: String;
begin
  Result := M_Napravlenie_1.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetNapravlenie_1(const NewValue: String);
begin
  M_Napravlenie_1.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Napravlenie_2: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Napravlenie_2', 52, TBAString));
  Result := TBAString(BoldMembers[52]);
end;

function TObjekt_vyborki_otchyotnosti._GetNapravlenie_2: String;
begin
  Result := M_Napravlenie_2.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetNapravlenie_2(const NewValue: String);
begin
  M_Napravlenie_2.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Napravlenie_3: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Napravlenie_3', 53, TBAString));
  Result := TBAString(BoldMembers[53]);
end;

function TObjekt_vyborki_otchyotnosti._GetNapravlenie_3: String;
begin
  Result := M_Napravlenie_3.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetNapravlenie_3(const NewValue: String);
begin
  M_Napravlenie_3.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_Komment_k_rabote: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'Komment_k_rabote', 54, TBAString));
  Result := TBAString(BoldMembers[54]);
end;

function TObjekt_vyborki_otchyotnosti._GetKomment_k_rabote: String;
begin
  Result := M_Komment_k_rabote.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetKomment_k_rabote(const NewValue: String);
begin
  M_Komment_k_rabote.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_BetweenStartSet: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'BetweenStartSet', 55, TBADateTime));
  Result := TBADateTime(BoldMembers[55]);
end;

function TObjekt_vyborki_otchyotnosti._GetBetweenStartSet: TDateTime;
begin
  Result := M_BetweenStartSet.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._SetBetweenStartSet(const NewValue: TDateTime);
begin
  M_BetweenStartSet.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_BetweenSetOn: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'BetweenSetOn', 56, TBADateTime));
  Result := TBADateTime(BoldMembers[56]);
end;

function TObjekt_vyborki_otchyotnosti._GetBetweenSetOn: TDateTime;
begin
  Result := M_BetweenSetOn.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._SetBetweenSetOn(const NewValue: TDateTime);
begin
  M_BetweenSetOn.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_BetweenOnEnd: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'BetweenOnEnd', 57, TBADateTime));
  Result := TBADateTime(BoldMembers[57]);
end;

function TObjekt_vyborki_otchyotnosti._GetBetweenOnEnd: TDateTime;
begin
  Result := M_BetweenOnEnd.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._SetBetweenOnEnd(const NewValue: TDateTime);
begin
  M_BetweenOnEnd.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_BetweenStartSetColor: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'BetweenStartSetColor', 58, TBAString));
  Result := TBAString(BoldMembers[58]);
end;

function TObjekt_vyborki_otchyotnosti._GetBetweenStartSetColor: String;
begin
  Result := M_BetweenStartSetColor.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetBetweenStartSetColor(const NewValue: String);
begin
  M_BetweenStartSetColor.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_BetweenSetOnColor: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'BetweenSetOnColor', 59, TBAString));
  Result := TBAString(BoldMembers[59]);
end;

function TObjekt_vyborki_otchyotnosti._GetBetweenSetOnColor: String;
begin
  Result := M_BetweenSetOnColor.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetBetweenSetOnColor(const NewValue: String);
begin
  M_BetweenSetOnColor.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_BetweenOnEndColor: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'BetweenOnEndColor', 60, TBAString));
  Result := TBAString(BoldMembers[60]);
end;

function TObjekt_vyborki_otchyotnosti._GetBetweenOnEndColor: String;
begin
  Result := M_BetweenOnEndColor.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetBetweenOnEndColor(const NewValue: String);
begin
  M_BetweenOnEndColor.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_BetweenSetEnd: TBADateTime;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'BetweenSetEnd', 61, TBADateTime));
  Result := TBADateTime(BoldMembers[61]);
end;

function TObjekt_vyborki_otchyotnosti._GetBetweenSetEnd: TDateTime;
begin
  Result := M_BetweenSetEnd.AsDateTime;
end;

procedure TObjekt_vyborki_otchyotnosti._SetBetweenSetEnd(const NewValue: TDateTime);
begin
  M_BetweenSetEnd.AsDateTime := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_BetweenSetEndColor: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'BetweenSetEndColor', 62, TBAString));
  Result := TBAString(BoldMembers[62]);
end;

function TObjekt_vyborki_otchyotnosti._GetBetweenSetEndColor: String;
begin
  Result := M_BetweenSetEndColor.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._SetBetweenSetEndColor(const NewValue: String);
begin
  M_BetweenSetEndColor.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_ViewSetEndLong: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'ViewSetEndLong', 63, TBABoolean));
  Result := TBABoolean(BoldMembers[63]);
end;

function TObjekt_vyborki_otchyotnosti._GetViewSetEndLong: Boolean;
begin
  Result := M_ViewSetEndLong.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._SetViewSetEndLong(const NewValue: Boolean);
begin
  M_ViewSetEndLong.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_obshepriz_chislo: TBAInteger;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'obshepriz_chislo', 64, TBAInteger));
  Result := TBAInteger(BoldMembers[64]);
end;

function TObjekt_vyborki_otchyotnosti._Getobshepriz_chislo: Integer;
begin
  Result := M_obshepriz_chislo.AsInteger;
end;

procedure TObjekt_vyborki_otchyotnosti._Setobshepriz_chislo(const NewValue: Integer);
begin
  M_obshepriz_chislo.AsInteger := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_obshepriz_schyotchik: TBAInteger;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'obshepriz_schyotchik', 65, TBAInteger));
  Result := TBAInteger(BoldMembers[65]);
end;

function TObjekt_vyborki_otchyotnosti._Getobshepriz_schyotchik: Integer;
begin
  Result := M_obshepriz_schyotchik.AsInteger;
end;

procedure TObjekt_vyborki_otchyotnosti._Setobshepriz_schyotchik(const NewValue: Integer);
begin
  M_obshepriz_schyotchik.AsInteger := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_cvet_obshepriz: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'cvet_obshepriz', 66, TBAString));
  Result := TBAString(BoldMembers[66]);
end;

function TObjekt_vyborki_otchyotnosti._Getcvet_obshepriz: String;
begin
  Result := M_cvet_obshepriz.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._Setcvet_obshepriz(const NewValue: String);
begin
  M_cvet_obshepriz.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_cvet_so_skidkoi: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'cvet_so_skidkoi', 67, TBAString));
  Result := TBAString(BoldMembers[67]);
end;

function TObjekt_vyborki_otchyotnosti._Getcvet_so_skidkoi: String;
begin
  Result := M_cvet_so_skidkoi.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._Setcvet_so_skidkoi(const NewValue: String);
begin
  M_cvet_so_skidkoi.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_simv_avtom_ustan: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'simv_avtom_ustan', 68, TBABoolean));
  Result := TBABoolean(BoldMembers[68]);
end;

function TObjekt_vyborki_otchyotnosti._Getsimv_avtom_ustan: Boolean;
begin
  Result := M_simv_avtom_ustan.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._Setsimv_avtom_ustan(const NewValue: Boolean);
begin
  M_simv_avtom_ustan.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_schit_okon_posl_kon_sekt: TBABoolean;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'schit_okon_posl_kon_sekt', 69, TBABoolean));
  Result := TBABoolean(BoldMembers[69]);
end;

function TObjekt_vyborki_otchyotnosti._Getschit_okon_posl_kon_sekt: Boolean;
begin
  Result := M_schit_okon_posl_kon_sekt.AsBoolean;
end;

procedure TObjekt_vyborki_otchyotnosti._Setschit_okon_posl_kon_sekt(const NewValue: Boolean);
begin
  M_schit_okon_posl_kon_sekt.AsBoolean := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Get_M_vr_smeny_dispetcherov: TBAString;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'vr_smeny_dispetcherov', 70, TBAString));
  Result := TBAString(BoldMembers[70]);
end;

function TObjekt_vyborki_otchyotnosti._Getvr_smeny_dispetcherov: String;
begin
  Result := M_vr_smeny_dispetcherov.AsString;
end;

procedure TObjekt_vyborki_otchyotnosti._Setvr_smeny_dispetcherov(const NewValue: String);
begin
  M_vr_smeny_dispetcherov.AsString := NewValue;
end;

function TObjekt_vyborki_otchyotnosti._Getuchityvaet_voditelya: TVoditeljList;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'uchityvaet_voditelya', 71, TVoditeljList));
  Result := TVoditeljList(BoldMembers[71]);
end;

function TObjekt_vyborki_otchyotnosti._Getuchityvet_rabotu: TPersonalList;
begin
  assert(ValidateMember('TObjekt_vyborki_otchyotnosti', 'uchityvet_rabotu', 72, TPersonalList));
  Result := TPersonalList(BoldMembers[72]);
end;

procedure TObjekt_vyborki_otchyotnostiList.Add(NewObject: TObjekt_vyborki_otchyotnosti);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TObjekt_vyborki_otchyotnostiList.IndexOf(anObject: TObjekt_vyborki_otchyotnosti): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TObjekt_vyborki_otchyotnostiList.Includes(anObject: TObjekt_vyborki_otchyotnosti) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TObjekt_vyborki_otchyotnostiList.AddNew: TObjekt_vyborki_otchyotnosti;
begin
  result := TObjekt_vyborki_otchyotnosti(InternalAddNew);
end;

procedure TObjekt_vyborki_otchyotnostiList.Insert(index: Integer; NewObject: TObjekt_vyborki_otchyotnosti);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TObjekt_vyborki_otchyotnostiList.GetBoldObject(index: Integer): TObjekt_vyborki_otchyotnosti;
begin
  result := TObjekt_vyborki_otchyotnosti(GetElement(index));
end;

procedure TObjekt_vyborki_otchyotnostiList.SetBoldObject(index: Integer; NewObject: TObjekt_vyborki_otchyotnosti);
begin;
  SetElement(index, NewObject);
end;

{ TOperaciya }

function TOperaciya._Get_M_Debet: TBAString;
begin
  assert(ValidateMember('TOperaciya', 'Debet', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TOperaciya._GetDebet: String;
begin
  Result := M_Debet.AsString;
end;

procedure TOperaciya._SetDebet(const NewValue: String);
begin
  M_Debet.AsString := NewValue;
end;

function TOperaciya._Get_M_Kredit: TBAString;
begin
  assert(ValidateMember('TOperaciya', 'Kredit', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TOperaciya._GetKredit: String;
begin
  Result := M_Kredit.AsString;
end;

procedure TOperaciya._SetKredit(const NewValue: String);
begin
  M_Kredit.AsString := NewValue;
end;

function TOperaciya._Get_M_Osnovanie: TBAString;
begin
  assert(ValidateMember('TOperaciya', 'Osnovanie', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TOperaciya._GetOsnovanie: String;
begin
  Result := M_Osnovanie.AsString;
end;

procedure TOperaciya._SetOsnovanie(const NewValue: String);
begin
  M_Osnovanie.AsString := NewValue;
end;

function TOperaciya._Get_M_Statjya: TBAString;
begin
  assert(ValidateMember('TOperaciya', 'Statjya', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TOperaciya._GetStatjya: String;
begin
  Result := M_Statjya.AsString;
end;

procedure TOperaciya._SetStatjya(const NewValue: String);
begin
  M_Statjya.AsString := NewValue;
end;

function TOperaciya._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TOperaciya', 'Kommentarii', 4, TBAString));
  Result := TBAString(BoldMembers[4]);
end;

function TOperaciya._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TOperaciya._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TOperaciya._Get_M_Summa_operacii: TBAFloat;
begin
  assert(ValidateMember('TOperaciya', 'Summa_operacii', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TOperaciya._GetSumma_operacii: double;
begin
  Result := M_Summa_operacii.AsFloat;
end;

procedure TOperaciya._SetSumma_operacii(const NewValue: double);
begin
  M_Summa_operacii.AsFloat := NewValue;
end;

function TOperaciya._Get_M_Data: TBADateTime;
begin
  assert(ValidateMember('TOperaciya', 'Data', 6, TBADateTime));
  Result := TBADateTime(BoldMembers[6]);
end;

function TOperaciya._GetData: TDateTime;
begin
  Result := M_Data.AsDateTime;
end;

procedure TOperaciya._SetData(const NewValue: TDateTime);
begin
  M_Data.AsDateTime := NewValue;
end;

function TOperaciya._Getimeet_chastn_prihody: TPrihodList;
begin
  assert(ValidateMember('TOperaciya', 'imeet_chastn_prihody', 7, TPrihodList));
  Result := TPrihodList(BoldMembers[7]);
end;

function TOperaciya._Getopisyvaet_rash: TRashodList;
begin
  assert(ValidateMember('TOperaciya', 'opisyvaet_rash', 8, TRashodList));
  Result := TRashodList(BoldMembers[8]);
end;

procedure TOperaciyaList.Add(NewObject: TOperaciya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOperaciyaList.IndexOf(anObject: TOperaciya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOperaciyaList.Includes(anObject: TOperaciya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOperaciyaList.AddNew: TOperaciya;
begin
  result := TOperaciya(InternalAddNew);
end;

procedure TOperaciyaList.Insert(index: Integer; NewObject: TOperaciya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOperaciyaList.GetBoldObject(index: Integer): TOperaciya;
begin
  result := TOperaciya(GetElement(index));
end;

procedure TOperaciyaList.SetBoldObject(index: Integer; NewObject: TOperaciya);
begin;
  SetElement(index, NewObject);
end;

{ TPersona }

function TPersona._Get_M_Familiya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Familiya', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPersona._GetFamiliya: String;
begin
  Result := M_Familiya.AsString;
end;

procedure TPersona._SetFamiliya(const NewValue: String);
begin
  M_Familiya.AsString := NewValue;
end;

function TPersona._Get_M_Imya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Imya', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TPersona._GetImya: String;
begin
  Result := M_Imya.AsString;
end;

procedure TPersona._SetImya(const NewValue: String);
begin
  M_Imya.AsString := NewValue;
end;

function TPersona._Get_M_Otchestvo: TBAString;
begin
  assert(ValidateMember('TPersona', 'Otchestvo', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TPersona._GetOtchestvo: String;
begin
  Result := M_Otchestvo.AsString;
end;

procedure TPersona._SetOtchestvo(const NewValue: String);
begin
  M_Otchestvo.AsString := NewValue;
end;

function TPersona._Get_M_Ulica: TBAString;
begin
  assert(ValidateMember('TPersona', 'Ulica', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TPersona._GetUlica: String;
begin
  Result := M_Ulica.AsString;
end;

procedure TPersona._SetUlica(const NewValue: String);
begin
  M_Ulica.AsString := NewValue;
end;

function TPersona._Get_M_Dom: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Dom', 4, TBAInteger));
  Result := TBAInteger(BoldMembers[4]);
end;

function TPersona._GetDom: Integer;
begin
  Result := M_Dom.AsInteger;
end;

procedure TPersona._SetDom(const NewValue: Integer);
begin
  M_Dom.AsInteger := NewValue;
end;

function TPersona._Get_M_Kvartira: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Kvartira', 5, TBAInteger));
  Result := TBAInteger(BoldMembers[5]);
end;

function TPersona._GetKvartira: Integer;
begin
  Result := M_Kvartira.AsInteger;
end;

procedure TPersona._SetKvartira(const NewValue: Integer);
begin
  M_Kvartira.AsInteger := NewValue;
end;

function TPersona._Get_M_Korpus: TBAInteger;
begin
  assert(ValidateMember('TPersona', 'Korpus', 6, TBAInteger));
  Result := TBAInteger(BoldMembers[6]);
end;

function TPersona._GetKorpus: Integer;
begin
  Result := M_Korpus.AsInteger;
end;

procedure TPersona._SetKorpus(const NewValue: Integer);
begin
  M_Korpus.AsInteger := NewValue;
end;

function TPersona._Get_M_Mobiljnyi_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Mobiljnyi_telefon', 7, TBAString));
  Result := TBAString(BoldMembers[7]);
end;

function TPersona._GetMobiljnyi_telefon: String;
begin
  Result := M_Mobiljnyi_telefon.AsString;
end;

procedure TPersona._SetMobiljnyi_telefon(const NewValue: String);
begin
  M_Mobiljnyi_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Rabochii_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Rabochii_telefon', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TPersona._GetRabochii_telefon: String;
begin
  Result := M_Rabochii_telefon.AsString;
end;

procedure TPersona._SetRabochii_telefon(const NewValue: String);
begin
  M_Rabochii_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Domashnii_telefon: TBAString;
begin
  assert(ValidateMember('TPersona', 'Domashnii_telefon', 9, TBAString));
  Result := TBAString(BoldMembers[9]);
end;

function TPersona._GetDomashnii_telefon: String;
begin
  Result := M_Domashnii_telefon.AsString;
end;

procedure TPersona._SetDomashnii_telefon(const NewValue: String);
begin
  M_Domashnii_telefon.AsString := NewValue;
end;

function TPersona._Get_M_Elektronnyi_adres: TBAString;
begin
  assert(ValidateMember('TPersona', 'Elektronnyi_adres', 10, TBAString));
  Result := TBAString(BoldMembers[10]);
end;

function TPersona._GetElektronnyi_adres: String;
begin
  Result := M_Elektronnyi_adres.AsString;
end;

procedure TPersona._SetElektronnyi_adres(const NewValue: String);
begin
  M_Elektronnyi_adres.AsString := NewValue;
end;

function TPersona._Get_M_Polnoe_imya: TBAString;
begin
  assert(ValidateMember('TPersona', 'Polnoe_imya', 11, TBAString));
  Result := TBAString(BoldMembers[11]);
end;

function TPersona._GetPolnoe_imya: String;
begin
  Result := M_Polnoe_imya.AsString;
end;

procedure TPersonaList.Add(NewObject: TPersona);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonaList.IndexOf(anObject: TPersona): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonaList.Includes(anObject: TPersona) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonaList.AddNew: TPersona;
begin
  result := TPersona(InternalAddNew);
end;

procedure TPersonaList.Insert(index: Integer; NewObject: TPersona);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonaList.GetBoldObject(index: Integer): TPersona;
begin
  result := TPersona(GetElement(index));
end;

procedure TPersonaList.SetBoldObject(index: Integer; NewObject: TPersona);
begin;
  SetElement(index, NewObject);
end;

{ TPlohie_klienty }

function TPlohie_klienty._Get_M_Telefon_klienta: TBAString;
begin
  assert(ValidateMember('TPlohie_klienty', 'Telefon_klienta', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TPlohie_klienty._GetTelefon_klienta: String;
begin
  Result := M_Telefon_klienta.AsString;
end;

procedure TPlohie_klienty._SetTelefon_klienta(const NewValue: String);
begin
  M_Telefon_klienta.AsString := NewValue;
end;

function TPlohie_klienty._Get_M_Pozyvnoi: TBAInteger;
begin
  assert(ValidateMember('TPlohie_klienty', 'Pozyvnoi', 1, TBAInteger));
  Result := TBAInteger(BoldMembers[1]);
end;

function TPlohie_klienty._GetPozyvnoi: Integer;
begin
  Result := M_Pozyvnoi.AsInteger;
end;

procedure TPlohie_klienty._SetPozyvnoi(const NewValue: Integer);
begin
  M_Pozyvnoi.AsInteger := NewValue;
end;

function TPlohie_klienty._Get_M_Nachalo: TBAString;
begin
  assert(ValidateMember('TPlohie_klienty', 'Nachalo', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TPlohie_klienty._GetNachalo: String;
begin
  Result := M_Nachalo.AsString;
end;

procedure TPlohie_klienty._SetNachalo(const NewValue: String);
begin
  M_Nachalo.AsString := NewValue;
end;

function TPlohie_klienty._Get_M_Adres_vyzova_vvodim: TBAString;
begin
  assert(ValidateMember('TPlohie_klienty', 'Adres_vyzova_vvodim', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TPlohie_klienty._GetAdres_vyzova_vvodim: String;
begin
  Result := M_Adres_vyzova_vvodim.AsString;
end;

procedure TPlohie_klienty._SetAdres_vyzova_vvodim(const NewValue: String);
begin
  M_Adres_vyzova_vvodim.AsString := NewValue;
end;

procedure TPlohie_klientyList.Add(NewObject: TPlohie_klienty);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPlohie_klientyList.IndexOf(anObject: TPlohie_klienty): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPlohie_klientyList.Includes(anObject: TPlohie_klienty) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPlohie_klientyList.AddNew: TPlohie_klienty;
begin
  result := TPlohie_klienty(InternalAddNew);
end;

procedure TPlohie_klientyList.Insert(index: Integer; NewObject: TPlohie_klienty);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPlohie_klientyList.GetBoldObject(index: Integer): TPlohie_klienty;
begin
  result := TPlohie_klienty(GetElement(index));
end;

procedure TPlohie_klientyList.SetBoldObject(index: Integer; NewObject: TPlohie_klienty);
begin;
  SetElement(index, NewObject);
end;

{ TPrihod }

function TPrihod._Get_M_Summa_pozicii: TBAFloat;
begin
  assert(ValidateMember('TPrihod', 'Summa_pozicii', 0, TBAFloat));
  Result := TBAFloat(BoldMembers[0]);
end;

function TPrihod._GetSumma_pozicii: double;
begin
  Result := M_Summa_pozicii.AsFloat;
end;

procedure TPrihod._SetSumma_pozicii(const NewValue: double);
begin
  M_Summa_pozicii.AsFloat := NewValue;
end;

function TPrihod._Get_M_Data_prihoda: TBADateTime;
begin
  assert(ValidateMember('TPrihod', 'Data_prihoda', 1, TBADateTime));
  Result := TBADateTime(BoldMembers[1]);
end;

function TPrihod._GetData_prihoda: TDateTime;
begin
  Result := M_Data_prihoda.AsDateTime;
end;

procedure TPrihod._SetData_prihoda(const NewValue: TDateTime);
begin
  M_Data_prihoda.AsDateTime := NewValue;
end;

function TPrihod._Get_M_Opisanie: TBAString;
begin
  assert(ValidateMember('TPrihod', 'Opisanie', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TPrihod._GetOpisanie: String;
begin
  Result := M_Opisanie.AsString;
end;

procedure TPrihod._SetOpisanie(const NewValue: String);
begin
  M_Opisanie.AsString := NewValue;
end;

function TPrihod._Get_M_sostavlyaet_prihod: TBoldObjectReference;
begin
  assert(ValidateMember('TPrihod', 'sostavlyaet_prihod', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TPrihod._Getsostavlyaet_prihod: TBalans;
begin
  assert(not assigned(M_sostavlyaet_prihod.BoldObject) or (M_sostavlyaet_prihod.BoldObject is TBalans), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'sostavlyaet_prihod', M_sostavlyaet_prihod.BoldObject.ClassName, 'TBalans']));
  Result := TBalans(M_sostavlyaet_prihod.BoldObject);
end;

procedure TPrihod._Setsostavlyaet_prihod(const value: TBalans);
begin
  M_sostavlyaet_prihod.BoldObject := value;
end;

function TPrihod._Get_M_otnos_k_operac_prih: TBoldObjectReference;
begin
  assert(ValidateMember('TPrihod', 'otnos_k_operac_prih', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TPrihod._Getotnos_k_operac_prih: TOperaciya;
begin
  assert(not assigned(M_otnos_k_operac_prih.BoldObject) or (M_otnos_k_operac_prih.BoldObject is TOperaciya), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnos_k_operac_prih', M_otnos_k_operac_prih.BoldObject.ClassName, 'TOperaciya']));
  Result := TOperaciya(M_otnos_k_operac_prih.BoldObject);
end;

procedure TPrihod._Setotnos_k_operac_prih(const value: TOperaciya);
begin
  M_otnos_k_operac_prih.BoldObject := value;
end;

procedure TPrihodList.Add(NewObject: TPrihod);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPrihodList.IndexOf(anObject: TPrihod): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPrihodList.Includes(anObject: TPrihod) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPrihodList.AddNew: TPrihod;
begin
  result := TPrihod(InternalAddNew);
end;

procedure TPrihodList.Insert(index: Integer; NewObject: TPrihod);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPrihodList.GetBoldObject(index: Integer): TPrihod;
begin
  result := TPrihod(GetElement(index));
end;

procedure TPrihodList.SetBoldObject(index: Integer; NewObject: TPrihod);
begin;
  SetElement(index, NewObject);
end;

{ TRashod }

function TRashod._Get_M_Summa_pozicii: TBAFloat;
begin
  assert(ValidateMember('TRashod', 'Summa_pozicii', 0, TBAFloat));
  Result := TBAFloat(BoldMembers[0]);
end;

function TRashod._GetSumma_pozicii: double;
begin
  Result := M_Summa_pozicii.AsFloat;
end;

procedure TRashod._SetSumma_pozicii(const NewValue: double);
begin
  M_Summa_pozicii.AsFloat := NewValue;
end;

function TRashod._Get_M_Data_rashoda: TBADateTime;
begin
  assert(ValidateMember('TRashod', 'Data_rashoda', 1, TBADateTime));
  Result := TBADateTime(BoldMembers[1]);
end;

function TRashod._GetData_rashoda: TDateTime;
begin
  Result := M_Data_rashoda.AsDateTime;
end;

procedure TRashod._SetData_rashoda(const NewValue: TDateTime);
begin
  M_Data_rashoda.AsDateTime := NewValue;
end;

function TRashod._Get_M_Opisanie: TBAString;
begin
  assert(ValidateMember('TRashod', 'Opisanie', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TRashod._GetOpisanie: String;
begin
  Result := M_Opisanie.AsString;
end;

procedure TRashod._SetOpisanie(const NewValue: String);
begin
  M_Opisanie.AsString := NewValue;
end;

function TRashod._Get_M_sostavlyaet_rashod: TBoldObjectReference;
begin
  assert(ValidateMember('TRashod', 'sostavlyaet_rashod', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TRashod._Getsostavlyaet_rashod: TBalans;
begin
  assert(not assigned(M_sostavlyaet_rashod.BoldObject) or (M_sostavlyaet_rashod.BoldObject is TBalans), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'sostavlyaet_rashod', M_sostavlyaet_rashod.BoldObject.ClassName, 'TBalans']));
  Result := TBalans(M_sostavlyaet_rashod.BoldObject);
end;

procedure TRashod._Setsostavlyaet_rashod(const value: TBalans);
begin
  M_sostavlyaet_rashod.BoldObject := value;
end;

function TRashod._Get_M_otnos_k_operacii_rash: TBoldObjectReference;
begin
  assert(ValidateMember('TRashod', 'otnos_k_operacii_rash', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TRashod._Getotnos_k_operacii_rash: TOperaciya;
begin
  assert(not assigned(M_otnos_k_operacii_rash.BoldObject) or (M_otnos_k_operacii_rash.BoldObject is TOperaciya), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnos_k_operacii_rash', M_otnos_k_operacii_rash.BoldObject.ClassName, 'TOperaciya']));
  Result := TOperaciya(M_otnos_k_operacii_rash.BoldObject);
end;

procedure TRashod._Setotnos_k_operacii_rash(const value: TOperaciya);
begin
  M_otnos_k_operacii_rash.BoldObject := value;
end;

procedure TRashodList.Add(NewObject: TRashod);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRashodList.IndexOf(anObject: TRashod): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRashodList.Includes(anObject: TRashod) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRashodList.AddNew: TRashod;
begin
  result := TRashod(InternalAddNew);
end;

procedure TRashodList.Insert(index: Integer; NewObject: TRashod);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRashodList.GetBoldObject(index: Integer): TRashod;
begin
  result := TRashod(GetElement(index));
end;

procedure TRashodList.SetBoldObject(index: Integer; NewObject: TRashod);
begin;
  SetElement(index, NewObject);
end;

{ TSootvetstvie_parametrov_zakaza }

function TSootvetstvie_parametrov_zakaza._Get_M_Nomer_sektora: TBAInteger;
begin
  assert(ValidateMember('TSootvetstvie_parametrov_zakaza', 'Nomer_sektora', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TSootvetstvie_parametrov_zakaza._GetNomer_sektora: Integer;
begin
  Result := M_Nomer_sektora.AsInteger;
end;

function TSootvetstvie_parametrov_zakaza._Get_M_Telefon_klienta: TBAString;
begin
  assert(ValidateMember('TSootvetstvie_parametrov_zakaza', 'Telefon_klienta', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TSootvetstvie_parametrov_zakaza._GetTelefon_klienta: String;
begin
  Result := M_Telefon_klienta.AsString;
end;

procedure TSootvetstvie_parametrov_zakaza._SetTelefon_klienta(const NewValue: String);
begin
  M_Telefon_klienta.AsString := NewValue;
end;

function TSootvetstvie_parametrov_zakaza._Get_M_Adres_vyzova_vvodim: TBAString;
begin
  assert(ValidateMember('TSootvetstvie_parametrov_zakaza', 'Adres_vyzova_vvodim', 2, TBAString));
  Result := TBAString(BoldMembers[2]);
end;

function TSootvetstvie_parametrov_zakaza._GetAdres_vyzova_vvodim: String;
begin
  Result := M_Adres_vyzova_vvodim.AsString;
end;

procedure TSootvetstvie_parametrov_zakaza._SetAdres_vyzova_vvodim(const NewValue: String);
begin
  M_Adres_vyzova_vvodim.AsString := NewValue;
end;

function TSootvetstvie_parametrov_zakaza._Get_M_Summarn_chislo_vyzovov: TBAInteger;
begin
  assert(ValidateMember('TSootvetstvie_parametrov_zakaza', 'Summarn_chislo_vyzovov', 3, TBAInteger));
  Result := TBAInteger(BoldMembers[3]);
end;

function TSootvetstvie_parametrov_zakaza._GetSummarn_chislo_vyzovov: Integer;
begin
  Result := M_Summarn_chislo_vyzovov.AsInteger;
end;

procedure TSootvetstvie_parametrov_zakaza._SetSummarn_chislo_vyzovov(const NewValue: Integer);
begin
  M_Summarn_chislo_vyzovov.AsInteger := NewValue;
end;

function TSootvetstvie_parametrov_zakaza._Get_M_otnositsya_k_sektoru: TBoldObjectReference;
begin
  assert(ValidateMember('TSootvetstvie_parametrov_zakaza', 'otnositsya_k_sektoru', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TSootvetstvie_parametrov_zakaza._Getotnositsya_k_sektoru: TSektor_raboty;
begin
  assert(not assigned(M_otnositsya_k_sektoru.BoldObject) or (M_otnositsya_k_sektoru.BoldObject is TSektor_raboty), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_k_sektoru', M_otnositsya_k_sektoru.BoldObject.ClassName, 'TSektor_raboty']));
  Result := TSektor_raboty(M_otnositsya_k_sektoru.BoldObject);
end;

procedure TSootvetstvie_parametrov_zakaza._Setotnositsya_k_sektoru(const value: TSektor_raboty);
begin
  M_otnositsya_k_sektoru.BoldObject := value;
end;

procedure TSootvetstvie_parametrov_zakazaList.Add(NewObject: TSootvetstvie_parametrov_zakaza);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSootvetstvie_parametrov_zakazaList.IndexOf(anObject: TSootvetstvie_parametrov_zakaza): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSootvetstvie_parametrov_zakazaList.Includes(anObject: TSootvetstvie_parametrov_zakaza) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSootvetstvie_parametrov_zakazaList.AddNew: TSootvetstvie_parametrov_zakaza;
begin
  result := TSootvetstvie_parametrov_zakaza(InternalAddNew);
end;

procedure TSootvetstvie_parametrov_zakazaList.Insert(index: Integer; NewObject: TSootvetstvie_parametrov_zakaza);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSootvetstvie_parametrov_zakazaList.GetBoldObject(index: Integer): TSootvetstvie_parametrov_zakaza;
begin
  result := TSootvetstvie_parametrov_zakaza(GetElement(index));
end;

procedure TSootvetstvie_parametrov_zakazaList.SetBoldObject(index: Integer; NewObject: TSootvetstvie_parametrov_zakaza);
begin;
  SetElement(index, NewObject);
end;

{ TSpravochnik }

function TSpravochnik._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TSpravochnik', 'Naimenovanie', 0, TBAString));
  Result := TBAString(BoldMembers[0]);
end;

function TSpravochnik._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TSpravochnik._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TSpravochnik._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TSpravochnik', 'Kommentarii', 1, TBAString));
  Result := TBAString(BoldMembers[1]);
end;

function TSpravochnik._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TSpravochnik._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TSpravochnik._Get_M_Identifikator: TBAInteger;
begin
  assert(ValidateMember('TSpravochnik', 'Identifikator', 2, TBAInteger));
  Result := TBAInteger(BoldMembers[2]);
end;

function TSpravochnik._GetIdentifikator: Integer;
begin
  Result := M_Identifikator.AsInteger;
end;

procedure TSpravochnik._SetIdentifikator(const NewValue: Integer);
begin
  M_Identifikator.AsInteger := NewValue;
end;

procedure TSpravochnikList.Add(NewObject: TSpravochnik);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSpravochnikList.IndexOf(anObject: TSpravochnik): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSpravochnikList.Includes(anObject: TSpravochnik) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSpravochnikList.AddNew: TSpravochnik;
begin
  result := TSpravochnik(InternalAddNew);
end;

procedure TSpravochnikList.Insert(index: Integer; NewObject: TSpravochnik);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSpravochnikList.GetBoldObject(index: Integer): TSpravochnik;
begin
  result := TSpravochnik(GetElement(index));
end;

procedure TSpravochnikList.SetBoldObject(index: Integer; NewObject: TSpravochnik);
begin;
  SetElement(index, NewObject);
end;

{ TSpravochnik_grupp_vypuskov }

procedure TSpravochnik_grupp_vypuskovList.Add(NewObject: TSpravochnik_grupp_vypuskov);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSpravochnik_grupp_vypuskovList.IndexOf(anObject: TSpravochnik_grupp_vypuskov): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSpravochnik_grupp_vypuskovList.Includes(anObject: TSpravochnik_grupp_vypuskov) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSpravochnik_grupp_vypuskovList.AddNew: TSpravochnik_grupp_vypuskov;
begin
  result := TSpravochnik_grupp_vypuskov(InternalAddNew);
end;

procedure TSpravochnik_grupp_vypuskovList.Insert(index: Integer; NewObject: TSpravochnik_grupp_vypuskov);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSpravochnik_grupp_vypuskovList.GetBoldObject(index: Integer): TSpravochnik_grupp_vypuskov;
begin
  result := TSpravochnik_grupp_vypuskov(GetElement(index));
end;

procedure TSpravochnik_grupp_vypuskovList.SetBoldObject(index: Integer; NewObject: TSpravochnik_grupp_vypuskov);
begin;
  SetElement(index, NewObject);
end;

{ TShablon_zakaza }

function TShablon_zakaza._Get_M_Nomer_na_ulice: TBAInteger;
begin
  assert(ValidateMember('TShablon_zakaza', 'Nomer_na_ulice', 0, TBAInteger));
  Result := TBAInteger(BoldMembers[0]);
end;

function TShablon_zakaza._GetNomer_na_ulice: Integer;
begin
  Result := M_Nomer_na_ulice.AsInteger;
end;

procedure TShablon_zakaza._SetNomer_na_ulice(const NewValue: Integer);
begin
  M_Nomer_na_ulice.AsInteger := NewValue;
end;

function TShablon_zakaza._Get_M_yavlyaetsya_vyzovom_na_ulicu: TBoldObjectReference;
begin
  assert(ValidateMember('TShablon_zakaza', 'yavlyaetsya_vyzovom_na_ulicu', 1, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[1]);
end;

function TShablon_zakaza._Getyavlyaetsya_vyzovom_na_ulicu: TUlica;
begin
  assert(not assigned(M_yavlyaetsya_vyzovom_na_ulicu.BoldObject) or (M_yavlyaetsya_vyzovom_na_ulicu.BoldObject is TUlica), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavlyaetsya_vyzovom_na_ulicu', M_yavlyaetsya_vyzovom_na_ulicu.BoldObject.ClassName, 'TUlica']));
  Result := TUlica(M_yavlyaetsya_vyzovom_na_ulicu.BoldObject);
end;

procedure TShablon_zakaza._Setyavlyaetsya_vyzovom_na_ulicu(const value: TUlica);
begin
  M_yavlyaetsya_vyzovom_na_ulicu.BoldObject := value;
end;

function TShablon_zakaza._Get_M_yavl_vyzovom_na_raion: TBoldObjectReference;
begin
  assert(ValidateMember('TShablon_zakaza', 'yavl_vyzovom_na_raion', 2, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[2]);
end;

function TShablon_zakaza._Getyavl_vyzovom_na_raion: TRaion;
begin
  assert(not assigned(M_yavl_vyzovom_na_raion.BoldObject) or (M_yavl_vyzovom_na_raion.BoldObject is TRaion), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavl_vyzovom_na_raion', M_yavl_vyzovom_na_raion.BoldObject.ClassName, 'TRaion']));
  Result := TRaion(M_yavl_vyzovom_na_raion.BoldObject);
end;

procedure TShablon_zakaza._Setyavl_vyzovom_na_raion(const value: TRaion);
begin
  M_yavl_vyzovom_na_raion.BoldObject := value;
end;

function TShablon_zakaza._Get_M_yavl_vyzovom_na_objekt: TBoldObjectReference;
begin
  assert(ValidateMember('TShablon_zakaza', 'yavl_vyzovom_na_objekt', 3, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[3]);
end;

function TShablon_zakaza._Getyavl_vyzovom_na_objekt: TObjekt;
begin
  assert(not assigned(M_yavl_vyzovom_na_objekt.BoldObject) or (M_yavl_vyzovom_na_objekt.BoldObject is TObjekt), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'yavl_vyzovom_na_objekt', M_yavl_vyzovom_na_objekt.BoldObject.ClassName, 'TObjekt']));
  Result := TObjekt(M_yavl_vyzovom_na_objekt.BoldObject);
end;

procedure TShablon_zakaza._Setyavl_vyzovom_na_objekt(const value: TObjekt);
begin
  M_yavl_vyzovom_na_objekt.BoldObject := value;
end;

function TShablon_zakaza._Get_M_imeet_pervuyu_ulicu_ugla: TBoldObjectReference;
begin
  assert(ValidateMember('TShablon_zakaza', 'imeet_pervuyu_ulicu_ugla', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TShablon_zakaza._Getimeet_pervuyu_ulicu_ugla: TUlica;
begin
  assert(not assigned(M_imeet_pervuyu_ulicu_ugla.BoldObject) or (M_imeet_pervuyu_ulicu_ugla.BoldObject is TUlica), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_pervuyu_ulicu_ugla', M_imeet_pervuyu_ulicu_ugla.BoldObject.ClassName, 'TUlica']));
  Result := TUlica(M_imeet_pervuyu_ulicu_ugla.BoldObject);
end;

procedure TShablon_zakaza._Setimeet_pervuyu_ulicu_ugla(const value: TUlica);
begin
  M_imeet_pervuyu_ulicu_ugla.BoldObject := value;
end;

function TShablon_zakaza._Get_M_imeet_vtoruyu_ulicu_ugla: TBoldObjectReference;
begin
  assert(ValidateMember('TShablon_zakaza', 'imeet_vtoruyu_ulicu_ugla', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TShablon_zakaza._Getimeet_vtoruyu_ulicu_ugla: TUlica;
begin
  assert(not assigned(M_imeet_vtoruyu_ulicu_ugla.BoldObject) or (M_imeet_vtoruyu_ulicu_ugla.BoldObject is TUlica), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'imeet_vtoruyu_ulicu_ugla', M_imeet_vtoruyu_ulicu_ugla.BoldObject.ClassName, 'TUlica']));
  Result := TUlica(M_imeet_vtoruyu_ulicu_ugla.BoldObject);
end;

procedure TShablon_zakaza._Setimeet_vtoruyu_ulicu_ugla(const value: TUlica);
begin
  M_imeet_vtoruyu_ulicu_ugla.BoldObject := value;
end;

procedure TShablon_zakazaList.Add(NewObject: TShablon_zakaza);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TShablon_zakazaList.IndexOf(anObject: TShablon_zakaza): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TShablon_zakazaList.Includes(anObject: TShablon_zakaza) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TShablon_zakazaList.AddNew: TShablon_zakaza;
begin
  result := TShablon_zakaza(InternalAddNew);
end;

procedure TShablon_zakazaList.Insert(index: Integer; NewObject: TShablon_zakaza);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TShablon_zakazaList.GetBoldObject(index: Integer): TShablon_zakaza;
begin
  result := TShablon_zakaza(GetElement(index));
end;

procedure TShablon_zakazaList.SetBoldObject(index: Integer; NewObject: TShablon_zakaza);
begin;
  SetElement(index, NewObject);
end;

{ TOrganizaciya }

function TOrganizaciya._Get_M_Strana: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Strana', 12, TBAString));
  Result := TBAString(BoldMembers[12]);
end;

function TOrganizaciya._GetStrana: String;
begin
  Result := M_Strana.AsString;
end;

procedure TOrganizaciya._SetStrana(const NewValue: String);
begin
  M_Strana.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Oblastj: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Oblastj', 13, TBAString));
  Result := TBAString(BoldMembers[13]);
end;

function TOrganizaciya._GetOblastj: String;
begin
  Result := M_Oblastj.AsString;
end;

procedure TOrganizaciya._SetOblastj(const NewValue: String);
begin
  M_Oblastj.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Gorod: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Gorod', 14, TBAString));
  Result := TBAString(BoldMembers[14]);
end;

function TOrganizaciya._GetGorod: String;
begin
  Result := M_Gorod.AsString;
end;

procedure TOrganizaciya._SetGorod(const NewValue: String);
begin
  M_Gorod.AsString := NewValue;
end;

function TOrganizaciya._Get_M_BIK: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'BIK', 15, TBAString));
  Result := TBAString(BoldMembers[15]);
end;

function TOrganizaciya._GetBIK: String;
begin
  Result := M_BIK.AsString;
end;

procedure TOrganizaciya._SetBIK(const NewValue: String);
begin
  M_BIK.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Naimenovanie: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Naimenovanie', 16, TBAString));
  Result := TBAString(BoldMembers[16]);
end;

function TOrganizaciya._GetNaimenovanie: String;
begin
  Result := M_Naimenovanie.AsString;
end;

procedure TOrganizaciya._SetNaimenovanie(const NewValue: String);
begin
  M_Naimenovanie.AsString := NewValue;
end;

function TOrganizaciya._Get_M_YavlyaetsyaVlad: TBABoolean;
begin
  assert(ValidateMember('TOrganizaciya', 'YavlyaetsyaVlad', 17, TBABoolean));
  Result := TBABoolean(BoldMembers[17]);
end;

function TOrganizaciya._GetYavlyaetsyaVlad: Boolean;
begin
  Result := M_YavlyaetsyaVlad.AsBoolean;
end;

procedure TOrganizaciya._SetYavlyaetsyaVlad(const NewValue: Boolean);
begin
  M_YavlyaetsyaVlad.AsBoolean := NewValue;
end;

function TOrganizaciya._Get_M_Rukovoditelj: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Rukovoditelj', 18, TBAString));
  Result := TBAString(BoldMembers[18]);
end;

function TOrganizaciya._GetRukovoditelj: String;
begin
  Result := M_Rukovoditelj.AsString;
end;

procedure TOrganizaciya._SetRukovoditelj(const NewValue: String);
begin
  M_Rukovoditelj.AsString := NewValue;
end;

function TOrganizaciya._Get_M_GlBuhgalter: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'GlBuhgalter', 19, TBAString));
  Result := TBAString(BoldMembers[19]);
end;

function TOrganizaciya._GetGlBuhgalter: String;
begin
  Result := M_GlBuhgalter.AsString;
end;

procedure TOrganizaciya._SetGlBuhgalter(const NewValue: String);
begin
  M_GlBuhgalter.AsString := NewValue;
end;

function TOrganizaciya._Get_M_INN: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'INN', 20, TBAString));
  Result := TBAString(BoldMembers[20]);
end;

function TOrganizaciya._GetINN: String;
begin
  Result := M_INN.AsString;
end;

procedure TOrganizaciya._SetINN(const NewValue: String);
begin
  M_INN.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Rasch__schet: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Rasch__schet', 21, TBAString));
  Result := TBAString(BoldMembers[21]);
end;

function TOrganizaciya._GetRasch__schet: String;
begin
  Result := M_Rasch__schet.AsString;
end;

procedure TOrganizaciya._SetRasch__schet(const NewValue: String);
begin
  M_Rasch__schet.AsString := NewValue;
end;

function TOrganizaciya._Get_M_KPP: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'KPP', 22, TBAString));
  Result := TBAString(BoldMembers[22]);
end;

function TOrganizaciya._GetKPP: String;
begin
  Result := M_KPP.AsString;
end;

procedure TOrganizaciya._SetKPP(const NewValue: String);
begin
  M_KPP.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Tip_organizacii: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Tip_organizacii', 23, TBAString));
  Result := TBAString(BoldMembers[23]);
end;

function TOrganizaciya._GetTip_organizacii: String;
begin
  Result := M_Tip_organizacii.AsString;
end;

procedure TOrganizaciya._SetTip_organizacii(const NewValue: String);
begin
  M_Tip_organizacii.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Kor_schet: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Kor_schet', 24, TBAString));
  Result := TBAString(BoldMembers[24]);
end;

function TOrganizaciya._GetKor_schet: String;
begin
  Result := M_Kor_schet.AsString;
end;

procedure TOrganizaciya._SetKor_schet(const NewValue: String);
begin
  M_Kor_schet.AsString := NewValue;
end;

function TOrganizaciya._Get_M_Naim__banka: TBAString;
begin
  assert(ValidateMember('TOrganizaciya', 'Naim__banka', 25, TBAString));
  Result := TBAString(BoldMembers[25]);
end;

function TOrganizaciya._GetNaim__banka: String;
begin
  Result := M_Naim__banka.AsString;
end;

procedure TOrganizaciya._SetNaim__banka(const NewValue: String);
begin
  M_Naim__banka.AsString := NewValue;
end;

procedure TOrganizaciyaList.Add(NewObject: TOrganizaciya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TOrganizaciyaList.IndexOf(anObject: TOrganizaciya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TOrganizaciyaList.Includes(anObject: TOrganizaciya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TOrganizaciyaList.AddNew: TOrganizaciya;
begin
  result := TOrganizaciya(InternalAddNew);
end;

procedure TOrganizaciyaList.Insert(index: Integer; NewObject: TOrganizaciya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TOrganizaciyaList.GetBoldObject(index: Integer): TOrganizaciya;
begin
  result := TOrganizaciya(GetElement(index));
end;

procedure TOrganizaciyaList.SetBoldObject(index: Integer; NewObject: TOrganizaciya);
begin;
  SetElement(index, NewObject);
end;

{ TVyruchka_ot_voditelya }

function TVyruchka_ot_voditelya._Get_M_Summa: TBAFloat;
begin
  assert(ValidateMember('TVyruchka_ot_voditelya', 'Summa', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TVyruchka_ot_voditelya._GetSumma: double;
begin
  Result := M_Summa.AsFloat;
end;

procedure TVyruchka_ot_voditelya._SetSumma(const NewValue: double);
begin
  M_Summa.AsFloat := NewValue;
end;

function TVyruchka_ot_voditelya._Get_M_Data_postupleniya: TBADateTime;
begin
  assert(ValidateMember('TVyruchka_ot_voditelya', 'Data_postupleniya', 6, TBADateTime));
  Result := TBADateTime(BoldMembers[6]);
end;

function TVyruchka_ot_voditelya._GetData_postupleniya: TDateTime;
begin
  Result := M_Data_postupleniya.AsDateTime;
end;

procedure TVyruchka_ot_voditelya._SetData_postupleniya(const NewValue: TDateTime);
begin
  M_Data_postupleniya.AsDateTime := NewValue;
end;

function TVyruchka_ot_voditelya._Get_M_kem_prinositsya: TBoldObjectReference;
begin
  assert(ValidateMember('TVyruchka_ot_voditelya', 'kem_prinositsya', 7, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[7]);
end;

function TVyruchka_ot_voditelya._Getkem_prinositsya: TVoditelj;
begin
  assert(not assigned(M_kem_prinositsya.BoldObject) or (M_kem_prinositsya.BoldObject is TVoditelj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'kem_prinositsya', M_kem_prinositsya.BoldObject.ClassName, 'TVoditelj']));
  Result := TVoditelj(M_kem_prinositsya.BoldObject);
end;

procedure TVyruchka_ot_voditelya._Setkem_prinositsya(const value: TVoditelj);
begin
  M_kem_prinositsya.BoldObject := value;
end;

procedure TVyruchka_ot_voditelyaList.Add(NewObject: TVyruchka_ot_voditelya);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TVyruchka_ot_voditelyaList.IndexOf(anObject: TVyruchka_ot_voditelya): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TVyruchka_ot_voditelyaList.Includes(anObject: TVyruchka_ot_voditelya) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TVyruchka_ot_voditelyaList.AddNew: TVyruchka_ot_voditelya;
begin
  result := TVyruchka_ot_voditelya(InternalAddNew);
end;

procedure TVyruchka_ot_voditelyaList.Insert(index: Integer; NewObject: TVyruchka_ot_voditelya);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TVyruchka_ot_voditelyaList.GetBoldObject(index: Integer): TVyruchka_ot_voditelya;
begin
  result := TVyruchka_ot_voditelya(GetElement(index));
end;

procedure TVyruchka_ot_voditelyaList.SetBoldObject(index: Integer; NewObject: TVyruchka_ot_voditelya);
begin;
  SetElement(index, NewObject);
end;

{ TGruppa_voditelei }

function TGruppa_voditelei._Getvklyuchaet_voditelya: TVoditeljList;
begin
  assert(ValidateMember('TGruppa_voditelei', 'vklyuchaet_voditelya', 3, TVoditeljList));
  Result := TVoditeljList(BoldMembers[3]);
end;

procedure TGruppa_voditeleiList.Add(NewObject: TGruppa_voditelei);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TGruppa_voditeleiList.IndexOf(anObject: TGruppa_voditelei): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TGruppa_voditeleiList.Includes(anObject: TGruppa_voditelei) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TGruppa_voditeleiList.AddNew: TGruppa_voditelei;
begin
  result := TGruppa_voditelei(InternalAddNew);
end;

procedure TGruppa_voditeleiList.Insert(index: Integer; NewObject: TGruppa_voditelei);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TGruppa_voditeleiList.GetBoldObject(index: Integer): TGruppa_voditelei;
begin
  result := TGruppa_voditelei(GetElement(index));
end;

procedure TGruppa_voditeleiList.SetBoldObject(index: Integer; NewObject: TGruppa_voditelei);
begin;
  SetElement(index, NewObject);
end;

{ TMashina }

function TMashina._Get_M_Modelj: TBAString;
begin
  assert(ValidateMember('TMashina', 'Modelj', 3, TBAString));
  Result := TBAString(BoldMembers[3]);
end;

function TMashina._GetModelj: String;
begin
  Result := M_Modelj.AsString;
end;

procedure TMashina._SetModelj(const NewValue: String);
begin
  M_Modelj.AsString := NewValue;
end;

function TMashina._Get_M_upravlyaetsya_voditelem: TBoldObjectReference;
begin
  assert(ValidateMember('TMashina', 'upravlyaetsya_voditelem', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TMashina._Getupravlyaetsya_voditelem: TVoditelj;
begin
  assert(not assigned(M_upravlyaetsya_voditelem.BoldObject) or (M_upravlyaetsya_voditelem.BoldObject is TVoditelj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'upravlyaetsya_voditelem', M_upravlyaetsya_voditelem.BoldObject.ClassName, 'TVoditelj']));
  Result := TVoditelj(M_upravlyaetsya_voditelem.BoldObject);
end;

procedure TMashina._Setupravlyaetsya_voditelem(const value: TVoditelj);
begin
  M_upravlyaetsya_voditelem.BoldObject := value;
end;

procedure TMashinaList.Add(NewObject: TMashina);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TMashinaList.IndexOf(anObject: TMashina): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TMashinaList.Includes(anObject: TMashina) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TMashinaList.AddNew: TMashina;
begin
  result := TMashina(InternalAddNew);
end;

procedure TMashinaList.Insert(index: Integer; NewObject: TMashina);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TMashinaList.GetBoldObject(index: Integer): TMashina;
begin
  result := TMashina(GetElement(index));
end;

procedure TMashinaList.SetBoldObject(index: Integer; NewObject: TMashina);
begin;
  SetElement(index, NewObject);
end;

{ TObjekt }

function TObjekt._Getobjekt_vyzova_dlya: TShablon_zakazaList;
begin
  assert(ValidateMember('TObjekt', 'objekt_vyzova_dlya', 3, TShablon_zakazaList));
  Result := TShablon_zakazaList(BoldMembers[3]);
end;

procedure TObjektList.Add(NewObject: TObjekt);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TObjektList.IndexOf(anObject: TObjekt): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TObjektList.Includes(anObject: TObjekt) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TObjektList.AddNew: TObjekt;
begin
  result := TObjekt(InternalAddNew);
end;

procedure TObjektList.Insert(index: Integer; NewObject: TObjekt);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TObjektList.GetBoldObject(index: Integer): TObjekt;
begin
  result := TObjekt(GetElement(index));
end;

procedure TObjektList.SetBoldObject(index: Integer; NewObject: TObjekt);
begin;
  SetElement(index, NewObject);
end;

{ TRaion }

function TRaion._Getraion_vyzova_dlya: TShablon_zakazaList;
begin
  assert(ValidateMember('TRaion', 'raion_vyzova_dlya', 3, TShablon_zakazaList));
  Result := TShablon_zakazaList(BoldMembers[3]);
end;

function TRaion._Get_M_predpolagaet_stoimostj: TBoldObjectReference;
begin
  assert(ValidateMember('TRaion', 'predpolagaet_stoimostj', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TRaion._Getpredpolagaet_stoimostj: TStoimostj;
begin
  assert(not assigned(M_predpolagaet_stoimostj.BoldObject) or (M_predpolagaet_stoimostj.BoldObject is TStoimostj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'predpolagaet_stoimostj', M_predpolagaet_stoimostj.BoldObject.ClassName, 'TStoimostj']));
  Result := TStoimostj(M_predpolagaet_stoimostj.BoldObject);
end;

procedure TRaion._Setpredpolagaet_stoimostj(const value: TStoimostj);
begin
  M_predpolagaet_stoimostj.BoldObject := value;
end;

function TRaion._Get_M_otnositsya_k_sektoru: TBoldObjectReference;
begin
  assert(ValidateMember('TRaion', 'otnositsya_k_sektoru', 5, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[5]);
end;

function TRaion._Getotnositsya_k_sektoru: TSektor_raboty;
begin
  assert(not assigned(M_otnositsya_k_sektoru.BoldObject) or (M_otnositsya_k_sektoru.BoldObject is TSektor_raboty), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_k_sektoru', M_otnositsya_k_sektoru.BoldObject.ClassName, 'TSektor_raboty']));
  Result := TSektor_raboty(M_otnositsya_k_sektoru.BoldObject);
end;

procedure TRaion._Setotnositsya_k_sektoru(const value: TSektor_raboty);
begin
  M_otnositsya_k_sektoru.BoldObject := value;
end;

procedure TRaionList.Add(NewObject: TRaion);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TRaionList.IndexOf(anObject: TRaion): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TRaionList.Includes(anObject: TRaion) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TRaionList.AddNew: TRaion;
begin
  result := TRaion(InternalAddNew);
end;

procedure TRaionList.Insert(index: Integer; NewObject: TRaion);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TRaionList.GetBoldObject(index: Integer): TRaion;
begin
  result := TRaion(GetElement(index));
end;

procedure TRaionList.SetBoldObject(index: Integer; NewObject: TRaion);
begin;
  SetElement(index, NewObject);
end;

{ TSektor_raboty }

function TSektor_raboty._Get_M_Nomer_sektora: TBAInteger;
begin
  assert(ValidateMember('TSektor_raboty', 'Nomer_sektora', 3, TBAInteger));
  Result := TBAInteger(BoldMembers[3]);
end;

function TSektor_raboty._GetNomer_sektora: Integer;
begin
  Result := M_Nomer_sektora.AsInteger;
end;

procedure TSektor_raboty._SetNomer_sektora(const NewValue: Integer);
begin
  M_Nomer_sektora.AsInteger := NewValue;
end;

function TSektor_raboty._Get_M_Oblastj_sverhu: TBAFloat;
begin
  assert(ValidateMember('TSektor_raboty', 'Oblastj_sverhu', 4, TBAFloat));
  Result := TBAFloat(BoldMembers[4]);
end;

function TSektor_raboty._GetOblastj_sverhu: double;
begin
  Result := M_Oblastj_sverhu.AsFloat;
end;

procedure TSektor_raboty._SetOblastj_sverhu(const NewValue: double);
begin
  M_Oblastj_sverhu.AsFloat := NewValue;
end;

function TSektor_raboty._Get_M_Oblastj_sleva: TBAFloat;
begin
  assert(ValidateMember('TSektor_raboty', 'Oblastj_sleva', 5, TBAFloat));
  Result := TBAFloat(BoldMembers[5]);
end;

function TSektor_raboty._GetOblastj_sleva: double;
begin
  Result := M_Oblastj_sleva.AsFloat;
end;

procedure TSektor_raboty._SetOblastj_sleva(const NewValue: double);
begin
  M_Oblastj_sleva.AsFloat := NewValue;
end;

function TSektor_raboty._Get_M_Shirina: TBAFloat;
begin
  assert(ValidateMember('TSektor_raboty', 'Shirina', 6, TBAFloat));
  Result := TBAFloat(BoldMembers[6]);
end;

function TSektor_raboty._GetShirina: double;
begin
  Result := M_Shirina.AsFloat;
end;

procedure TSektor_raboty._SetShirina(const NewValue: double);
begin
  M_Shirina.AsFloat := NewValue;
end;

function TSektor_raboty._Get_M_Vysota: TBAFloat;
begin
  assert(ValidateMember('TSektor_raboty', 'Vysota', 7, TBAFloat));
  Result := TBAFloat(BoldMembers[7]);
end;

function TSektor_raboty._GetVysota: double;
begin
  Result := M_Vysota.AsFloat;
end;

procedure TSektor_raboty._SetVysota(const NewValue: double);
begin
  M_Vysota.AsFloat := NewValue;
end;

function TSektor_raboty._Get_M_Podskazka_na_sektore: TBAString;
begin
  assert(ValidateMember('TSektor_raboty', 'Podskazka_na_sektore', 8, TBAString));
  Result := TBAString(BoldMembers[8]);
end;

function TSektor_raboty._GetPodskazka_na_sektore: String;
begin
  Result := M_Podskazka_na_sektore.AsString;
end;

procedure TSektor_raboty._SetPodskazka_na_sektore(const NewValue: String);
begin
  M_Podskazka_na_sektore.AsString := NewValue;
end;

function TSektor_raboty._Get_M_Kod_sektora: TBAString;
begin
  assert(ValidateMember('TSektor_raboty', 'Kod_sektora', 9, TBAString));
  Result := TBAString(BoldMembers[9]);
end;

function TSektor_raboty._GetKod_sektora: String;
begin
  Result := M_Kod_sektora.AsString;
end;

procedure TSektor_raboty._SetKod_sektora(const NewValue: String);
begin
  M_Kod_sektora.AsString := NewValue;
end;

function TSektor_raboty._Getvklyuchaet_raion: TRaionList;
begin
  assert(ValidateMember('TSektor_raboty', 'vklyuchaet_raion', 10, TRaionList));
  Result := TRaionList(BoldMembers[10]);
end;

function TSektor_raboty._Getvklyuchaet_adresa: TZakazList;
begin
  assert(ValidateMember('TSektor_raboty', 'vklyuchaet_adresa', 11, TZakazList));
  Result := TZakazList(BoldMembers[11]);
end;

function TSektor_raboty._Getyavl_sekt_raboty_dlya: TVoditeljList;
begin
  assert(ValidateMember('TSektor_raboty', 'yavl_sekt_raboty_dlya', 12, TVoditeljList));
  Result := TVoditeljList(BoldMembers[12]);
end;

function TSektor_raboty._Getyavl_konechn_sektorom_dlya: TZakazList;
begin
  assert(ValidateMember('TSektor_raboty', 'yavl_konechn_sektorom_dlya', 13, TZakazList));
  Result := TZakazList(BoldMembers[13]);
end;

function TSektor_raboty._Getharakt_associacii: TSootvetstvie_parametrov_zakazaList;
begin
  assert(ValidateMember('TSektor_raboty', 'harakt_associacii', 14, TSootvetstvie_parametrov_zakazaList));
  Result := TSootvetstvie_parametrov_zakazaList(BoldMembers[14]);
end;

function TSektor_raboty._Getvoditeljskii_sekt_dlya: TZakazList;
begin
  assert(ValidateMember('TSektor_raboty', 'voditeljskii_sekt_dlya', 15, TZakazList));
  Result := TZakazList(BoldMembers[15]);
end;

procedure TSektor_rabotyList.Add(NewObject: TSektor_raboty);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TSektor_rabotyList.IndexOf(anObject: TSektor_raboty): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TSektor_rabotyList.Includes(anObject: TSektor_raboty) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TSektor_rabotyList.AddNew: TSektor_raboty;
begin
  result := TSektor_raboty(InternalAddNew);
end;

procedure TSektor_rabotyList.Insert(index: Integer; NewObject: TSektor_raboty);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TSektor_rabotyList.GetBoldObject(index: Integer): TSektor_raboty;
begin
  result := TSektor_raboty(GetElement(index));
end;

procedure TSektor_rabotyList.SetBoldObject(index: Integer; NewObject: TSektor_raboty);
begin;
  SetElement(index, NewObject);
end;

{ TStoimostj }

function TStoimostj._Get_M_Stoimostj: TBAFloat;
begin
  assert(ValidateMember('TStoimostj', 'Stoimostj', 3, TBAFloat));
  Result := TBAFloat(BoldMembers[3]);
end;

function TStoimostj._GetStoimostj: double;
begin
  Result := M_Stoimostj.AsFloat;
end;

procedure TStoimostj._SetStoimostj(const NewValue: double);
begin
  M_Stoimostj.AsFloat := NewValue;
end;

function TStoimostj._Get_M_zavisit_ot_raiona: TBoldObjectReference;
begin
  assert(ValidateMember('TStoimostj', 'zavisit_ot_raiona', 4, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[4]);
end;

function TStoimostj._Getzavisit_ot_raiona: TRaion;
begin
  assert(not assigned(M_zavisit_ot_raiona.BoldObject) or (M_zavisit_ot_raiona.BoldObject is TRaion), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'zavisit_ot_raiona', M_zavisit_ot_raiona.BoldObject.ClassName, 'TRaion']));
  Result := TRaion(M_zavisit_ot_raiona.BoldObject);
end;

procedure TStoimostj._Setzavisit_ot_raiona(const value: TRaion);
begin
  M_zavisit_ot_raiona.BoldObject := value;
end;

function TStoimostj._Getsostavlyaet_stoimostj_dlya: TZakazList;
begin
  assert(ValidateMember('TStoimostj', 'sostavlyaet_stoimostj_dlya', 5, TZakazList));
  Result := TZakazList(BoldMembers[5]);
end;

procedure TStoimostjList.Add(NewObject: TStoimostj);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TStoimostjList.IndexOf(anObject: TStoimostj): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TStoimostjList.Includes(anObject: TStoimostj) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TStoimostjList.AddNew: TStoimostj;
begin
  result := TStoimostj(InternalAddNew);
end;

procedure TStoimostjList.Insert(index: Integer; NewObject: TStoimostj);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TStoimostjList.GetBoldObject(index: Integer): TStoimostj;
begin
  result := TStoimostj(GetElement(index));
end;

procedure TStoimostjList.SetBoldObject(index: Integer; NewObject: TStoimostj);
begin;
  SetElement(index, NewObject);
end;

{ TUlica }

function TUlica._Getulica_vyzova_dlya: TShablon_zakazaList;
begin
  assert(ValidateMember('TUlica', 'ulica_vyzova_dlya', 3, TShablon_zakazaList));
  Result := TShablon_zakazaList(BoldMembers[3]);
end;

function TUlica._Getobrazuet_kak_peruvaya_ulica_ugol: TShablon_zakazaList;
begin
  assert(ValidateMember('TUlica', 'obrazuet_kak_peruvaya_ulica_ugol', 4, TShablon_zakazaList));
  Result := TShablon_zakazaList(BoldMembers[4]);
end;

function TUlica._Getobrazuet_kak_vtoraya_ugol: TShablon_zakazaList;
begin
  assert(ValidateMember('TUlica', 'obrazuet_kak_vtoraya_ugol', 5, TShablon_zakazaList));
  Result := TShablon_zakazaList(BoldMembers[5]);
end;

procedure TUlicaList.Add(NewObject: TUlica);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TUlicaList.IndexOf(anObject: TUlica): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TUlicaList.Includes(anObject: TUlica) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TUlicaList.AddNew: TUlica;
begin
  result := TUlica(InternalAddNew);
end;

procedure TUlicaList.Insert(index: Integer; NewObject: TUlica);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TUlicaList.GetBoldObject(index: Integer): TUlica;
begin
  result := TUlica(GetElement(index));
end;

procedure TUlicaList.SetBoldObject(index: Integer; NewObject: TUlica);
begin;
  SetElement(index, NewObject);
end;

{ TZakaz }

function TZakaz._Get_M_Kolichestvo_chasov: TBAFloat;
begin
  assert(ValidateMember('TZakaz', 'Kolichestvo_chasov', 6, TBAFloat));
  Result := TBAFloat(BoldMembers[6]);
end;

function TZakaz._GetKolichestvo_chasov: double;
begin
  Result := M_Kolichestvo_chasov.AsFloat;
end;

procedure TZakaz._SetKolichestvo_chasov(const NewValue: double);
begin
  M_Kolichestvo_chasov.AsFloat := NewValue;
end;

function TZakaz._Get_M_Nachalo_zakaza_data: TBADateTime;
begin
  assert(ValidateMember('TZakaz', 'Nachalo_zakaza_data', 7, TBADateTime));
  Result := TBADateTime(BoldMembers[7]);
end;

function TZakaz._GetNachalo_zakaza_data: TDateTime;
begin
  Result := M_Nachalo_zakaza_data.AsDateTime;
end;

procedure TZakaz._SetNachalo_zakaza_data(const NewValue: TDateTime);
begin
  M_Nachalo_zakaza_data.AsDateTime := NewValue;
end;

function TZakaz._Get_M_Konec_zakaza_data: TBADateTime;
begin
  assert(ValidateMember('TZakaz', 'Konec_zakaza_data', 8, TBADateTime));
  Result := TBADateTime(BoldMembers[8]);
end;

function TZakaz._GetKonec_zakaza_data: TDateTime;
begin
  Result := M_Konec_zakaza_data.AsDateTime;
end;

procedure TZakaz._SetKonec_zakaza_data(const NewValue: TDateTime);
begin
  M_Konec_zakaza_data.AsDateTime := NewValue;
end;

function TZakaz._Get_M_Telefon_klienta: TBAString;
begin
  assert(ValidateMember('TZakaz', 'Telefon_klienta', 9, TBAString));
  Result := TBAString(BoldMembers[9]);
end;

function TZakaz._GetTelefon_klienta: String;
begin
  Result := M_Telefon_klienta.AsString;
end;

procedure TZakaz._SetTelefon_klienta(const NewValue: String);
begin
  M_Telefon_klienta.AsString := NewValue;
end;

function TZakaz._Get_M_Stoimostj_zakaza: TBAFloat;
begin
  assert(ValidateMember('TZakaz', 'Stoimostj_zakaza', 10, TBAFloat));
  Result := TBAFloat(BoldMembers[10]);
end;

function TZakaz._GetStoimostj_zakaza: double;
begin
  Result := M_Stoimostj_zakaza.AsFloat;
end;

function TZakaz._Get_M_Nomer_zakaza: TBAFloat;
begin
  assert(ValidateMember('TZakaz', 'Nomer_zakaza', 11, TBAFloat));
  Result := TBAFloat(BoldMembers[11]);
end;

function TZakaz._GetNomer_zakaza: double;
begin
  Result := M_Nomer_zakaza.AsFloat;
end;

procedure TZakaz._SetNomer_zakaza(const NewValue: double);
begin
  M_Nomer_zakaza.AsFloat := NewValue;
end;

function TZakaz._Get_M_Data_podachi: TBADateTime;
begin
  assert(ValidateMember('TZakaz', 'Data_podachi', 12, TBADateTime));
  Result := TBADateTime(BoldMembers[12]);
end;

function TZakaz._GetData_podachi: TDateTime;
begin
  Result := M_Data_podachi.AsDateTime;
end;

procedure TZakaz._SetData_podachi(const NewValue: TDateTime);
begin
  M_Data_podachi.AsDateTime := NewValue;
end;

function TZakaz._Get_M_Zavershyon: TBABoolean;
begin
  assert(ValidateMember('TZakaz', 'Zavershyon', 13, TBABoolean));
  Result := TBABoolean(BoldMembers[13]);
end;

function TZakaz._GetZavershyon: Boolean;
begin
  Result := M_Zavershyon.AsBoolean;
end;

procedure TZakaz._SetZavershyon(const NewValue: Boolean);
begin
  M_Zavershyon.AsBoolean := NewValue;
end;

function TZakaz._Get_M_Arhivnyi: TBABoolean;
begin
  assert(ValidateMember('TZakaz', 'Arhivnyi', 14, TBABoolean));
  Result := TBABoolean(BoldMembers[14]);
end;

function TZakaz._GetArhivnyi: Boolean;
begin
  Result := M_Arhivnyi.AsBoolean;
end;

procedure TZakaz._SetArhivnyi(const NewValue: Boolean);
begin
  M_Arhivnyi.AsBoolean := NewValue;
end;

function TZakaz._Get_M_Uslovn_stoim: TBAFloat;
begin
  assert(ValidateMember('TZakaz', 'Uslovn_stoim', 15, TBAFloat));
  Result := TBAFloat(BoldMembers[15]);
end;

function TZakaz._GetUslovn_stoim: double;
begin
  Result := M_Uslovn_stoim.AsFloat;
end;

procedure TZakaz._SetUslovn_stoim(const NewValue: double);
begin
  M_Uslovn_stoim.AsFloat := NewValue;
end;

function TZakaz._Get_M_Adres_vyzova_vvodim: TBAString;
begin
  assert(ValidateMember('TZakaz', 'Adres_vyzova_vvodim', 16, TBAString));
  Result := TBAString(BoldMembers[16]);
end;

function TZakaz._GetAdres_vyzova_vvodim: String;
begin
  Result := M_Adres_vyzova_vvodim.AsString;
end;

procedure TZakaz._SetAdres_vyzova_vvodim(const NewValue: String);
begin
  M_Adres_vyzova_vvodim.AsString := NewValue;
end;

function TZakaz._Get_M_Predvariteljnyi: TBABoolean;
begin
  assert(ValidateMember('TZakaz', 'Predvariteljnyi', 17, TBABoolean));
  Result := TBABoolean(BoldMembers[17]);
end;

function TZakaz._GetPredvariteljnyi: Boolean;
begin
  Result := M_Predvariteljnyi.AsBoolean;
end;

procedure TZakaz._SetPredvariteljnyi(const NewValue: Boolean);
begin
  M_Predvariteljnyi.AsBoolean := NewValue;
end;

function TZakaz._Get_M_Data_predvariteljnaya: TBADateTime;
begin
  assert(ValidateMember('TZakaz', 'Data_predvariteljnaya', 18, TBADateTime));
  Result := TBADateTime(BoldMembers[18]);
end;

function TZakaz._GetData_predvariteljnaya: TDateTime;
begin
  Result := M_Data_predvariteljnaya.AsDateTime;
end;

procedure TZakaz._SetData_predvariteljnaya(const NewValue: TDateTime);
begin
  M_Data_predvariteljnaya.AsDateTime := NewValue;
end;

function TZakaz._Get_M_Zadeistv_predvarit: TBABoolean;
begin
  assert(ValidateMember('TZakaz', 'Zadeistv_predvarit', 19, TBABoolean));
  Result := TBABoolean(BoldMembers[19]);
end;

function TZakaz._GetZadeistv_predvarit: Boolean;
begin
  Result := M_Zadeistv_predvarit.AsBoolean;
end;

procedure TZakaz._SetZadeistv_predvarit(const NewValue: Boolean);
begin
  M_Zadeistv_predvarit.AsBoolean := NewValue;
end;

function TZakaz._Get_M_Data_po_umolchaniyu: TBADateTime;
begin
  assert(ValidateMember('TZakaz', 'Data_po_umolchaniyu', 20, TBADateTime));
  Result := TBADateTime(BoldMembers[20]);
end;

function TZakaz._GetData_po_umolchaniyu: TDateTime;
begin
  Result := M_Data_po_umolchaniyu.AsDateTime;
end;

procedure TZakaz._SetData_po_umolchaniyu(const NewValue: TDateTime);
begin
  M_Data_po_umolchaniyu.AsDateTime := NewValue;
end;

function TZakaz._Get_M_Soobsheno_voditelyu: TBABoolean;
begin
  assert(ValidateMember('TZakaz', 'Soobsheno_voditelyu', 21, TBABoolean));
  Result := TBABoolean(BoldMembers[21]);
end;

function TZakaz._GetSoobsheno_voditelyu: Boolean;
begin
  Result := M_Soobsheno_voditelyu.AsBoolean;
end;

procedure TZakaz._SetSoobsheno_voditelyu(const NewValue: Boolean);
begin
  M_Soobsheno_voditelyu.AsBoolean := NewValue;
end;

function TZakaz._Get_M_Adres_okonchaniya_zayavki: TBAString;
begin
  assert(ValidateMember('TZakaz', 'Adres_okonchaniya_zayavki', 22, TBAString));
  Result := TBAString(BoldMembers[22]);
end;

function TZakaz._GetAdres_okonchaniya_zayavki: String;
begin
  Result := M_Adres_okonchaniya_zayavki.AsString;
end;

procedure TZakaz._SetAdres_okonchaniya_zayavki(const NewValue: String);
begin
  M_Adres_okonchaniya_zayavki.AsString := NewValue;
end;

function TZakaz._Get_M_Yavl_pochasovym: TBABoolean;
begin
  assert(ValidateMember('TZakaz', 'Yavl_pochasovym', 23, TBABoolean));
  Result := TBABoolean(BoldMembers[23]);
end;

function TZakaz._GetYavl_pochasovym: Boolean;
begin
  Result := M_Yavl_pochasovym.AsBoolean;
end;

procedure TZakaz._SetYavl_pochasovym(const NewValue: Boolean);
begin
  M_Yavl_pochasovym.AsBoolean := NewValue;
end;

function TZakaz._Get_M_Stoimostj_so_skidkoi: TBAFloat;
begin
  assert(ValidateMember('TZakaz', 'Stoimostj_so_skidkoi', 24, TBAFloat));
  Result := TBAFloat(BoldMembers[24]);
end;

function TZakaz._GetStoimostj_so_skidkoi: double;
begin
  Result := M_Stoimostj_so_skidkoi.AsFloat;
end;

function TZakaz._Get_M_Pozyvnoi_ustan: TBAInteger;
begin
  assert(ValidateMember('TZakaz', 'Pozyvnoi_ustan', 25, TBAInteger));
  Result := TBAInteger(BoldMembers[25]);
end;

function TZakaz._GetPozyvnoi_ustan: Integer;
begin
  Result := M_Pozyvnoi_ustan.AsInteger;
end;

procedure TZakaz._SetPozyvnoi_ustan(const NewValue: Integer);
begin
  M_Pozyvnoi_ustan.AsInteger := NewValue;
end;

function TZakaz._Get_M_Data_pribytie: TBADateTime;
begin
  assert(ValidateMember('TZakaz', 'Data_pribytie', 26, TBADateTime));
  Result := TBADateTime(BoldMembers[26]);
end;

function TZakaz._GetData_pribytie: TDateTime;
begin
  Result := M_Data_pribytie.AsDateTime;
end;

procedure TZakaz._SetData_pribytie(const NewValue: TDateTime);
begin
  M_Data_pribytie.AsDateTime := NewValue;
end;

function TZakaz._Get_M_Ustan_pribytie: TBABoolean;
begin
  assert(ValidateMember('TZakaz', 'Ustan_pribytie', 27, TBABoolean));
  Result := TBABoolean(BoldMembers[27]);
end;

function TZakaz._GetUstan_pribytie: Boolean;
begin
  Result := M_Ustan_pribytie.AsBoolean;
end;

procedure TZakaz._SetUstan_pribytie(const NewValue: Boolean);
begin
  M_Ustan_pribytie.AsBoolean := NewValue;
end;

function TZakaz._Get_M_Nomer_skidki: TBAInteger;
begin
  assert(ValidateMember('TZakaz', 'Nomer_skidki', 28, TBAInteger));
  Result := TBAInteger(BoldMembers[28]);
end;

function TZakaz._GetNomer_skidki: Integer;
begin
  Result := M_Nomer_skidki.AsInteger;
end;

procedure TZakaz._SetNomer_skidki(const NewValue: Integer);
begin
  M_Nomer_skidki.AsInteger := NewValue;
end;

function TZakaz._Get_M_Slugebnyi: TBABoolean;
begin
  assert(ValidateMember('TZakaz', 'Slugebnyi', 29, TBABoolean));
  Result := TBABoolean(BoldMembers[29]);
end;

function TZakaz._GetSlugebnyi: Boolean;
begin
  Result := M_Slugebnyi.AsBoolean;
end;

procedure TZakaz._SetSlugebnyi(const NewValue: Boolean);
begin
  M_Slugebnyi.AsBoolean := NewValue;
end;

function TZakaz._Get_M_Primechanie: TBAString;
begin
  assert(ValidateMember('TZakaz', 'Primechanie', 30, TBAString));
  Result := TBAString(BoldMembers[30]);
end;

function TZakaz._GetPrimechanie: String;
begin
  Result := M_Primechanie.AsString;
end;

procedure TZakaz._SetPrimechanie(const NewValue: String);
begin
  M_Primechanie.AsString := NewValue;
end;

function TZakaz._Get_M_Opr_s_obsh_linii: TBABoolean;
begin
  assert(ValidateMember('TZakaz', 'Opr_s_obsh_linii', 31, TBABoolean));
  Result := TBABoolean(BoldMembers[31]);
end;

function TZakaz._GetOpr_s_obsh_linii: Boolean;
begin
  Result := M_Opr_s_obsh_linii.AsBoolean;
end;

procedure TZakaz._SetOpr_s_obsh_linii(const NewValue: Boolean);
begin
  M_Opr_s_obsh_linii.AsBoolean := NewValue;
end;

function TZakaz._Get_M_Data_na_tochke: TBADateTime;
begin
  assert(ValidateMember('TZakaz', 'Data_na_tochke', 32, TBADateTime));
  Result := TBADateTime(BoldMembers[32]);
end;

function TZakaz._GetData_na_tochke: TDateTime;
begin
  Result := M_Data_na_tochke.AsDateTime;
end;

procedure TZakaz._SetData_na_tochke(const NewValue: TDateTime);
begin
  M_Data_na_tochke.AsDateTime := NewValue;
end;

function TZakaz._Get_M_vypolnyaetsya_voditelem: TBoldObjectReference;
begin
  assert(ValidateMember('TZakaz', 'vypolnyaetsya_voditelem', 33, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[33]);
end;

function TZakaz._Getvypolnyaetsya_voditelem: TVoditelj;
begin
  assert(not assigned(M_vypolnyaetsya_voditelem.BoldObject) or (M_vypolnyaetsya_voditelem.BoldObject is TVoditelj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'vypolnyaetsya_voditelem', M_vypolnyaetsya_voditelem.BoldObject.ClassName, 'TVoditelj']));
  Result := TVoditelj(M_vypolnyaetsya_voditelem.BoldObject);
end;

procedure TZakaz._Setvypolnyaetsya_voditelem(const value: TVoditelj);
begin
  M_vypolnyaetsya_voditelem.BoldObject := value;
end;

function TZakaz._Get_M_otpuskaetsya_dostepcherom: TBoldObjectReference;
begin
  assert(ValidateMember('TZakaz', 'otpuskaetsya_dostepcherom', 34, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[34]);
end;

function TZakaz._Getotpuskaetsya_dostepcherom: TPersonal;
begin
  assert(not assigned(M_otpuskaetsya_dostepcherom.BoldObject) or (M_otpuskaetsya_dostepcherom.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otpuskaetsya_dostepcherom', M_otpuskaetsya_dostepcherom.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_otpuskaetsya_dostepcherom.BoldObject);
end;

procedure TZakaz._Setotpuskaetsya_dostepcherom(const value: TPersonal);
begin
  M_otpuskaetsya_dostepcherom.BoldObject := value;
end;

function TZakaz._Get_M_ocenivaetsya_cherez: TBoldObjectReference;
begin
  assert(ValidateMember('TZakaz', 'ocenivaetsya_cherez', 35, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[35]);
end;

function TZakaz._Getocenivaetsya_cherez: TStoimostj;
begin
  assert(not assigned(M_ocenivaetsya_cherez.BoldObject) or (M_ocenivaetsya_cherez.BoldObject is TStoimostj), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'ocenivaetsya_cherez', M_ocenivaetsya_cherez.BoldObject.ClassName, 'TStoimostj']));
  Result := TStoimostj(M_ocenivaetsya_cherez.BoldObject);
end;

procedure TZakaz._Setocenivaetsya_cherez(const value: TStoimostj);
begin
  M_ocenivaetsya_cherez.BoldObject := value;
end;

function TZakaz._Get_M_adres_sektora: TBoldObjectReference;
begin
  assert(ValidateMember('TZakaz', 'adres_sektora', 36, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[36]);
end;

function TZakaz._Getadres_sektora: TSektor_raboty;
begin
  assert(not assigned(M_adres_sektora.BoldObject) or (M_adres_sektora.BoldObject is TSektor_raboty), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'adres_sektora', M_adres_sektora.BoldObject.ClassName, 'TSektor_raboty']));
  Result := TSektor_raboty(M_adres_sektora.BoldObject);
end;

procedure TZakaz._Setadres_sektora(const value: TSektor_raboty);
begin
  M_adres_sektora.BoldObject := value;
end;

function TZakaz._Get_M_konechnyi_sektor_raboty: TBoldObjectReference;
begin
  assert(ValidateMember('TZakaz', 'konechnyi_sektor_raboty', 37, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[37]);
end;

function TZakaz._Getkonechnyi_sektor_raboty: TSektor_raboty;
begin
  assert(not assigned(M_konechnyi_sektor_raboty.BoldObject) or (M_konechnyi_sektor_raboty.BoldObject is TSektor_raboty), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'konechnyi_sektor_raboty', M_konechnyi_sektor_raboty.BoldObject.ClassName, 'TSektor_raboty']));
  Result := TSektor_raboty(M_konechnyi_sektor_raboty.BoldObject);
end;

procedure TZakaz._Setkonechnyi_sektor_raboty(const value: TSektor_raboty);
begin
  M_konechnyi_sektor_raboty.BoldObject := value;
end;

function TZakaz._Get_M_sektor_voditelya: TBoldObjectReference;
begin
  assert(ValidateMember('TZakaz', 'sektor_voditelya', 38, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[38]);
end;

function TZakaz._Getsektor_voditelya: TSektor_raboty;
begin
  assert(not assigned(M_sektor_voditelya.BoldObject) or (M_sektor_voditelya.BoldObject is TSektor_raboty), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'sektor_voditelya', M_sektor_voditelya.BoldObject.ClassName, 'TSektor_raboty']));
  Result := TSektor_raboty(M_sektor_voditelya.BoldObject);
end;

procedure TZakaz._Setsektor_voditelya(const value: TSektor_raboty);
begin
  M_sektor_voditelya.BoldObject := value;
end;

function TZakaz._Get_M_otpravlyaetsya: TBoldObjectReference;
begin
  assert(ValidateMember('TZakaz', 'otpravlyaetsya', 39, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[39]);
end;

function TZakaz._Getotpravlyaetsya: TPersonal;
begin
  assert(not assigned(M_otpravlyaetsya.BoldObject) or (M_otpravlyaetsya.BoldObject is TPersonal), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otpravlyaetsya', M_otpravlyaetsya.BoldObject.ClassName, 'TPersonal']));
  Result := TPersonal(M_otpravlyaetsya.BoldObject);
end;

procedure TZakaz._Setotpravlyaetsya(const value: TPersonal);
begin
  M_otpravlyaetsya.BoldObject := value;
end;

procedure TZakazList.Add(NewObject: TZakaz);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TZakazList.IndexOf(anObject: TZakaz): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TZakazList.Includes(anObject: TZakaz) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TZakazList.AddNew: TZakaz;
begin
  result := TZakaz(InternalAddNew);
end;

procedure TZakazList.Insert(index: Integer; NewObject: TZakaz);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TZakazList.GetBoldObject(index: Integer): TZakaz;
begin
  result := TZakaz(GetElement(index));
end;

procedure TZakazList.SetBoldObject(index: Integer; NewObject: TZakaz);
begin;
  SetElement(index, NewObject);
end;

{ TVoditelj }

function TVoditelj._Get_M_Nachalo_intervala_raschyota: TBADateTime;
begin
  assert(ValidateMember('TVoditelj', 'Nachalo_intervala_raschyota', 26, TBADateTime));
  Result := TBADateTime(BoldMembers[26]);
end;

function TVoditelj._GetNachalo_intervala_raschyota: TDateTime;
begin
  Result := M_Nachalo_intervala_raschyota.AsDateTime;
end;

function TVoditelj._Get_M_Konec_intervala_raschyota: TBADateTime;
begin
  assert(ValidateMember('TVoditelj', 'Konec_intervala_raschyota', 27, TBADateTime));
  Result := TBADateTime(BoldMembers[27]);
end;

function TVoditelj._GetKonec_intervala_raschyota: TDateTime;
begin
  Result := M_Konec_intervala_raschyota.AsDateTime;
end;

function TVoditelj._Get_M_Prinyos_vsego: TBAFloat;
begin
  assert(ValidateMember('TVoditelj', 'Prinyos_vsego', 28, TBAFloat));
  Result := TBAFloat(BoldMembers[28]);
end;

function TVoditelj._GetPrinyos_vsego: double;
begin
  Result := M_Prinyos_vsego.AsFloat;
end;

function TVoditelj._Get_M_Prinyos_za_period: TBAFloat;
begin
  assert(ValidateMember('TVoditelj', 'Prinyos_za_period', 29, TBAFloat));
  Result := TBAFloat(BoldMembers[29]);
end;

function TVoditelj._GetPrinyos_za_period: double;
begin
  Result := M_Prinyos_za_period.AsFloat;
end;

function TVoditelj._Get_M_Velichina_procenta: TBAFloat;
begin
  assert(ValidateMember('TVoditelj', 'Velichina_procenta', 30, TBAFloat));
  Result := TBAFloat(BoldMembers[30]);
end;

function TVoditelj._GetVelichina_procenta: double;
begin
  Result := M_Velichina_procenta.AsFloat;
end;

function TVoditelj._Get_M_Pozyvnoi: TBAInteger;
begin
  assert(ValidateMember('TVoditelj', 'Pozyvnoi', 31, TBAInteger));
  Result := TBAInteger(BoldMembers[31]);
end;

function TVoditelj._GetPozyvnoi: Integer;
begin
  Result := M_Pozyvnoi.AsInteger;
end;

procedure TVoditelj._SetPozyvnoi(const NewValue: Integer);
begin
  M_Pozyvnoi.AsInteger := NewValue;
end;

function TVoditelj._Get_M_V_rabote: TBABoolean;
begin
  assert(ValidateMember('TVoditelj', 'V_rabote', 32, TBABoolean));
  Result := TBABoolean(BoldMembers[32]);
end;

function TVoditelj._GetV_rabote: Boolean;
begin
  Result := M_V_rabote.AsBoolean;
end;

procedure TVoditelj._SetV_rabote(const NewValue: Boolean);
begin
  M_V_rabote.AsBoolean := NewValue;
end;

function TVoditelj._Get_M_Na_pereryve: TBABoolean;
begin
  assert(ValidateMember('TVoditelj', 'Na_pereryve', 33, TBABoolean));
  Result := TBABoolean(BoldMembers[33]);
end;

function TVoditelj._GetNa_pereryve: Boolean;
begin
  Result := M_Na_pereryve.AsBoolean;
end;

procedure TVoditelj._SetNa_pereryve(const NewValue: Boolean);
begin
  M_Na_pereryve.AsBoolean := NewValue;
end;

function TVoditelj._Get_M_Indeks_ocheryodnosti: TBAInteger;
begin
  assert(ValidateMember('TVoditelj', 'Indeks_ocheryodnosti', 34, TBAInteger));
  Result := TBAInteger(BoldMembers[34]);
end;

function TVoditelj._GetIndeks_ocheryodnosti: Integer;
begin
  Result := M_Indeks_ocheryodnosti.AsInteger;
end;

procedure TVoditelj._SetIndeks_ocheryodnosti(const NewValue: Integer);
begin
  M_Indeks_ocheryodnosti.AsInteger := NewValue;
end;

function TVoditelj._Get_M_Nomer_sektora: TBAInteger;
begin
  assert(ValidateMember('TVoditelj', 'Nomer_sektora', 35, TBAInteger));
  Result := TBAInteger(BoldMembers[35]);
end;

function TVoditelj._GetNomer_sektora: Integer;
begin
  Result := M_Nomer_sektora.AsInteger;
end;

function TVoditelj._Get_M_Data_po_umolchaniyu: TBADateTime;
begin
  assert(ValidateMember('TVoditelj', 'Data_po_umolchaniyu', 36, TBADateTime));
  Result := TBADateTime(BoldMembers[36]);
end;

function TVoditelj._GetData_po_umolchaniyu: TDateTime;
begin
  Result := M_Data_po_umolchaniyu.AsDateTime;
end;

procedure TVoditelj._SetData_po_umolchaniyu(const NewValue: TDateTime);
begin
  M_Data_po_umolchaniyu.AsDateTime := NewValue;
end;

function TVoditelj._Get_M_Nomer_posl_sektora: TBAInteger;
begin
  assert(ValidateMember('TVoditelj', 'Nomer_posl_sektora', 37, TBAInteger));
  Result := TBAInteger(BoldMembers[37]);
end;

function TVoditelj._GetNomer_posl_sektora: Integer;
begin
  Result := M_Nomer_posl_sektora.AsInteger;
end;

procedure TVoditelj._SetNomer_posl_sektora(const NewValue: Integer);
begin
  M_Nomer_posl_sektora.AsInteger := NewValue;
end;

function TVoditelj._Get_M_Zanyat_drugim_disp: TBABoolean;
begin
  assert(ValidateMember('TVoditelj', 'Zanyat_drugim_disp', 38, TBABoolean));
  Result := TBABoolean(BoldMembers[38]);
end;

function TVoditelj._GetZanyat_drugim_disp: Boolean;
begin
  Result := M_Zanyat_drugim_disp.AsBoolean;
end;

procedure TVoditelj._SetZanyat_drugim_disp(const NewValue: Boolean);
begin
  M_Zanyat_drugim_disp.AsBoolean := NewValue;
end;

function TVoditelj._Get_M_Vremya_poslednei_zayavki: TBADateTime;
begin
  assert(ValidateMember('TVoditelj', 'Vremya_poslednei_zayavki', 39, TBADateTime));
  Result := TBADateTime(BoldMembers[39]);
end;

function TVoditelj._GetVremya_poslednei_zayavki: TDateTime;
begin
  Result := M_Vremya_poslednei_zayavki.AsDateTime;
end;

procedure TVoditelj._SetVremya_poslednei_zayavki(const NewValue: TDateTime);
begin
  M_Vremya_poslednei_zayavki.AsDateTime := NewValue;
end;

function TVoditelj._Get_M_Yavl_degurnym: TBABoolean;
begin
  assert(ValidateMember('TVoditelj', 'Yavl_degurnym', 40, TBABoolean));
  Result := TBABoolean(BoldMembers[40]);
end;

function TVoditelj._GetYavl_degurnym: Boolean;
begin
  Result := M_Yavl_degurnym.AsBoolean;
end;

function TVoditelj._Get_M_Nomer_deg_gruppy: TBAInteger;
begin
  assert(ValidateMember('TVoditelj', 'Nomer_deg_gruppy', 41, TBAInteger));
  Result := TBAInteger(BoldMembers[41]);
end;

function TVoditelj._GetNomer_deg_gruppy: Integer;
begin
  Result := M_Nomer_deg_gruppy.AsInteger;
end;

procedure TVoditelj._SetNomer_deg_gruppy(const NewValue: Integer);
begin
  M_Nomer_deg_gruppy.AsInteger := NewValue;
end;

function TVoditelj._Get_M_Marka_avtomobilya: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'Marka_avtomobilya', 42, TBAString));
  Result := TBAString(BoldMembers[42]);
end;

function TVoditelj._GetMarka_avtomobilya: String;
begin
  Result := M_Marka_avtomobilya.AsString;
end;

procedure TVoditelj._SetMarka_avtomobilya(const NewValue: String);
begin
  M_Marka_avtomobilya.AsString := NewValue;
end;

function TVoditelj._Get_M_Gos_nomernoi_znak: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'Gos_nomernoi_znak', 43, TBAString));
  Result := TBAString(BoldMembers[43]);
end;

function TVoditelj._GetGos_nomernoi_znak: String;
begin
  Result := M_Gos_nomernoi_znak.AsString;
end;

procedure TVoditelj._SetGos_nomernoi_znak(const NewValue: String);
begin
  M_Gos_nomernoi_znak.AsString := NewValue;
end;

function TVoditelj._Get_M_Garagn_nomer: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'Garagn_nomer', 44, TBAString));
  Result := TBAString(BoldMembers[44]);
end;

function TVoditelj._GetGaragn_nomer: String;
begin
  Result := M_Garagn_nomer.AsString;
end;

procedure TVoditelj._SetGaragn_nomer(const NewValue: String);
begin
  M_Garagn_nomer.AsString := NewValue;
end;

function TVoditelj._Get_M_Udostoverenie_nom: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'Udostoverenie_nom', 45, TBAString));
  Result := TBAString(BoldMembers[45]);
end;

function TVoditelj._GetUdostoverenie_nom: String;
begin
  Result := M_Udostoverenie_nom.AsString;
end;

procedure TVoditelj._SetUdostoverenie_nom(const NewValue: String);
begin
  M_Udostoverenie_nom.AsString := NewValue;
end;

function TVoditelj._Get_M_Licenzionnaya_kart: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'Licenzionnaya_kart', 46, TBAString));
  Result := TBAString(BoldMembers[46]);
end;

function TVoditelj._GetLicenzionnaya_kart: String;
begin
  Result := M_Licenzionnaya_kart.AsString;
end;

procedure TVoditelj._SetLicenzionnaya_kart(const NewValue: String);
begin
  M_Licenzionnaya_kart.AsString := NewValue;
end;

function TVoditelj._Get_M_Klass_vych: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'Klass_vych', 47, TBAString));
  Result := TBAString(BoldMembers[47]);
end;

function TVoditelj._GetKlass_vych: String;
begin
  Result := M_Klass_vych.AsString;
end;

function TVoditelj._Get_M_Klass_vodit: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'Klass_vodit', 48, TBAString));
  Result := TBAString(BoldMembers[48]);
end;

function TVoditelj._GetKlass_vodit: String;
begin
  Result := M_Klass_vodit.AsString;
end;

procedure TVoditelj._SetKlass_vodit(const NewValue: String);
begin
  M_Klass_vodit.AsString := NewValue;
end;

function TVoditelj._Get_M_A_klass: TBABoolean;
begin
  assert(ValidateMember('TVoditelj', 'A_klass', 49, TBABoolean));
  Result := TBABoolean(BoldMembers[49]);
end;

function TVoditelj._GetA_klass: Boolean;
begin
  Result := M_A_klass.AsBoolean;
end;

procedure TVoditelj._SetA_klass(const NewValue: Boolean);
begin
  M_A_klass.AsBoolean := NewValue;
end;

function TVoditelj._Get_M_B_klass: TBABoolean;
begin
  assert(ValidateMember('TVoditelj', 'B_klass', 50, TBABoolean));
  Result := TBABoolean(BoldMembers[50]);
end;

function TVoditelj._GetB_klass: Boolean;
begin
  Result := M_B_klass.AsBoolean;
end;

procedure TVoditelj._SetB_klass(const NewValue: Boolean);
begin
  M_B_klass.AsBoolean := NewValue;
end;

function TVoditelj._Get_M_S_klass: TBABoolean;
begin
  assert(ValidateMember('TVoditelj', 'S_klass', 51, TBABoolean));
  Result := TBABoolean(BoldMembers[51]);
end;

function TVoditelj._GetS_klass: Boolean;
begin
  Result := M_S_klass.AsBoolean;
end;

procedure TVoditelj._SetS_klass(const NewValue: Boolean);
begin
  M_S_klass.AsBoolean := NewValue;
end;

function TVoditelj._Get_M_D_klass: TBABoolean;
begin
  assert(ValidateMember('TVoditelj', 'D_klass', 52, TBABoolean));
  Result := TBABoolean(BoldMembers[52]);
end;

function TVoditelj._GetD_klass: Boolean;
begin
  Result := M_D_klass.AsBoolean;
end;

procedure TVoditelj._SetD_klass(const NewValue: Boolean);
begin
  M_D_klass.AsBoolean := NewValue;
end;

function TVoditelj._Get_M_E_klass: TBABoolean;
begin
  assert(ValidateMember('TVoditelj', 'E_klass', 53, TBABoolean));
  Result := TBABoolean(BoldMembers[53]);
end;

function TVoditelj._GetE_klass: Boolean;
begin
  Result := M_E_klass.AsBoolean;
end;

procedure TVoditelj._SetE_klass(const NewValue: Boolean);
begin
  M_E_klass.AsBoolean := NewValue;
end;

function TVoditelj._Get_M_A_vych: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'A_vych', 54, TBAString));
  Result := TBAString(BoldMembers[54]);
end;

function TVoditelj._GetA_vych: String;
begin
  Result := M_A_vych.AsString;
end;

function TVoditelj._Get_M_B_vych: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'B_vych', 55, TBAString));
  Result := TBAString(BoldMembers[55]);
end;

function TVoditelj._GetB_vych: String;
begin
  Result := M_B_vych.AsString;
end;

function TVoditelj._Get_M_S_vych: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'S_vych', 56, TBAString));
  Result := TBAString(BoldMembers[56]);
end;

function TVoditelj._GetS_vych: String;
begin
  Result := M_S_vych.AsString;
end;

function TVoditelj._Get_M_D_vych: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'D_vych', 57, TBAString));
  Result := TBAString(BoldMembers[57]);
end;

function TVoditelj._GetD_vych: String;
begin
  Result := M_D_vych.AsString;
end;

function TVoditelj._Get_M_E_vych: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'E_vych', 58, TBAString));
  Result := TBAString(BoldMembers[58]);
end;

function TVoditelj._GetE_vych: String;
begin
  Result := M_E_vych.AsString;
end;

function TVoditelj._Get_M_Izm_haraktrist: TBABoolean;
begin
  assert(ValidateMember('TVoditelj', 'Izm_haraktrist', 59, TBABoolean));
  Result := TBABoolean(BoldMembers[59]);
end;

function TVoditelj._GetIzm_haraktrist: Boolean;
begin
  Result := M_Izm_haraktrist.AsBoolean;
end;

procedure TVoditelj._SetIzm_haraktrist(const NewValue: Boolean);
begin
  M_Izm_haraktrist.AsBoolean := NewValue;
end;

function TVoditelj._Get_M_cvet_avto: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'cvet_avto', 60, TBAString));
  Result := TBAString(BoldMembers[60]);
end;

function TVoditelj._Getcvet_avto: String;
begin
  Result := M_cvet_avto.AsString;
end;

procedure TVoditelj._Setcvet_avto(const NewValue: String);
begin
  M_cvet_avto.AsString := NewValue;
end;

function TVoditelj._Get_M_tip_nomer_racii: TBAString;
begin
  assert(ValidateMember('TVoditelj', 'tip_nomer_racii', 61, TBAString));
  Result := TBAString(BoldMembers[61]);
end;

function TVoditelj._Gettip_nomer_racii: String;
begin
  Result := M_tip_nomer_racii.AsString;
end;

procedure TVoditelj._Settip_nomer_racii(const NewValue: String);
begin
  M_tip_nomer_racii.AsString := NewValue;
end;

function TVoditelj._Get_M_Individ_procent: TBAFloat;
begin
  assert(ValidateMember('TVoditelj', 'Individ_procent', 62, TBAFloat));
  Result := TBAFloat(BoldMembers[62]);
end;

function TVoditelj._GetIndivid_procent: double;
begin
  Result := M_Individ_procent.AsFloat;
end;

procedure TVoditelj._SetIndivid_procent(const NewValue: double);
begin
  M_Individ_procent.AsFloat := NewValue;
end;

function TVoditelj._Getvypolnyaet_zakazy: TZakazList;
begin
  assert(ValidateMember('TVoditelj', 'vypolnyaet_zakazy', 63, TZakazList));
  Result := TZakazList(BoldMembers[63]);
end;

function TVoditelj._Get_M_rabotaet_na: TBoldObjectReference;
begin
  assert(ValidateMember('TVoditelj', 'rabotaet_na', 64, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[64]);
end;

function TVoditelj._Getrabotaet_na: TMashina;
begin
  assert(not assigned(M_rabotaet_na.BoldObject) or (M_rabotaet_na.BoldObject is TMashina), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'rabotaet_na', M_rabotaet_na.BoldObject.ClassName, 'TMashina']));
  Result := TMashina(M_rabotaet_na.BoldObject);
end;

procedure TVoditelj._Setrabotaet_na(const value: TMashina);
begin
  M_rabotaet_na.BoldObject := value;
end;

function TVoditelj._Getprinosit_dohod: TVyruchka_ot_voditelyaList;
begin
  assert(ValidateMember('TVoditelj', 'prinosit_dohod', 65, TVyruchka_ot_voditelyaList));
  Result := TVyruchka_ot_voditelyaList(BoldMembers[65]);
end;

function TVoditelj._Get_M_chem_uchityvaetsya_voditelj: TBoldObjectReference;
begin
  assert(ValidateMember('TVoditelj', 'chem_uchityvaetsya_voditelj', 66, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[66]);
end;

function TVoditelj._Getchem_uchityvaetsya_voditelj: TObjekt_vyborki_otchyotnosti;
begin
  assert(not assigned(M_chem_uchityvaetsya_voditelj.BoldObject) or (M_chem_uchityvaetsya_voditelj.BoldObject is TObjekt_vyborki_otchyotnosti), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'chem_uchityvaetsya_voditelj', M_chem_uchityvaetsya_voditelj.BoldObject.ClassName, 'TObjekt_vyborki_otchyotnosti']));
  Result := TObjekt_vyborki_otchyotnosti(M_chem_uchityvaetsya_voditelj.BoldObject);
end;

procedure TVoditelj._Setchem_uchityvaetsya_voditelj(const value: TObjekt_vyborki_otchyotnosti);
begin
  M_chem_uchityvaetsya_voditelj.BoldObject := value;
end;

function TVoditelj._Get_M_rabotaet_na_sektore: TBoldObjectReference;
begin
  assert(ValidateMember('TVoditelj', 'rabotaet_na_sektore', 67, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[67]);
end;

function TVoditelj._Getrabotaet_na_sektore: TSektor_raboty;
begin
  assert(not assigned(M_rabotaet_na_sektore.BoldObject) or (M_rabotaet_na_sektore.BoldObject is TSektor_raboty), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'rabotaet_na_sektore', M_rabotaet_na_sektore.BoldObject.ClassName, 'TSektor_raboty']));
  Result := TSektor_raboty(M_rabotaet_na_sektore.BoldObject);
end;

procedure TVoditelj._Setrabotaet_na_sektore(const value: TSektor_raboty);
begin
  M_rabotaet_na_sektore.BoldObject := value;
end;

function TVoditelj._Get_M_otnositsya_k_gruppe: TBoldObjectReference;
begin
  assert(ValidateMember('TVoditelj', 'otnositsya_k_gruppe', 68, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[68]);
end;

function TVoditelj._Getotnositsya_k_gruppe: TGruppa_voditelei;
begin
  assert(not assigned(M_otnositsya_k_gruppe.BoldObject) or (M_otnositsya_k_gruppe.BoldObject is TGruppa_voditelei), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'otnositsya_k_gruppe', M_otnositsya_k_gruppe.BoldObject.ClassName, 'TGruppa_voditelei']));
  Result := TGruppa_voditelei(M_otnositsya_k_gruppe.BoldObject);
end;

procedure TVoditelj._Setotnositsya_k_gruppe(const value: TGruppa_voditelei);
begin
  M_otnositsya_k_gruppe.BoldObject := value;
end;

procedure TVoditeljList.Add(NewObject: TVoditelj);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TVoditeljList.IndexOf(anObject: TVoditelj): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TVoditeljList.Includes(anObject: TVoditelj) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TVoditeljList.AddNew: TVoditelj;
begin
  result := TVoditelj(InternalAddNew);
end;

procedure TVoditeljList.Insert(index: Integer; NewObject: TVoditelj);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TVoditeljList.GetBoldObject(index: Integer): TVoditelj;
begin
  result := TVoditelj(GetElement(index));
end;

procedure TVoditeljList.SetBoldObject(index: Integer; NewObject: TVoditelj);
begin;
  SetElement(index, NewObject);
end;

{ TPersonal }

function TPersonal._Get_M_Login: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Login', 26, TBAString));
  Result := TBAString(BoldMembers[26]);
end;

function TPersonal._GetLogin: String;
begin
  Result := M_Login.AsString;
end;

procedure TPersonal._SetLogin(const NewValue: String);
begin
  M_Login.AsString := NewValue;
end;

function TPersonal._Get_M_Parolj: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Parolj', 27, TBAString));
  Result := TBAString(BoldMembers[27]);
end;

function TPersonal._GetParolj: String;
begin
  Result := M_Parolj.AsString;
end;

procedure TPersonal._SetParolj(const NewValue: String);
begin
  M_Parolj.AsString := NewValue;
end;

function TPersonal._Get_M_Prava: TBAInteger;
begin
  assert(ValidateMember('TPersonal', 'Prava', 28, TBAInteger));
  Result := TBAInteger(BoldMembers[28]);
end;

function TPersonal._GetPrava: Integer;
begin
  Result := M_Prava.AsInteger;
end;

procedure TPersonal._SetPrava(const NewValue: Integer);
begin
  M_Prava.AsInteger := NewValue;
end;

function TPersonal._Get_M_Kommentarii: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Kommentarii', 29, TBAString));
  Result := TBAString(BoldMembers[29]);
end;

function TPersonal._GetKommentarii: String;
begin
  Result := M_Kommentarii.AsString;
end;

procedure TPersonal._SetKommentarii(const NewValue: String);
begin
  M_Kommentarii.AsString := NewValue;
end;

function TPersonal._Get_M_Razreshitj_vsyo: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_vsyo', 30, TBABoolean));
  Result := TBABoolean(BoldMembers[30]);
end;

function TPersonal._GetRazreshitj_vsyo: Boolean;
begin
  Result := M_Razreshitj_vsyo.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_vsyo(const NewValue: Boolean);
begin
  M_Razreshitj_vsyo.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razresh_administr: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razresh_administr', 31, TBABoolean));
  Result := TBABoolean(BoldMembers[31]);
end;

function TPersonal._GetRazresh_administr: Boolean;
begin
  Result := M_Razresh_administr.AsBoolean;
end;

procedure TPersonal._SetRazresh_administr(const NewValue: Boolean);
begin
  M_Razresh_administr.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razresh_nastroiku_raboty: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razresh_nastroiku_raboty', 32, TBABoolean));
  Result := TBABoolean(BoldMembers[32]);
end;

function TPersonal._GetRazresh_nastroiku_raboty: Boolean;
begin
  Result := M_Razresh_nastroiku_raboty.AsBoolean;
end;

procedure TPersonal._SetRazresh_nastroiku_raboty(const NewValue: Boolean);
begin
  M_Razresh_nastroiku_raboty.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_prosmotr_logov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_prosmotr_logov', 33, TBABoolean));
  Result := TBABoolean(BoldMembers[33]);
end;

function TPersonal._GetRazreshitj_prosmotr_logov: Boolean;
begin
  Result := M_Razreshitj_prosmotr_logov.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_prosmotr_logov(const NewValue: Boolean);
begin
  M_Razreshitj_prosmotr_logov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_rabotu_s_arhivom: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_rabotu_s_arhivom', 34, TBABoolean));
  Result := TBABoolean(BoldMembers[34]);
end;

function TPersonal._GetRazr_rabotu_s_arhivom: Boolean;
begin
  Result := M_Razr_rabotu_s_arhivom.AsBoolean;
end;

procedure TPersonal._SetRazr_rabotu_s_arhivom(const NewValue: Boolean);
begin
  M_Razr_rabotu_s_arhivom.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_udalenie_vypuskov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_udalenie_vypuskov', 35, TBABoolean));
  Result := TBABoolean(BoldMembers[35]);
end;

function TPersonal._GetRazreshitj_udalenie_vypuskov: Boolean;
begin
  Result := M_Razreshitj_udalenie_vypuskov.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_udalenie_vypuskov(const NewValue: Boolean);
begin
  M_Razreshitj_udalenie_vypuskov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_udalenie_razdelov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_udalenie_razdelov', 36, TBABoolean));
  Result := TBABoolean(BoldMembers[36]);
end;

function TPersonal._GetRazr_udalenie_razdelov: Boolean;
begin
  Result := M_Razr_udalenie_razdelov.AsBoolean;
end;

procedure TPersonal._SetRazr_udalenie_razdelov(const NewValue: Boolean);
begin
  M_Razr_udalenie_razdelov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_udalenie_objyavlenii: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_udalenie_objyavlenii', 37, TBABoolean));
  Result := TBABoolean(BoldMembers[37]);
end;

function TPersonal._GetRazreshitj_udalenie_objyavlenii: Boolean;
begin
  Result := M_Razreshitj_udalenie_objyavlenii.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_udalenie_objyavlenii(const NewValue: Boolean);
begin
  M_Razreshitj_udalenie_objyavlenii.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razreshitj_udalenie_ostaljnogo: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razreshitj_udalenie_ostaljnogo', 38, TBABoolean));
  Result := TBABoolean(BoldMembers[38]);
end;

function TPersonal._GetRazreshitj_udalenie_ostaljnogo: Boolean;
begin
  Result := M_Razreshitj_udalenie_ostaljnogo.AsBoolean;
end;

procedure TPersonal._SetRazreshitj_udalenie_ostaljnogo(const NewValue: Boolean);
begin
  M_Razreshitj_udalenie_ostaljnogo.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_prav_redkomen_sprav: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_prav_redkomen_sprav', 39, TBABoolean));
  Result := TBABoolean(BoldMembers[39]);
end;

function TPersonal._GetRazr_prav_redkomen_sprav: Boolean;
begin
  Result := M_Razr_prav_redkomen_sprav.AsBoolean;
end;

procedure TPersonal._SetRazr_prav_redkomen_sprav(const NewValue: Boolean);
begin
  M_Razr_prav_redkomen_sprav.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Razr_prav_oper_razdelov: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Razr_prav_oper_razdelov', 40, TBABoolean));
  Result := TBABoolean(BoldMembers[40]);
end;

function TPersonal._GetRazr_prav_oper_razdelov: Boolean;
begin
  Result := M_Razr_prav_oper_razdelov.AsBoolean;
end;

procedure TPersonal._SetRazr_prav_oper_razdelov(const NewValue: Boolean);
begin
  M_Razr_prav_oper_razdelov.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Ident_dispetchera: TBAInteger;
begin
  assert(ValidateMember('TPersonal', 'Ident_dispetchera', 41, TBAInteger));
  Result := TBAInteger(BoldMembers[41]);
end;

function TPersonal._GetIdent_dispetchera: Integer;
begin
  Result := M_Ident_dispetchera.AsInteger;
end;

procedure TPersonal._SetIdent_dispetchera(const NewValue: Integer);
begin
  M_Ident_dispetchera.AsInteger := NewValue;
end;

function TPersonal._Get_M_Imya_dispetchera: TBAString;
begin
  assert(ValidateMember('TPersonal', 'Imya_dispetchera', 42, TBAString));
  Result := TBAString(BoldMembers[42]);
end;

function TPersonal._GetImya_dispetchera: String;
begin
  Result := M_Imya_dispetchera.AsString;
end;

procedure TPersonal._SetImya_dispetchera(const NewValue: String);
begin
  M_Imya_dispetchera.AsString := NewValue;
end;

function TPersonal._Get_M_Estj_otpravlennye: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Estj_otpravlennye', 43, TBABoolean));
  Result := TBABoolean(BoldMembers[43]);
end;

function TPersonal._GetEstj_otpravlennye: Boolean;
begin
  Result := M_Estj_otpravlennye.AsBoolean;
end;

procedure TPersonal._SetEstj_otpravlennye(const NewValue: Boolean);
begin
  M_Estj_otpravlennye.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Estj_nachatye: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Estj_nachatye', 44, TBABoolean));
  Result := TBABoolean(BoldMembers[44]);
end;

function TPersonal._GetEstj_nachatye: Boolean;
begin
  Result := M_Estj_nachatye.AsBoolean;
end;

procedure TPersonal._SetEstj_nachatye(const NewValue: Boolean);
begin
  M_Estj_nachatye.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Nachalo_intervala: TBADateTime;
begin
  assert(ValidateMember('TPersonal', 'Nachalo_intervala', 45, TBADateTime));
  Result := TBADateTime(BoldMembers[45]);
end;

function TPersonal._GetNachalo_intervala: TDateTime;
begin
  Result := M_Nachalo_intervala.AsDateTime;
end;

function TPersonal._Get_M_Konec_intervala: TBADateTime;
begin
  assert(ValidateMember('TPersonal', 'Konec_intervala', 46, TBADateTime));
  Result := TBADateTime(BoldMembers[46]);
end;

function TPersonal._GetKonec_intervala: TDateTime;
begin
  Result := M_Konec_intervala.AsDateTime;
end;

function TPersonal._Get_M_Zayav_za_interval: TBAInteger;
begin
  assert(ValidateMember('TPersonal', 'Zayav_za_interval', 47, TBAInteger));
  Result := TBAInteger(BoldMembers[47]);
end;

function TPersonal._GetZayav_za_interval: Integer;
begin
  Result := M_Zayav_za_interval.AsInteger;
end;

function TPersonal._Get_M_Summa_za_interval: TBAFloat;
begin
  assert(ValidateMember('TPersonal', 'Summa_za_interval', 48, TBAFloat));
  Result := TBAFloat(BoldMembers[48]);
end;

function TPersonal._GetSumma_za_interval: double;
begin
  Result := M_Summa_za_interval.AsFloat;
end;

function TPersonal._Get_M_HasRefreshData: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'HasRefreshData', 49, TBABoolean));
  Result := TBABoolean(BoldMembers[49]);
end;

function TPersonal._GetHasRefreshData: Boolean;
begin
  Result := M_HasRefreshData.AsBoolean;
end;

procedure TPersonal._SetHasRefreshData(const NewValue: Boolean);
begin
  M_HasRefreshData.AsBoolean := NewValue;
end;

function TPersonal._Get_M_UserEntered: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'UserEntered', 50, TBABoolean));
  Result := TBABoolean(BoldMembers[50]);
end;

function TPersonal._GetUserEntered: Boolean;
begin
  Result := M_UserEntered.AsBoolean;
end;

procedure TPersonal._SetUserEntered(const NewValue: Boolean);
begin
  M_UserEntered.AsBoolean := NewValue;
end;

function TPersonal._Get_M_EstjVneshnieManip: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'EstjVneshnieManip', 51, TBABoolean));
  Result := TBABoolean(BoldMembers[51]);
end;

function TPersonal._GetEstjVneshnieManip: Boolean;
begin
  Result := M_EstjVneshnieManip.AsBoolean;
end;

procedure TPersonal._SetEstjVneshnieManip(const NewValue: Boolean);
begin
  M_EstjVneshnieManip.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Rolj_dispetchera: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Rolj_dispetchera', 52, TBABoolean));
  Result := TBABoolean(BoldMembers[52]);
end;

function TPersonal._GetRolj_dispetchera: Boolean;
begin
  Result := M_Rolj_dispetchera.AsBoolean;
end;

procedure TPersonal._SetRolj_dispetchera(const NewValue: Boolean);
begin
  M_Rolj_dispetchera.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Vidit_vseh: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Vidit_vseh', 53, TBABoolean));
  Result := TBABoolean(BoldMembers[53]);
end;

function TPersonal._GetVidit_vseh: Boolean;
begin
  Result := M_Vidit_vseh.AsBoolean;
end;

procedure TPersonal._SetVidit_vseh(const NewValue: Boolean);
begin
  M_Vidit_vseh.AsBoolean := NewValue;
end;

function TPersonal._Get_M_Prover_vodit: TBABoolean;
begin
  assert(ValidateMember('TPersonal', 'Prover_vodit', 54, TBABoolean));
  Result := TBABoolean(BoldMembers[54]);
end;

function TPersonal._GetProver_vodit: Boolean;
begin
  Result := M_Prover_vodit.AsBoolean;
end;

procedure TPersonal._SetProver_vodit(const NewValue: Boolean);
begin
  M_Prover_vodit.AsBoolean := NewValue;
end;

function TPersonal._Getdeistviya_fiksiruyutsya_v: TLog_operaciiList;
begin
  assert(ValidateMember('TPersonal', 'deistviya_fiksiruyutsya_v', 55, TLog_operaciiList));
  Result := TLog_operaciiList(BoldMembers[55]);
end;

function TPersonal._Getperechenj_zakazov: TZakazList;
begin
  assert(ValidateMember('TPersonal', 'perechenj_zakazov', 56, TZakazList));
  Result := TZakazList(BoldMembers[56]);
end;

function TPersonal._Get_M_chem_uchityvaetsya_dispetcher: TBoldObjectReference;
begin
  assert(ValidateMember('TPersonal', 'chem_uchityvaetsya_dispetcher', 57, TBoldObjectReference));
  Result := TBoldObjectReference(BoldMembers[57]);
end;

function TPersonal._Getchem_uchityvaetsya_dispetcher: TObjekt_vyborki_otchyotnosti;
begin
  assert(not assigned(M_chem_uchityvaetsya_dispetcher.BoldObject) or (M_chem_uchityvaetsya_dispetcher.BoldObject is TObjekt_vyborki_otchyotnosti), SysUtils.format(BoldMemberAssertInvalidObjectType, [ClassName, 'chem_uchityvaetsya_dispetcher', M_chem_uchityvaetsya_dispetcher.BoldObject.ClassName, 'TObjekt_vyborki_otchyotnosti']));
  Result := TObjekt_vyborki_otchyotnosti(M_chem_uchityvaetsya_dispetcher.BoldObject);
end;

procedure TPersonal._Setchem_uchityvaetsya_dispetcher(const value: TObjekt_vyborki_otchyotnosti);
begin
  M_chem_uchityvaetsya_dispetcher.BoldObject := value;
end;

function TPersonal._Getotpravil_zakazy: TZakazList;
begin
  assert(ValidateMember('TPersonal', 'otpravil_zakazy', 58, TZakazList));
  Result := TZakazList(BoldMembers[58]);
end;

function TPersonal._Getimeet_vhody: TVhody_poljzList;
begin
  assert(ValidateMember('TPersonal', 'imeet_vhody', 59, TVhody_poljzList));
  Result := TVhody_poljzList(BoldMembers[59]);
end;

procedure TPersonalList.Add(NewObject: TPersonal);
begin
  if Assigned(NewObject) then
    AddElement(NewObject);
end;

function TPersonalList.IndexOf(anObject: TPersonal): Integer;
begin
  result := IndexOfElement(anObject);
end;

function TPersonalList.Includes(anObject: TPersonal) : Boolean;
begin
  result := IncludesElement(anObject);
end;

function TPersonalList.AddNew: TPersonal;
begin
  result := TPersonal(InternalAddNew);
end;

procedure TPersonalList.Insert(index: Integer; NewObject: TPersonal);
begin
  if assigned(NewObject) then
    InsertElement(index, NewObject);
end;

function TPersonalList.GetBoldObject(index: Integer): TPersonal;
begin
  result := TPersonal(GetElement(index));
end;

procedure TPersonalList.SetBoldObject(index: Integer; NewObject: TPersonal);
begin;
  SetElement(index, NewObject);
end;

function GeneratedCodeCRC: String;
begin
  result := '1189604120';
end;

procedure InstallObjectListClasses(BoldObjectListClasses: TBoldGeneratedClassList);
begin
  BoldObjectListClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRootList);
  BoldObjectListClasses.AddObjectEntry('Balans', TBalansList);
  BoldObjectListClasses.AddObjectEntry('Vhody_poljz', TVhody_poljzList);
  BoldObjectListClasses.AddObjectEntry('Klass_poiska', TKlass_poiskaList);
  BoldObjectListClasses.AddObjectEntry('Log_operacii', TLog_operaciiList);
  BoldObjectListClasses.AddObjectEntry('Objekt_vyborki_otchyotnosti', TObjekt_vyborki_otchyotnostiList);
  BoldObjectListClasses.AddObjectEntry('Operaciya', TOperaciyaList);
  BoldObjectListClasses.AddObjectEntry('Persona', TPersonaList);
  BoldObjectListClasses.AddObjectEntry('Plohie_klienty', TPlohie_klientyList);
  BoldObjectListClasses.AddObjectEntry('Prihod', TPrihodList);
  BoldObjectListClasses.AddObjectEntry('Rashod', TRashodList);
  BoldObjectListClasses.AddObjectEntry('Sootvetstvie_parametrov_zakaza', TSootvetstvie_parametrov_zakazaList);
  BoldObjectListClasses.AddObjectEntry('Spravochnik', TSpravochnikList);
  BoldObjectListClasses.AddObjectEntry('Spravochnik_grupp_vypuskov', TSpravochnik_grupp_vypuskovList);
  BoldObjectListClasses.AddObjectEntry('Shablon_zakaza', TShablon_zakazaList);
  BoldObjectListClasses.AddObjectEntry('Organizaciya', TOrganizaciyaList);
  BoldObjectListClasses.AddObjectEntry('Vyruchka_ot_voditelya', TVyruchka_ot_voditelyaList);
  BoldObjectListClasses.AddObjectEntry('Gruppa_voditelei', TGruppa_voditeleiList);
  BoldObjectListClasses.AddObjectEntry('Mashina', TMashinaList);
  BoldObjectListClasses.AddObjectEntry('Objekt', TObjektList);
  BoldObjectListClasses.AddObjectEntry('Raion', TRaionList);
  BoldObjectListClasses.AddObjectEntry('Sektor_raboty', TSektor_rabotyList);
  BoldObjectListClasses.AddObjectEntry('Stoimostj', TStoimostjList);
  BoldObjectListClasses.AddObjectEntry('Ulica', TUlicaList);
  BoldObjectListClasses.AddObjectEntry('Zakaz', TZakazList);
  BoldObjectListClasses.AddObjectEntry('Voditelj', TVoditeljList);
  BoldObjectListClasses.AddObjectEntry('Personal', TPersonalList);
end;

procedure InstallBusinessClasses(BoldObjectClasses: TBoldGeneratedClassList);
begin
  BoldObjectClasses.AddObjectEntry('BusinessClassesRoot', TBusinessClassesRoot);
  BoldObjectClasses.AddObjectEntry('Balans', TBalans);
  BoldObjectClasses.AddObjectEntry('Vhody_poljz', TVhody_poljz);
  BoldObjectClasses.AddObjectEntry('Klass_poiska', TKlass_poiska);
  BoldObjectClasses.AddObjectEntry('Log_operacii', TLog_operacii);
  BoldObjectClasses.AddObjectEntry('Objekt_vyborki_otchyotnosti', TObjekt_vyborki_otchyotnosti);
  BoldObjectClasses.AddObjectEntry('Operaciya', TOperaciya);
  BoldObjectClasses.AddObjectEntry('Persona', TPersona);
  BoldObjectClasses.AddObjectEntry('Plohie_klienty', TPlohie_klienty);
  BoldObjectClasses.AddObjectEntry('Prihod', TPrihod);
  BoldObjectClasses.AddObjectEntry('Rashod', TRashod);
  BoldObjectClasses.AddObjectEntry('Sootvetstvie_parametrov_zakaza', TSootvetstvie_parametrov_zakaza);
  BoldObjectClasses.AddObjectEntry('Spravochnik', TSpravochnik);
  BoldObjectClasses.AddObjectEntry('Spravochnik_grupp_vypuskov', TSpravochnik_grupp_vypuskov);
  BoldObjectClasses.AddObjectEntry('Shablon_zakaza', TShablon_zakaza);
  BoldObjectClasses.AddObjectEntry('Organizaciya', TOrganizaciya);
  BoldObjectClasses.AddObjectEntry('Vyruchka_ot_voditelya', TVyruchka_ot_voditelya);
  BoldObjectClasses.AddObjectEntry('Gruppa_voditelei', TGruppa_voditelei);
  BoldObjectClasses.AddObjectEntry('Mashina', TMashina);
  BoldObjectClasses.AddObjectEntry('Objekt', TObjekt);
  BoldObjectClasses.AddObjectEntry('Raion', TRaion);
  BoldObjectClasses.AddObjectEntry('Sektor_raboty', TSektor_raboty);
  BoldObjectClasses.AddObjectEntry('Stoimostj', TStoimostj);
  BoldObjectClasses.AddObjectEntry('Ulica', TUlica);
  BoldObjectClasses.AddObjectEntry('Zakaz', TZakaz);
  BoldObjectClasses.AddObjectEntry('Voditelj', TVoditelj);
  BoldObjectClasses.AddObjectEntry('Personal', TPersonal);
end;

var
  CodeDescriptor: TBoldGeneratedCodeDescriptor;

initialization
  CodeDescriptor := GeneratedCodes.AddGeneratedCodeDescriptorWithFunc('BusinessClasses', InstallBusinessClasses, InstallObjectListClasses, GeneratedCodeCRC);
finalization
  GeneratedCodes.Remove(CodeDescriptor);
end.

