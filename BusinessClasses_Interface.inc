(*****************************************)
(*      This file is autogenerated       *)
(*   Any manual changes will be LOST!    *)
(*****************************************)
(* Generated 30.11.2006 12:31:56         *)
(*****************************************)
(* This file should be stored in the     *)
(* same directory as the form/datamodule *)
(* with the corresponding model          *)
(*****************************************)
(* Copyright notice:                     *)
(*                                       *)
(*****************************************)

{$IFNDEF BusinessClasses_Interface.inc}
{$DEFINE BusinessClasses_Interface.inc}

{$IFNDEF BusinessClasses_unitheader}
unit BusinessClasses;
{$ENDIF}

interface

uses
  // interface uses
  // interface dependencies
  // attribute classes
  BoldAttributes,
  // other
  Classes,
  Controls, // for TDate
  SysUtils,
  BoldDefs,
  BoldSubscription,
  BoldDeriver,
  BoldElements,
  BoldDomainElement,
  BoldSystemRT,
  BoldSystem;

type
  { forward declarations of all classes }

  TBusinessClassesRoot = class;
  TBusinessClassesRootList = class;
  TBalans = class;
  TBalansList = class;
  TVhody_poljz = class;
  TVhody_poljzList = class;
  TKlass_poiska = class;
  TKlass_poiskaList = class;
  TLog_operacii = class;
  TLog_operaciiList = class;
  TObjekt_vyborki_otchyotnosti = class;
  TObjekt_vyborki_otchyotnostiList = class;
  TOperaciya = class;
  TOperaciyaList = class;
  TPersona = class;
  TPersonaList = class;
  TPlohie_klienty = class;
  TPlohie_klientyList = class;
  TPrihod = class;
  TPrihodList = class;
  TRashod = class;
  TRashodList = class;
  TSootvetstvie_parametrov_zakaza = class;
  TSootvetstvie_parametrov_zakazaList = class;
  TSpravochnik = class;
  TSpravochnikList = class;
  TSpravochnik_grupp_vypuskov = class;
  TSpravochnik_grupp_vypuskovList = class;
  TShablon_zakaza = class;
  TShablon_zakazaList = class;
  TOrganizaciya = class;
  TOrganizaciyaList = class;
  TVyruchka_ot_voditelya = class;
  TVyruchka_ot_voditelyaList = class;
  TGruppa_voditelei = class;
  TGruppa_voditeleiList = class;
  TMashina = class;
  TMashinaList = class;
  TObjekt = class;
  TObjektList = class;
  TRaion = class;
  TRaionList = class;
  TSektor_raboty = class;
  TSektor_rabotyList = class;
  TStoimostj = class;
  TStoimostjList = class;
  TUlica = class;
  TUlicaList = class;
  TZakaz = class;
  TZakazList = class;
  TVoditelj = class;
  TVoditeljList = class;
  TPersonal = class;
  TPersonalList = class;

  TBusinessClassesRoot = class(TBoldObject)
  private
  protected
  public
  end;

  TBalans = class(TBusinessClassesRoot)
  private
    function _Get_M_Balans: TBAFloat;
    function _GetBalans: double;
    function _Get_M_Balans_na_datu: TBAFloat;
    function _GetBalans_na_datu: double;
    function _Get_M_Data_vych_balansa: TBADateTime;
    function _GetData_vych_balansa: TDateTime;
    procedure _SetData_vych_balansa(const NewValue: TDateTime);
    function _Getimeet_rashody: TRashodList;
    function _Getimeet_prihody: TPrihodList;
  protected
  public
    property M_Balans: TBAFloat read _Get_M_Balans;
    property M_Balans_na_datu: TBAFloat read _Get_M_Balans_na_datu;
    property M_Data_vych_balansa: TBADateTime read _Get_M_Data_vych_balansa;
    property M_imeet_rashody: TRashodList read _Getimeet_rashody;
    property M_imeet_prihody: TPrihodList read _Getimeet_prihody;
    property Balans: double read _GetBalans;
    property Balans_na_datu: double read _GetBalans_na_datu;
    property Data_vych_balansa: TDateTime read _GetData_vych_balansa write _SetData_vych_balansa;
    property imeet_rashody: TRashodList read _Getimeet_rashody;
    property imeet_prihody: TPrihodList read _Getimeet_prihody;
  end;

  TVhody_poljz = class(TBusinessClassesRoot)
  private
    function _Get_M_Data: TBADateTime;
    function _GetData: TDateTime;
    procedure _SetData(const NewValue: TDateTime);
    function _Get_M_Vhod: TBABoolean;
    function _GetVhod: Boolean;
    procedure _SetVhod(const NewValue: Boolean);
    function _Get_M_Vyhod: TBABoolean;
    function _GetVyhod: Boolean;
    procedure _SetVyhod(const NewValue: Boolean);
    function _Get_M_V_roli_operatora: TBABoolean;
    function _GetV_roli_operatora: Boolean;
    procedure _SetV_roli_operatora(const NewValue: Boolean);
    function _Get_M_V_roli_dispetchera: TBABoolean;
    function _GetV_roli_dispetchera: Boolean;
    procedure _SetV_roli_dispetchera(const NewValue: Boolean);
    function _Get_M_Skoljko_chasov: TBAFloat;
    function _GetSkoljko_chasov: double;
    function _Getyavl_vhodom_poljz: TPersonal;
    function _Get_M_yavl_vhodom_poljz: TBoldObjectReference;
    procedure _Setyavl_vhodom_poljz(const value: TPersonal);
  protected
  public
    property M_Data: TBADateTime read _Get_M_Data;
    property M_Vhod: TBABoolean read _Get_M_Vhod;
    property M_Vyhod: TBABoolean read _Get_M_Vyhod;
    property M_V_roli_operatora: TBABoolean read _Get_M_V_roli_operatora;
    property M_V_roli_dispetchera: TBABoolean read _Get_M_V_roli_dispetchera;
    property M_Skoljko_chasov: TBAFloat read _Get_M_Skoljko_chasov;
    property M_yavl_vhodom_poljz: TBoldObjectReference read _Get_M_yavl_vhodom_poljz;
    property Data: TDateTime read _GetData write _SetData;
    property Vhod: Boolean read _GetVhod write _SetVhod;
    property Vyhod: Boolean read _GetVyhod write _SetVyhod;
    property V_roli_operatora: Boolean read _GetV_roli_operatora write _SetV_roli_operatora;
    property V_roli_dispetchera: Boolean read _GetV_roli_dispetchera write _SetV_roli_dispetchera;
    property Skoljko_chasov: double read _GetSkoljko_chasov;
    property yavl_vhodom_poljz: TPersonal read _Getyavl_vhodom_poljz write _Setyavl_vhodom_poljz;
  end;

  TKlass_poiska = class(TBusinessClassesRoot)
  private
    function _Get_M_Iskatj_po_klientu: TBABoolean;
    function _GetIskatj_po_klientu: Boolean;
    procedure _SetIskatj_po_klientu(const NewValue: Boolean);
    function _Get_M_Imya_klienta: TBAString;
    function _GetImya_klienta: String;
    procedure _SetImya_klienta(const NewValue: String);
    function _Get_M_Familiya_klienta: TBAString;
    function _GetFamiliya_klienta: String;
    function _Get_M_Otchestvo_klienta: TBAString;
    function _GetOtchestvo_klienta: String;
    procedure _SetOtchestvo_klienta(const NewValue: String);
    function _Get_M_Iskatj_po_klyuch_slovam: TBABoolean;
    function _GetIskatj_po_klyuch_slovam: Boolean;
    procedure _SetIskatj_po_klyuch_slovam(const NewValue: Boolean);
    function _Get_M_Klyuch_slovo: TBAString;
    function _GetKlyuch_slovo: String;
    procedure _SetKlyuch_slovo(const NewValue: String);
    function _Get_M_Iskatj_po_date_dob: TBABoolean;
    function _GetIskatj_po_date_dob: Boolean;
    procedure _SetIskatj_po_date_dob(const NewValue: Boolean);
    function _Get_M_S_daty_dob: TBADate;
    function _GetS_daty_dob: TDate;
    procedure _SetS_daty_dob(const NewValue: TDate);
    function _Get_M_Po_datu_dob: TBADate;
    function _GetPo_datu_dob: TDate;
    procedure _SetPo_datu_dob(const NewValue: TDate);
    function _Get_M_Seg_data: TBADate;
    function _GetSeg_data: TDate;
    procedure _SetSeg_data(const NewValue: TDate);
    function _Get_M_Nomer_sled_vyp: TBAInteger;
    function _GetNomer_sled_vyp: Integer;
    procedure _SetNomer_sled_vyp(const NewValue: Integer);
    function _Get_M_God_sled_vyp: TBAInteger;
    function _GetGod_sled_vyp: Integer;
    procedure _SetGod_sled_vyp(const NewValue: Integer);
    function _Get_M_Data_sled_vyp: TBADate;
    function _GetData_sled_vyp: TDate;
    procedure _SetData_sled_vyp(const NewValue: TDate);
    function _Get_M_Iskatj_dvoinikov: TBABoolean;
    function _GetIskatj_dvoinikov: Boolean;
    procedure _SetIskatj_dvoinikov(const NewValue: Boolean);
    function _Get_M_Tek_izdanie_ident: TBAInteger;
    function _GetTek_izdanie_ident: Integer;
    procedure _SetTek_izdanie_ident(const NewValue: Integer);
  protected
    procedure _Familiya_klienta_DeriveAndSubscribe(DerivedObject: TObject; Subscriber: TBoldSubscriber); virtual;
    function GetDeriveMethodForMember(Member: TBoldMember): TBoldDeriveAndResubscribe; override;
    function GetReverseDeriveMethodForMember(Member: TBoldMember): TBoldReverseDerive; override;
  public
    property M_Iskatj_po_klientu: TBABoolean read _Get_M_Iskatj_po_klientu;
    property M_Imya_klienta: TBAString read _Get_M_Imya_klienta;
    property M_Familiya_klienta: TBAString read _Get_M_Familiya_klienta;
    property M_Otchestvo_klienta: TBAString read _Get_M_Otchestvo_klienta;
    property M_Iskatj_po_klyuch_slovam: TBABoolean read _Get_M_Iskatj_po_klyuch_slovam;
    property M_Klyuch_slovo: TBAString read _Get_M_Klyuch_slovo;
    property M_Iskatj_po_date_dob: TBABoolean read _Get_M_Iskatj_po_date_dob;
    property M_S_daty_dob: TBADate read _Get_M_S_daty_dob;
    property M_Po_datu_dob: TBADate read _Get_M_Po_datu_dob;
    property M_Seg_data: TBADate read _Get_M_Seg_data;
    property M_Nomer_sled_vyp: TBAInteger read _Get_M_Nomer_sled_vyp;
    property M_God_sled_vyp: TBAInteger read _Get_M_God_sled_vyp;
    property M_Data_sled_vyp: TBADate read _Get_M_Data_sled_vyp;
    property M_Iskatj_dvoinikov: TBABoolean read _Get_M_Iskatj_dvoinikov;
    property M_Tek_izdanie_ident: TBAInteger read _Get_M_Tek_izdanie_ident;
    property Iskatj_po_klientu: Boolean read _GetIskatj_po_klientu write _SetIskatj_po_klientu;
    property Imya_klienta: String read _GetImya_klienta write _SetImya_klienta;
    property Familiya_klienta: String read _GetFamiliya_klienta;
    property Otchestvo_klienta: String read _GetOtchestvo_klienta write _SetOtchestvo_klienta;
    property Iskatj_po_klyuch_slovam: Boolean read _GetIskatj_po_klyuch_slovam write _SetIskatj_po_klyuch_slovam;
    property Klyuch_slovo: String read _GetKlyuch_slovo write _SetKlyuch_slovo;
    property Iskatj_po_date_dob: Boolean read _GetIskatj_po_date_dob write _SetIskatj_po_date_dob;
    property S_daty_dob: TDate read _GetS_daty_dob write _SetS_daty_dob;
    property Po_datu_dob: TDate read _GetPo_datu_dob write _SetPo_datu_dob;
    property Seg_data: TDate read _GetSeg_data write _SetSeg_data;
    property Nomer_sled_vyp: Integer read _GetNomer_sled_vyp write _SetNomer_sled_vyp;
    property God_sled_vyp: Integer read _GetGod_sled_vyp write _SetGod_sled_vyp;
    property Data_sled_vyp: TDate read _GetData_sled_vyp write _SetData_sled_vyp;
    property Iskatj_dvoinikov: Boolean read _GetIskatj_dvoinikov write _SetIskatj_dvoinikov;
    property Tek_izdanie_ident: Integer read _GetTek_izdanie_ident write _SetTek_izdanie_ident;
  end;

  TLog_operacii = class(TBusinessClassesRoot)
  private
    function _Get_M_Naimenovanie_operacii: TBAString;
    function _GetNaimenovanie_operacii: String;
    procedure _SetNaimenovanie_operacii(const NewValue: String);
    function _Get_M_Subjekt: TBAString;
    function _GetSubjekt: String;
    function _Get_M_Data_i_vremya: TBAString;
    function _GetData_i_vremya: String;
    function _Get_M_Data: TBADate;
    function _GetData: TDate;
    procedure _SetData(const NewValue: TDate);
    function _Get_M_Vremya: TBAString;
    function _GetVremya: String;
    procedure _SetVremya(const NewValue: String);
    function _Getot_deistvii: TPersonal;
    function _Get_M_ot_deistvii: TBoldObjectReference;
    procedure _Setot_deistvii(const value: TPersonal);
  protected
  public
    property M_Naimenovanie_operacii: TBAString read _Get_M_Naimenovanie_operacii;
    property M_Subjekt: TBAString read _Get_M_Subjekt;
    property M_Data_i_vremya: TBAString read _Get_M_Data_i_vremya;
    property M_Data: TBADate read _Get_M_Data;
    property M_Vremya: TBAString read _Get_M_Vremya;
    property M_ot_deistvii: TBoldObjectReference read _Get_M_ot_deistvii;
    property Naimenovanie_operacii: String read _GetNaimenovanie_operacii write _SetNaimenovanie_operacii;
    property Subjekt: String read _GetSubjekt;
    property Data_i_vremya: String read _GetData_i_vremya;
    property Data: TDate read _GetData write _SetData;
    property Vremya: String read _GetVremya write _SetVremya;
    property ot_deistvii: TPersonal read _Getot_deistvii write _Setot_deistvii;
  end;

  TObjekt_vyborki_otchyotnosti = class(TBusinessClassesRoot)
  private
    function _Get_M_Tip_objekta: TBAString;
    function _GetTip_objekta: String;
    procedure _SetTip_objekta(const NewValue: String);
    function _Get_M_Data_nachala: TBADateTime;
    function _GetData_nachala: TDateTime;
    procedure _SetData_nachala(const NewValue: TDateTime);
    function _Get_M_Data_konca: TBADateTime;
    function _GetData_konca: TDateTime;
    procedure _SetData_konca(const NewValue: TDateTime);
    function _Get_M_Procent_otchisleniya: TBAFloat;
    function _GetProcent_otchisleniya: double;
    procedure _SetProcent_otchisleniya(const NewValue: double);
    function _Get_M_Filjtr_pozyvnoi: TBABoolean;
    function _GetFiljtr_pozyvnoi: Boolean;
    procedure _SetFiljtr_pozyvnoi(const NewValue: Boolean);
    function _Get_M_Filjtr_data_nachala: TBADateTime;
    function _GetFiljtr_data_nachala: TDateTime;
    procedure _SetFiljtr_data_nachala(const NewValue: TDateTime);
    function _Get_M_Filjtr_data_konca: TBADateTime;
    function _GetFiljtr_data_konca: TDateTime;
    procedure _SetFiljtr_data_konca(const NewValue: TDateTime);
    function _Get_M_Cvet_prinyatyh: TBAString;
    function _GetCvet_prinyatyh: String;
    procedure _SetCvet_prinyatyh(const NewValue: String);
    function _Get_M_Cvet_nachavshihsya: TBAString;
    function _GetCvet_nachavshihsya: String;
    procedure _SetCvet_nachavshihsya(const NewValue: String);
    function _Get_M_Cvet_okonchivshihsya: TBAString;
    function _GetCvet_okonchivshihsya: String;
    procedure _SetCvet_okonchivshihsya(const NewValue: String);
    function _Get_M_Vybratj_poslednie_nesk_dnei: TBABoolean;
    function _GetVybratj_poslednie_nesk_dnei: Boolean;
    procedure _SetVybratj_poslednie_nesk_dnei(const NewValue: Boolean);
    function _Get_M_Kol_posl_dnei: TBAFloat;
    function _GetKol_posl_dnei: double;
    procedure _SetKol_posl_dnei(const NewValue: double);
    function _Get_M_Posl_data: TBADateTime;
    function _GetPosl_data: TDateTime;
    function _Get_M_Data_minus_vybir_dni: TBADateTime;
    function _GetData_minus_vybir_dni: TDateTime;
    procedure _SetData_minus_vybir_dni(const NewValue: TDateTime);
    function _Get_M_Nomer_pozyvnoi_filjtr: TBAInteger;
    function _GetNomer_pozyvnoi_filjtr: Integer;
    procedure _SetNomer_pozyvnoi_filjtr(const NewValue: Integer);
    function _Get_M_Cvet_predvarit: TBAString;
    function _GetCvet_predvarit: String;
    procedure _SetCvet_predvarit(const NewValue: String);
    function _Get_M_Data_po_umolchaniyu: TBADateTime;
    function _GetData_po_umolchaniyu: TDateTime;
    procedure _SetData_po_umolchaniyu(const NewValue: TDateTime);
    function _Get_M_Avtozapoln_sektorov: TBABoolean;
    function _GetAvtozapoln_sektorov: Boolean;
    procedure _SetAvtozapoln_sektorov(const NewValue: Boolean);
    function _Get_M_Naznach_iz_obsh__spiska: TBABoolean;
    function _GetNaznach_iz_obsh__spiska: Boolean;
    procedure _SetNaznach_iz_obsh__spiska(const NewValue: Boolean);
    function _Get_M_rep_time: TBADateTime;
    function _Getrep_time: TDateTime;
    procedure _Setrep_time(const NewValue: TDateTime);
    function _Get_M_Avtozap_konechn_sekt: TBABoolean;
    function _GetAvtozap_konechn_sekt: Boolean;
    procedure _SetAvtozap_konechn_sekt(const NewValue: Boolean);
    function _Get_M_Avtozap_nach_sektora: TBABoolean;
    function _GetAvtozap_nach_sektora: Boolean;
    procedure _SetAvtozap_nach_sektora(const NewValue: Boolean);
    function _Get_M_Zapros_nach_sektora: TBABoolean;
    function _GetZapros_nach_sektora: Boolean;
    procedure _SetZapros_nach_sektora(const NewValue: Boolean);
    function _Get_M_Zapros_konech_sektora: TBABoolean;
    function _GetZapros_konech_sektora: Boolean;
    procedure _SetZapros_konech_sektora(const NewValue: Boolean);
    function _Get_M_Soobsh_o_netochn_sekt_reg: TBABoolean;
    function _GetSoobsh_o_netochn_sekt_reg: Boolean;
    procedure _SetSoobsh_o_netochn_sekt_reg(const NewValue: Boolean);
    function _Get_M_Prizovoe_kolichestvo_1: TBAInteger;
    function _GetPrizovoe_kolichestvo_1: Integer;
    procedure _SetPrizovoe_kolichestvo_1(const NewValue: Integer);
    function _Get_M_Prizovoe_kolichestvo_2: TBAInteger;
    function _GetPrizovoe_kolichestvo_2: Integer;
    procedure _SetPrizovoe_kolichestvo_2(const NewValue: Integer);
    function _Get_M_Prizovoe_kolichestvo_3: TBAInteger;
    function _GetPrizovoe_kolichestvo_3: Integer;
    procedure _SetPrizovoe_kolichestvo_3(const NewValue: Integer);
    function _Get_M_Koeff_prizov_sbavki_1: TBAFloat;
    function _GetKoeff_prizov_sbavki_1: double;
    procedure _SetKoeff_prizov_sbavki_1(const NewValue: double);
    function _Get_M_Velichina_priz_sbavki_1: TBAFloat;
    function _GetVelichina_priz_sbavki_1: double;
    procedure _SetVelichina_priz_sbavki_1(const NewValue: double);
    function _Get_M_Koeff_prizov_sbavki_2: TBAFloat;
    function _GetKoeff_prizov_sbavki_2: double;
    procedure _SetKoeff_prizov_sbavki_2(const NewValue: double);
    function _Get_M_Velichina_priz_sbavki_2: TBAFloat;
    function _GetVelichina_priz_sbavki_2: double;
    procedure _SetVelichina_priz_sbavki_2(const NewValue: double);
    function _Get_M_Koeff_prizov_sbavki_3: TBAFloat;
    function _GetKoeff_prizov_sbavki_3: double;
    procedure _SetKoeff_prizov_sbavki_3(const NewValue: double);
    function _Get_M_Velichina_priz_sbavki_3: TBAFloat;
    function _GetVelichina_priz_sbavki_3: double;
    procedure _SetVelichina_priz_sbavki_3(const NewValue: double);
    function _Get_M_Ispoljz_priz_1: TBABoolean;
    function _GetIspoljz_priz_1: Boolean;
    procedure _SetIspoljz_priz_1(const NewValue: Boolean);
    function _Get_M_Ispoljz_priz_2: TBABoolean;
    function _GetIspoljz_priz_2: Boolean;
    procedure _SetIspoljz_priz_2(const NewValue: Boolean);
    function _Get_M_Ispoljz_priz_3: TBABoolean;
    function _GetIspoljz_priz_3: Boolean;
    procedure _SetIspoljz_priz_3(const NewValue: Boolean);
    function _Get_M_Regim_dispetchera: TBABoolean;
    function _GetRegim_dispetchera: Boolean;
    procedure _SetRegim_dispetchera(const NewValue: Boolean);
    function _Get_M_Estj_otpravlennye: TBABoolean;
    function _GetEstj_otpravlennye: Boolean;
    procedure _SetEstj_otpravlennye(const NewValue: Boolean);
    function _Get_M_Estj_nachatye: TBABoolean;
    function _GetEstj_nachatye: Boolean;
    procedure _SetEstj_nachatye(const NewValue: Boolean);
    function _Get_M_Ne_uchit_zanyat_drug_disp: TBABoolean;
    function _GetNe_uchit_zanyat_drug_disp: Boolean;
    procedure _SetNe_uchit_zanyat_drug_disp(const NewValue: Boolean);
    function _Get_M_Kolich_deg_grupp: TBAInteger;
    function _GetKolich_deg_grupp: Integer;
    procedure _SetKolich_deg_grupp(const NewValue: Integer);
    function _Get_M_Tek_deg_gruppa: TBAInteger;
    function _GetTek_deg_gruppa: Integer;
    procedure _SetTek_deg_gruppa(const NewValue: Integer);
    function _Get_M_Vr_smeny_deg_grupp: TBAString;
    function _GetVr_smeny_deg_grupp: String;
    procedure _SetVr_smeny_deg_grupp(const NewValue: String);
    function _Get_M_Sutki_deg_gruppy: TBADateTime;
    function _GetSutki_deg_gruppy: TDateTime;
    procedure _SetSutki_deg_gruppy(const NewValue: TDateTime);
    function _Get_M_Per_obnovl_deg: TBAString;
    function _GetPer_obnovl_deg: String;
    procedure _SetPer_obnovl_deg(const NewValue: String);
    function _Get_M_Per_obnovl_obychn_vod: TBAString;
    function _GetPer_obnovl_obychn_vod: String;
    procedure _SetPer_obnovl_obychn_vod(const NewValue: String);
    function _Get_M_Namen_organizacii: TBAString;
    function _GetNamen_organizacii: String;
    procedure _SetNamen_organizacii(const NewValue: String);
    function _Get_M_Putev_list_seriya: TBAString;
    function _GetPutev_list_seriya: String;
    procedure _SetPutev_list_seriya(const NewValue: String);
    function _Get_M_Nom_putevogo_lista: TBAInteger;
    function _GetNom_putevogo_lista: Integer;
    procedure _SetNom_putevogo_lista(const NewValue: Integer);
    function _Get_M_Kolich_vyd_benzina: TBAFloat;
    function _GetKolich_vyd_benzina: double;
    procedure _SetKolich_vyd_benzina(const NewValue: double);
    function _Get_M_Napravlenie_1: TBAString;
    function _GetNapravlenie_1: String;
    procedure _SetNapravlenie_1(const NewValue: String);
    function _Get_M_Napravlenie_2: TBAString;
    function _GetNapravlenie_2: String;
    procedure _SetNapravlenie_2(const NewValue: String);
    function _Get_M_Napravlenie_3: TBAString;
    function _GetNapravlenie_3: String;
    procedure _SetNapravlenie_3(const NewValue: String);
    function _Get_M_Komment_k_rabote: TBAString;
    function _GetKomment_k_rabote: String;
    procedure _SetKomment_k_rabote(const NewValue: String);
    function _Get_M_BetweenStartSet: TBADateTime;
    function _GetBetweenStartSet: TDateTime;
    procedure _SetBetweenStartSet(const NewValue: TDateTime);
    function _Get_M_BetweenSetOn: TBADateTime;
    function _GetBetweenSetOn: TDateTime;
    procedure _SetBetweenSetOn(const NewValue: TDateTime);
    function _Get_M_BetweenOnEnd: TBADateTime;
    function _GetBetweenOnEnd: TDateTime;
    procedure _SetBetweenOnEnd(const NewValue: TDateTime);
    function _Get_M_BetweenStartSetColor: TBAString;
    function _GetBetweenStartSetColor: String;
    procedure _SetBetweenStartSetColor(const NewValue: String);
    function _Get_M_BetweenSetOnColor: TBAString;
    function _GetBetweenSetOnColor: String;
    procedure _SetBetweenSetOnColor(const NewValue: String);
    function _Get_M_BetweenOnEndColor: TBAString;
    function _GetBetweenOnEndColor: String;
    procedure _SetBetweenOnEndColor(const NewValue: String);
    function _Get_M_BetweenSetEnd: TBADateTime;
    function _GetBetweenSetEnd: TDateTime;
    procedure _SetBetweenSetEnd(const NewValue: TDateTime);
    function _Get_M_BetweenSetEndColor: TBAString;
    function _GetBetweenSetEndColor: String;
    procedure _SetBetweenSetEndColor(const NewValue: String);
    function _Get_M_ViewSetEndLong: TBABoolean;
    function _GetViewSetEndLong: Boolean;
    procedure _SetViewSetEndLong(const NewValue: Boolean);
    function _Get_M_obshepriz_chislo: TBAInteger;
    function _Getobshepriz_chislo: Integer;
    procedure _Setobshepriz_chislo(const NewValue: Integer);
    function _Get_M_obshepriz_schyotchik: TBAInteger;
    function _Getobshepriz_schyotchik: Integer;
    procedure _Setobshepriz_schyotchik(const NewValue: Integer);
    function _Get_M_cvet_obshepriz: TBAString;
    function _Getcvet_obshepriz: String;
    procedure _Setcvet_obshepriz(const NewValue: String);
    function _Get_M_cvet_so_skidkoi: TBAString;
    function _Getcvet_so_skidkoi: String;
    procedure _Setcvet_so_skidkoi(const NewValue: String);
    function _Get_M_simv_avtom_ustan: TBABoolean;
    function _Getsimv_avtom_ustan: Boolean;
    procedure _Setsimv_avtom_ustan(const NewValue: Boolean);
    function _Get_M_schit_okon_posl_kon_sekt: TBABoolean;
    function _Getschit_okon_posl_kon_sekt: Boolean;
    procedure _Setschit_okon_posl_kon_sekt(const NewValue: Boolean);
    function _Get_M_vr_smeny_dispetcherov: TBAString;
    function _Getvr_smeny_dispetcherov: String;
    procedure _Setvr_smeny_dispetcherov(const NewValue: String);
    function _Getuchityvaet_voditelya: TVoditeljList;
    function _Getuchityvet_rabotu: TPersonalList;
  protected
  public
    property M_Tip_objekta: TBAString read _Get_M_Tip_objekta;
    property M_Data_nachala: TBADateTime read _Get_M_Data_nachala;
    property M_Data_konca: TBADateTime read _Get_M_Data_konca;
    property M_Procent_otchisleniya: TBAFloat read _Get_M_Procent_otchisleniya;
    property M_Filjtr_pozyvnoi: TBABoolean read _Get_M_Filjtr_pozyvnoi;
    property M_Filjtr_data_nachala: TBADateTime read _Get_M_Filjtr_data_nachala;
    property M_Filjtr_data_konca: TBADateTime read _Get_M_Filjtr_data_konca;
    property M_Cvet_prinyatyh: TBAString read _Get_M_Cvet_prinyatyh;
    property M_Cvet_nachavshihsya: TBAString read _Get_M_Cvet_nachavshihsya;
    property M_Cvet_okonchivshihsya: TBAString read _Get_M_Cvet_okonchivshihsya;
    property M_Vybratj_poslednie_nesk_dnei: TBABoolean read _Get_M_Vybratj_poslednie_nesk_dnei;
    property M_Kol_posl_dnei: TBAFloat read _Get_M_Kol_posl_dnei;
    property M_Posl_data: TBADateTime read _Get_M_Posl_data;
    property M_Data_minus_vybir_dni: TBADateTime read _Get_M_Data_minus_vybir_dni;
    property M_Nomer_pozyvnoi_filjtr: TBAInteger read _Get_M_Nomer_pozyvnoi_filjtr;
    property M_Cvet_predvarit: TBAString read _Get_M_Cvet_predvarit;
    property M_Data_po_umolchaniyu: TBADateTime read _Get_M_Data_po_umolchaniyu;
    property M_Avtozapoln_sektorov: TBABoolean read _Get_M_Avtozapoln_sektorov;
    property M_Naznach_iz_obsh__spiska: TBABoolean read _Get_M_Naznach_iz_obsh__spiska;
    property M_rep_time: TBADateTime read _Get_M_rep_time;
    property M_Avtozap_konechn_sekt: TBABoolean read _Get_M_Avtozap_konechn_sekt;
    property M_Avtozap_nach_sektora: TBABoolean read _Get_M_Avtozap_nach_sektora;
    property M_Zapros_nach_sektora: TBABoolean read _Get_M_Zapros_nach_sektora;
    property M_Zapros_konech_sektora: TBABoolean read _Get_M_Zapros_konech_sektora;
    property M_Soobsh_o_netochn_sekt_reg: TBABoolean read _Get_M_Soobsh_o_netochn_sekt_reg;
    property M_Prizovoe_kolichestvo_1: TBAInteger read _Get_M_Prizovoe_kolichestvo_1;
    property M_Prizovoe_kolichestvo_2: TBAInteger read _Get_M_Prizovoe_kolichestvo_2;
    property M_Prizovoe_kolichestvo_3: TBAInteger read _Get_M_Prizovoe_kolichestvo_3;
    property M_Koeff_prizov_sbavki_1: TBAFloat read _Get_M_Koeff_prizov_sbavki_1;
    property M_Velichina_priz_sbavki_1: TBAFloat read _Get_M_Velichina_priz_sbavki_1;
    property M_Koeff_prizov_sbavki_2: TBAFloat read _Get_M_Koeff_prizov_sbavki_2;
    property M_Velichina_priz_sbavki_2: TBAFloat read _Get_M_Velichina_priz_sbavki_2;
    property M_Koeff_prizov_sbavki_3: TBAFloat read _Get_M_Koeff_prizov_sbavki_3;
    property M_Velichina_priz_sbavki_3: TBAFloat read _Get_M_Velichina_priz_sbavki_3;
    property M_Ispoljz_priz_1: TBABoolean read _Get_M_Ispoljz_priz_1;
    property M_Ispoljz_priz_2: TBABoolean read _Get_M_Ispoljz_priz_2;
    property M_Ispoljz_priz_3: TBABoolean read _Get_M_Ispoljz_priz_3;
    property M_Regim_dispetchera: TBABoolean read _Get_M_Regim_dispetchera;
    property M_Estj_otpravlennye: TBABoolean read _Get_M_Estj_otpravlennye;
    property M_Estj_nachatye: TBABoolean read _Get_M_Estj_nachatye;
    property M_Ne_uchit_zanyat_drug_disp: TBABoolean read _Get_M_Ne_uchit_zanyat_drug_disp;
    property M_Kolich_deg_grupp: TBAInteger read _Get_M_Kolich_deg_grupp;
    property M_Tek_deg_gruppa: TBAInteger read _Get_M_Tek_deg_gruppa;
    property M_Vr_smeny_deg_grupp: TBAString read _Get_M_Vr_smeny_deg_grupp;
    property M_Sutki_deg_gruppy: TBADateTime read _Get_M_Sutki_deg_gruppy;
    property M_Per_obnovl_deg: TBAString read _Get_M_Per_obnovl_deg;
    property M_Per_obnovl_obychn_vod: TBAString read _Get_M_Per_obnovl_obychn_vod;
    property M_Namen_organizacii: TBAString read _Get_M_Namen_organizacii;
    property M_Putev_list_seriya: TBAString read _Get_M_Putev_list_seriya;
    property M_Nom_putevogo_lista: TBAInteger read _Get_M_Nom_putevogo_lista;
    property M_Kolich_vyd_benzina: TBAFloat read _Get_M_Kolich_vyd_benzina;
    property M_Napravlenie_1: TBAString read _Get_M_Napravlenie_1;
    property M_Napravlenie_2: TBAString read _Get_M_Napravlenie_2;
    property M_Napravlenie_3: TBAString read _Get_M_Napravlenie_3;
    property M_Komment_k_rabote: TBAString read _Get_M_Komment_k_rabote;
    property M_BetweenStartSet: TBADateTime read _Get_M_BetweenStartSet;
    property M_BetweenSetOn: TBADateTime read _Get_M_BetweenSetOn;
    property M_BetweenOnEnd: TBADateTime read _Get_M_BetweenOnEnd;
    property M_BetweenStartSetColor: TBAString read _Get_M_BetweenStartSetColor;
    property M_BetweenSetOnColor: TBAString read _Get_M_BetweenSetOnColor;
    property M_BetweenOnEndColor: TBAString read _Get_M_BetweenOnEndColor;
    property M_BetweenSetEnd: TBADateTime read _Get_M_BetweenSetEnd;
    property M_BetweenSetEndColor: TBAString read _Get_M_BetweenSetEndColor;
    property M_ViewSetEndLong: TBABoolean read _Get_M_ViewSetEndLong;
    property M_obshepriz_chislo: TBAInteger read _Get_M_obshepriz_chislo;
    property M_obshepriz_schyotchik: TBAInteger read _Get_M_obshepriz_schyotchik;
    property M_cvet_obshepriz: TBAString read _Get_M_cvet_obshepriz;
    property M_cvet_so_skidkoi: TBAString read _Get_M_cvet_so_skidkoi;
    property M_simv_avtom_ustan: TBABoolean read _Get_M_simv_avtom_ustan;
    property M_schit_okon_posl_kon_sekt: TBABoolean read _Get_M_schit_okon_posl_kon_sekt;
    property M_vr_smeny_dispetcherov: TBAString read _Get_M_vr_smeny_dispetcherov;
    property M_uchityvaet_voditelya: TVoditeljList read _Getuchityvaet_voditelya;
    property M_uchityvet_rabotu: TPersonalList read _Getuchityvet_rabotu;
    property Tip_objekta: String read _GetTip_objekta write _SetTip_objekta;
    property Data_nachala: TDateTime read _GetData_nachala write _SetData_nachala;
    property Data_konca: TDateTime read _GetData_konca write _SetData_konca;
    property Procent_otchisleniya: double read _GetProcent_otchisleniya write _SetProcent_otchisleniya;
    property Filjtr_pozyvnoi: Boolean read _GetFiljtr_pozyvnoi write _SetFiljtr_pozyvnoi;
    property Filjtr_data_nachala: TDateTime read _GetFiljtr_data_nachala write _SetFiljtr_data_nachala;
    property Filjtr_data_konca: TDateTime read _GetFiljtr_data_konca write _SetFiljtr_data_konca;
    property Cvet_prinyatyh: String read _GetCvet_prinyatyh write _SetCvet_prinyatyh;
    property Cvet_nachavshihsya: String read _GetCvet_nachavshihsya write _SetCvet_nachavshihsya;
    property Cvet_okonchivshihsya: String read _GetCvet_okonchivshihsya write _SetCvet_okonchivshihsya;
    property Vybratj_poslednie_nesk_dnei: Boolean read _GetVybratj_poslednie_nesk_dnei write _SetVybratj_poslednie_nesk_dnei;
    property Kol_posl_dnei: double read _GetKol_posl_dnei write _SetKol_posl_dnei;
    property Posl_data: TDateTime read _GetPosl_data;
    property Data_minus_vybir_dni: TDateTime read _GetData_minus_vybir_dni write _SetData_minus_vybir_dni;
    property Nomer_pozyvnoi_filjtr: Integer read _GetNomer_pozyvnoi_filjtr write _SetNomer_pozyvnoi_filjtr;
    property Cvet_predvarit: String read _GetCvet_predvarit write _SetCvet_predvarit;
    property Data_po_umolchaniyu: TDateTime read _GetData_po_umolchaniyu write _SetData_po_umolchaniyu;
    property Avtozapoln_sektorov: Boolean read _GetAvtozapoln_sektorov write _SetAvtozapoln_sektorov;
    property Naznach_iz_obsh__spiska: Boolean read _GetNaznach_iz_obsh__spiska write _SetNaznach_iz_obsh__spiska;
    property rep_time: TDateTime read _Getrep_time write _Setrep_time;
    property Avtozap_konechn_sekt: Boolean read _GetAvtozap_konechn_sekt write _SetAvtozap_konechn_sekt;
    property Avtozap_nach_sektora: Boolean read _GetAvtozap_nach_sektora write _SetAvtozap_nach_sektora;
    property Zapros_nach_sektora: Boolean read _GetZapros_nach_sektora write _SetZapros_nach_sektora;
    property Zapros_konech_sektora: Boolean read _GetZapros_konech_sektora write _SetZapros_konech_sektora;
    property Soobsh_o_netochn_sekt_reg: Boolean read _GetSoobsh_o_netochn_sekt_reg write _SetSoobsh_o_netochn_sekt_reg;
    property Prizovoe_kolichestvo_1: Integer read _GetPrizovoe_kolichestvo_1 write _SetPrizovoe_kolichestvo_1;
    property Prizovoe_kolichestvo_2: Integer read _GetPrizovoe_kolichestvo_2 write _SetPrizovoe_kolichestvo_2;
    property Prizovoe_kolichestvo_3: Integer read _GetPrizovoe_kolichestvo_3 write _SetPrizovoe_kolichestvo_3;
    property Koeff_prizov_sbavki_1: double read _GetKoeff_prizov_sbavki_1 write _SetKoeff_prizov_sbavki_1;
    property Velichina_priz_sbavki_1: double read _GetVelichina_priz_sbavki_1 write _SetVelichina_priz_sbavki_1;
    property Koeff_prizov_sbavki_2: double read _GetKoeff_prizov_sbavki_2 write _SetKoeff_prizov_sbavki_2;
    property Velichina_priz_sbavki_2: double read _GetVelichina_priz_sbavki_2 write _SetVelichina_priz_sbavki_2;
    property Koeff_prizov_sbavki_3: double read _GetKoeff_prizov_sbavki_3 write _SetKoeff_prizov_sbavki_3;
    property Velichina_priz_sbavki_3: double read _GetVelichina_priz_sbavki_3 write _SetVelichina_priz_sbavki_3;
    property Ispoljz_priz_1: Boolean read _GetIspoljz_priz_1 write _SetIspoljz_priz_1;
    property Ispoljz_priz_2: Boolean read _GetIspoljz_priz_2 write _SetIspoljz_priz_2;
    property Ispoljz_priz_3: Boolean read _GetIspoljz_priz_3 write _SetIspoljz_priz_3;
    property Regim_dispetchera: Boolean read _GetRegim_dispetchera write _SetRegim_dispetchera;
    property Estj_otpravlennye: Boolean read _GetEstj_otpravlennye write _SetEstj_otpravlennye;
    property Estj_nachatye: Boolean read _GetEstj_nachatye write _SetEstj_nachatye;
    property Ne_uchit_zanyat_drug_disp: Boolean read _GetNe_uchit_zanyat_drug_disp write _SetNe_uchit_zanyat_drug_disp;
    property Kolich_deg_grupp: Integer read _GetKolich_deg_grupp write _SetKolich_deg_grupp;
    property Tek_deg_gruppa: Integer read _GetTek_deg_gruppa write _SetTek_deg_gruppa;
    property Vr_smeny_deg_grupp: String read _GetVr_smeny_deg_grupp write _SetVr_smeny_deg_grupp;
    property Sutki_deg_gruppy: TDateTime read _GetSutki_deg_gruppy write _SetSutki_deg_gruppy;
    property Per_obnovl_deg: String read _GetPer_obnovl_deg write _SetPer_obnovl_deg;
    property Per_obnovl_obychn_vod: String read _GetPer_obnovl_obychn_vod write _SetPer_obnovl_obychn_vod;
    property Namen_organizacii: String read _GetNamen_organizacii write _SetNamen_organizacii;
    property Putev_list_seriya: String read _GetPutev_list_seriya write _SetPutev_list_seriya;
    property Nom_putevogo_lista: Integer read _GetNom_putevogo_lista write _SetNom_putevogo_lista;
    property Kolich_vyd_benzina: double read _GetKolich_vyd_benzina write _SetKolich_vyd_benzina;
    property Napravlenie_1: String read _GetNapravlenie_1 write _SetNapravlenie_1;
    property Napravlenie_2: String read _GetNapravlenie_2 write _SetNapravlenie_2;
    property Napravlenie_3: String read _GetNapravlenie_3 write _SetNapravlenie_3;
    property Komment_k_rabote: String read _GetKomment_k_rabote write _SetKomment_k_rabote;
    property BetweenStartSet: TDateTime read _GetBetweenStartSet write _SetBetweenStartSet;
    property BetweenSetOn: TDateTime read _GetBetweenSetOn write _SetBetweenSetOn;
    property BetweenOnEnd: TDateTime read _GetBetweenOnEnd write _SetBetweenOnEnd;
    property BetweenStartSetColor: String read _GetBetweenStartSetColor write _SetBetweenStartSetColor;
    property BetweenSetOnColor: String read _GetBetweenSetOnColor write _SetBetweenSetOnColor;
    property BetweenOnEndColor: String read _GetBetweenOnEndColor write _SetBetweenOnEndColor;
    property BetweenSetEnd: TDateTime read _GetBetweenSetEnd write _SetBetweenSetEnd;
    property BetweenSetEndColor: String read _GetBetweenSetEndColor write _SetBetweenSetEndColor;
    property ViewSetEndLong: Boolean read _GetViewSetEndLong write _SetViewSetEndLong;
    property obshepriz_chislo: Integer read _Getobshepriz_chislo write _Setobshepriz_chislo;
    property obshepriz_schyotchik: Integer read _Getobshepriz_schyotchik write _Setobshepriz_schyotchik;
    property cvet_obshepriz: String read _Getcvet_obshepriz write _Setcvet_obshepriz;
    property cvet_so_skidkoi: String read _Getcvet_so_skidkoi write _Setcvet_so_skidkoi;
    property simv_avtom_ustan: Boolean read _Getsimv_avtom_ustan write _Setsimv_avtom_ustan;
    property schit_okon_posl_kon_sekt: Boolean read _Getschit_okon_posl_kon_sekt write _Setschit_okon_posl_kon_sekt;
    property vr_smeny_dispetcherov: String read _Getvr_smeny_dispetcherov write _Setvr_smeny_dispetcherov;
    property uchityvaet_voditelya: TVoditeljList read _Getuchityvaet_voditelya;
    property uchityvet_rabotu: TPersonalList read _Getuchityvet_rabotu;
  end;

  TOperaciya = class(TBusinessClassesRoot)
  private
    function _Get_M_Debet: TBAString;
    function _GetDebet: String;
    procedure _SetDebet(const NewValue: String);
    function _Get_M_Kredit: TBAString;
    function _GetKredit: String;
    procedure _SetKredit(const NewValue: String);
    function _Get_M_Osnovanie: TBAString;
    function _GetOsnovanie: String;
    procedure _SetOsnovanie(const NewValue: String);
    function _Get_M_Statjya: TBAString;
    function _GetStatjya: String;
    procedure _SetStatjya(const NewValue: String);
    function _Get_M_Kommentarii: TBAString;
    function _GetKommentarii: String;
    procedure _SetKommentarii(const NewValue: String);
    function _Get_M_Summa_operacii: TBAFloat;
    function _GetSumma_operacii: double;
    procedure _SetSumma_operacii(const NewValue: double);
    function _Get_M_Data: TBADateTime;
    function _GetData: TDateTime;
    procedure _SetData(const NewValue: TDateTime);
    function _Getimeet_chastn_prihody: TPrihodList;
    function _Getopisyvaet_rash: TRashodList;
  protected
  public
    property M_Debet: TBAString read _Get_M_Debet;
    property M_Kredit: TBAString read _Get_M_Kredit;
    property M_Osnovanie: TBAString read _Get_M_Osnovanie;
    property M_Statjya: TBAString read _Get_M_Statjya;
    property M_Kommentarii: TBAString read _Get_M_Kommentarii;
    property M_Summa_operacii: TBAFloat read _Get_M_Summa_operacii;
    property M_Data: TBADateTime read _Get_M_Data;
    property M_imeet_chastn_prihody: TPrihodList read _Getimeet_chastn_prihody;
    property M_opisyvaet_rash: TRashodList read _Getopisyvaet_rash;
    property Debet: String read _GetDebet write _SetDebet;
    property Kredit: String read _GetKredit write _SetKredit;
    property Osnovanie: String read _GetOsnovanie write _SetOsnovanie;
    property Statjya: String read _GetStatjya write _SetStatjya;
    property Kommentarii: String read _GetKommentarii write _SetKommentarii;
    property Summa_operacii: double read _GetSumma_operacii write _SetSumma_operacii;
    property Data: TDateTime read _GetData write _SetData;
    property imeet_chastn_prihody: TPrihodList read _Getimeet_chastn_prihody;
    property opisyvaet_rash: TRashodList read _Getopisyvaet_rash;
  end;

  TPersona = class(TBusinessClassesRoot)
  private
    function _Get_M_Familiya: TBAString;
    function _GetFamiliya: String;
    procedure _SetFamiliya(const NewValue: String);
    function _Get_M_Imya: TBAString;
    function _GetImya: String;
    procedure _SetImya(const NewValue: String);
    function _Get_M_Otchestvo: TBAString;
    function _GetOtchestvo: String;
    procedure _SetOtchestvo(const NewValue: String);
    function _Get_M_Ulica: TBAString;
    function _GetUlica: String;
    procedure _SetUlica(const NewValue: String);
    function _Get_M_Dom: TBAInteger;
    function _GetDom: Integer;
    procedure _SetDom(const NewValue: Integer);
    function _Get_M_Kvartira: TBAInteger;
    function _GetKvartira: Integer;
    procedure _SetKvartira(const NewValue: Integer);
    function _Get_M_Korpus: TBAInteger;
    function _GetKorpus: Integer;
    procedure _SetKorpus(const NewValue: Integer);
    function _Get_M_Mobiljnyi_telefon: TBAString;
    function _GetMobiljnyi_telefon: String;
    procedure _SetMobiljnyi_telefon(const NewValue: String);
    function _Get_M_Rabochii_telefon: TBAString;
    function _GetRabochii_telefon: String;
    procedure _SetRabochii_telefon(const NewValue: String);
    function _Get_M_Domashnii_telefon: TBAString;
    function _GetDomashnii_telefon: String;
    procedure _SetDomashnii_telefon(const NewValue: String);
    function _Get_M_Elektronnyi_adres: TBAString;
    function _GetElektronnyi_adres: String;
    procedure _SetElektronnyi_adres(const NewValue: String);
    function _Get_M_Polnoe_imya: TBAString;
    function _GetPolnoe_imya: String;
  protected
  public
    property M_Familiya: TBAString read _Get_M_Familiya;
    property M_Imya: TBAString read _Get_M_Imya;
    property M_Otchestvo: TBAString read _Get_M_Otchestvo;
    property M_Ulica: TBAString read _Get_M_Ulica;
    property M_Dom: TBAInteger read _Get_M_Dom;
    property M_Kvartira: TBAInteger read _Get_M_Kvartira;
    property M_Korpus: TBAInteger read _Get_M_Korpus;
    property M_Mobiljnyi_telefon: TBAString read _Get_M_Mobiljnyi_telefon;
    property M_Rabochii_telefon: TBAString read _Get_M_Rabochii_telefon;
    property M_Domashnii_telefon: TBAString read _Get_M_Domashnii_telefon;
    property M_Elektronnyi_adres: TBAString read _Get_M_Elektronnyi_adres;
    property M_Polnoe_imya: TBAString read _Get_M_Polnoe_imya;
    property Familiya: String read _GetFamiliya write _SetFamiliya;
    property Imya: String read _GetImya write _SetImya;
    property Otchestvo: String read _GetOtchestvo write _SetOtchestvo;
    property Ulica: String read _GetUlica write _SetUlica;
    property Dom: Integer read _GetDom write _SetDom;
    property Kvartira: Integer read _GetKvartira write _SetKvartira;
    property Korpus: Integer read _GetKorpus write _SetKorpus;
    property Mobiljnyi_telefon: String read _GetMobiljnyi_telefon write _SetMobiljnyi_telefon;
    property Rabochii_telefon: String read _GetRabochii_telefon write _SetRabochii_telefon;
    property Domashnii_telefon: String read _GetDomashnii_telefon write _SetDomashnii_telefon;
    property Elektronnyi_adres: String read _GetElektronnyi_adres write _SetElektronnyi_adres;
    property Polnoe_imya: String read _GetPolnoe_imya;
  end;

  TPlohie_klienty = class(TBusinessClassesRoot)
  private
    function _Get_M_Telefon_klienta: TBAString;
    function _GetTelefon_klienta: String;
    procedure _SetTelefon_klienta(const NewValue: String);
    function _Get_M_Pozyvnoi: TBAInteger;
    function _GetPozyvnoi: Integer;
    procedure _SetPozyvnoi(const NewValue: Integer);
    function _Get_M_Nachalo: TBAString;
    function _GetNachalo: String;
    procedure _SetNachalo(const NewValue: String);
    function _Get_M_Adres_vyzova_vvodim: TBAString;
    function _GetAdres_vyzova_vvodim: String;
    procedure _SetAdres_vyzova_vvodim(const NewValue: String);
  protected
  public
    property M_Telefon_klienta: TBAString read _Get_M_Telefon_klienta;
    property M_Pozyvnoi: TBAInteger read _Get_M_Pozyvnoi;
    property M_Nachalo: TBAString read _Get_M_Nachalo;
    property M_Adres_vyzova_vvodim: TBAString read _Get_M_Adres_vyzova_vvodim;
    property Telefon_klienta: String read _GetTelefon_klienta write _SetTelefon_klienta;
    property Pozyvnoi: Integer read _GetPozyvnoi write _SetPozyvnoi;
    property Nachalo: String read _GetNachalo write _SetNachalo;
    property Adres_vyzova_vvodim: String read _GetAdres_vyzova_vvodim write _SetAdres_vyzova_vvodim;
  end;

  TPrihod = class(TBusinessClassesRoot)
  private
    function _Get_M_Summa_pozicii: TBAFloat;
    function _GetSumma_pozicii: double;
    procedure _SetSumma_pozicii(const NewValue: double);
    function _Get_M_Data_prihoda: TBADateTime;
    function _GetData_prihoda: TDateTime;
    procedure _SetData_prihoda(const NewValue: TDateTime);
    function _Get_M_Opisanie: TBAString;
    function _GetOpisanie: String;
    procedure _SetOpisanie(const NewValue: String);
    function _Getsostavlyaet_prihod: TBalans;
    function _Get_M_sostavlyaet_prihod: TBoldObjectReference;
    procedure _Setsostavlyaet_prihod(const value: TBalans);
    function _Getotnos_k_operac_prih: TOperaciya;
    function _Get_M_otnos_k_operac_prih: TBoldObjectReference;
    procedure _Setotnos_k_operac_prih(const value: TOperaciya);
  protected
  public
    property M_Summa_pozicii: TBAFloat read _Get_M_Summa_pozicii;
    property M_Data_prihoda: TBADateTime read _Get_M_Data_prihoda;
    property M_Opisanie: TBAString read _Get_M_Opisanie;
    property M_sostavlyaet_prihod: TBoldObjectReference read _Get_M_sostavlyaet_prihod;
    property M_otnos_k_operac_prih: TBoldObjectReference read _Get_M_otnos_k_operac_prih;
    property Summa_pozicii: double read _GetSumma_pozicii write _SetSumma_pozicii;
    property Data_prihoda: TDateTime read _GetData_prihoda write _SetData_prihoda;
    property Opisanie: String read _GetOpisanie write _SetOpisanie;
    property sostavlyaet_prihod: TBalans read _Getsostavlyaet_prihod write _Setsostavlyaet_prihod;
    property otnos_k_operac_prih: TOperaciya read _Getotnos_k_operac_prih write _Setotnos_k_operac_prih;
  end;

  TRashod = class(TBusinessClassesRoot)
  private
    function _Get_M_Summa_pozicii: TBAFloat;
    function _GetSumma_pozicii: double;
    procedure _SetSumma_pozicii(const NewValue: double);
    function _Get_M_Data_rashoda: TBADateTime;
    function _GetData_rashoda: TDateTime;
    procedure _SetData_rashoda(const NewValue: TDateTime);
    function _Get_M_Opisanie: TBAString;
    function _GetOpisanie: String;
    procedure _SetOpisanie(const NewValue: String);
    function _Getsostavlyaet_rashod: TBalans;
    function _Get_M_sostavlyaet_rashod: TBoldObjectReference;
    procedure _Setsostavlyaet_rashod(const value: TBalans);
    function _Getotnos_k_operacii_rash: TOperaciya;
    function _Get_M_otnos_k_operacii_rash: TBoldObjectReference;
    procedure _Setotnos_k_operacii_rash(const value: TOperaciya);
  protected
  public
    property M_Summa_pozicii: TBAFloat read _Get_M_Summa_pozicii;
    property M_Data_rashoda: TBADateTime read _Get_M_Data_rashoda;
    property M_Opisanie: TBAString read _Get_M_Opisanie;
    property M_sostavlyaet_rashod: TBoldObjectReference read _Get_M_sostavlyaet_rashod;
    property M_otnos_k_operacii_rash: TBoldObjectReference read _Get_M_otnos_k_operacii_rash;
    property Summa_pozicii: double read _GetSumma_pozicii write _SetSumma_pozicii;
    property Data_rashoda: TDateTime read _GetData_rashoda write _SetData_rashoda;
    property Opisanie: String read _GetOpisanie write _SetOpisanie;
    property sostavlyaet_rashod: TBalans read _Getsostavlyaet_rashod write _Setsostavlyaet_rashod;
    property otnos_k_operacii_rash: TOperaciya read _Getotnos_k_operacii_rash write _Setotnos_k_operacii_rash;
  end;

  TSootvetstvie_parametrov_zakaza = class(TBusinessClassesRoot)
  private
    function _Get_M_Nomer_sektora: TBAInteger;
    function _GetNomer_sektora: Integer;
    function _Get_M_Telefon_klienta: TBAString;
    function _GetTelefon_klienta: String;
    procedure _SetTelefon_klienta(const NewValue: String);
    function _Get_M_Adres_vyzova_vvodim: TBAString;
    function _GetAdres_vyzova_vvodim: String;
    procedure _SetAdres_vyzova_vvodim(const NewValue: String);
    function _Get_M_Summarn_chislo_vyzovov: TBAInteger;
    function _GetSummarn_chislo_vyzovov: Integer;
    procedure _SetSummarn_chislo_vyzovov(const NewValue: Integer);
    function _Getotnositsya_k_sektoru: TSektor_raboty;
    function _Get_M_otnositsya_k_sektoru: TBoldObjectReference;
    procedure _Setotnositsya_k_sektoru(const value: TSektor_raboty);
  protected
  public
    property M_Nomer_sektora: TBAInteger read _Get_M_Nomer_sektora;
    property M_Telefon_klienta: TBAString read _Get_M_Telefon_klienta;
    property M_Adres_vyzova_vvodim: TBAString read _Get_M_Adres_vyzova_vvodim;
    property M_Summarn_chislo_vyzovov: TBAInteger read _Get_M_Summarn_chislo_vyzovov;
    property M_otnositsya_k_sektoru: TBoldObjectReference read _Get_M_otnositsya_k_sektoru;
    property Nomer_sektora: Integer read _GetNomer_sektora;
    property Telefon_klienta: String read _GetTelefon_klienta write _SetTelefon_klienta;
    property Adres_vyzova_vvodim: String read _GetAdres_vyzova_vvodim write _SetAdres_vyzova_vvodim;
    property Summarn_chislo_vyzovov: Integer read _GetSummarn_chislo_vyzovov write _SetSummarn_chislo_vyzovov;
    property otnositsya_k_sektoru: TSektor_raboty read _Getotnositsya_k_sektoru write _Setotnositsya_k_sektoru;
  end;

  TSpravochnik = class(TBusinessClassesRoot)
  private
    function _Get_M_Naimenovanie: TBAString;
    function _GetNaimenovanie: String;
    procedure _SetNaimenovanie(const NewValue: String);
    function _Get_M_Kommentarii: TBAString;
    function _GetKommentarii: String;
    procedure _SetKommentarii(const NewValue: String);
    function _Get_M_Identifikator: TBAInteger;
    function _GetIdentifikator: Integer;
    procedure _SetIdentifikator(const NewValue: Integer);
  protected
  public
    property M_Naimenovanie: TBAString read _Get_M_Naimenovanie;
    property M_Kommentarii: TBAString read _Get_M_Kommentarii;
    property M_Identifikator: TBAInteger read _Get_M_Identifikator;
    property Naimenovanie: String read _GetNaimenovanie write _SetNaimenovanie;
    property Kommentarii: String read _GetKommentarii write _SetKommentarii;
    property Identifikator: Integer read _GetIdentifikator write _SetIdentifikator;
  end;

  TSpravochnik_grupp_vypuskov = class(TBusinessClassesRoot)
  private
  protected
  public
  end;

  TShablon_zakaza = class(TBusinessClassesRoot)
  private
    function _Get_M_Nomer_na_ulice: TBAInteger;
    function _GetNomer_na_ulice: Integer;
    procedure _SetNomer_na_ulice(const NewValue: Integer);
    function _Getyavlyaetsya_vyzovom_na_ulicu: TUlica;
    function _Get_M_yavlyaetsya_vyzovom_na_ulicu: TBoldObjectReference;
    procedure _Setyavlyaetsya_vyzovom_na_ulicu(const value: TUlica);
    function _Getyavl_vyzovom_na_raion: TRaion;
    function _Get_M_yavl_vyzovom_na_raion: TBoldObjectReference;
    procedure _Setyavl_vyzovom_na_raion(const value: TRaion);
    function _Getyavl_vyzovom_na_objekt: TObjekt;
    function _Get_M_yavl_vyzovom_na_objekt: TBoldObjectReference;
    procedure _Setyavl_vyzovom_na_objekt(const value: TObjekt);
    function _Getimeet_pervuyu_ulicu_ugla: TUlica;
    function _Get_M_imeet_pervuyu_ulicu_ugla: TBoldObjectReference;
    procedure _Setimeet_pervuyu_ulicu_ugla(const value: TUlica);
    function _Getimeet_vtoruyu_ulicu_ugla: TUlica;
    function _Get_M_imeet_vtoruyu_ulicu_ugla: TBoldObjectReference;
    procedure _Setimeet_vtoruyu_ulicu_ugla(const value: TUlica);
  protected
  public
    property M_Nomer_na_ulice: TBAInteger read _Get_M_Nomer_na_ulice;
    property M_yavlyaetsya_vyzovom_na_ulicu: TBoldObjectReference read _Get_M_yavlyaetsya_vyzovom_na_ulicu;
    property M_yavl_vyzovom_na_raion: TBoldObjectReference read _Get_M_yavl_vyzovom_na_raion;
    property M_yavl_vyzovom_na_objekt: TBoldObjectReference read _Get_M_yavl_vyzovom_na_objekt;
    property M_imeet_pervuyu_ulicu_ugla: TBoldObjectReference read _Get_M_imeet_pervuyu_ulicu_ugla;
    property M_imeet_vtoruyu_ulicu_ugla: TBoldObjectReference read _Get_M_imeet_vtoruyu_ulicu_ugla;
    property Nomer_na_ulice: Integer read _GetNomer_na_ulice write _SetNomer_na_ulice;
    property yavlyaetsya_vyzovom_na_ulicu: TUlica read _Getyavlyaetsya_vyzovom_na_ulicu write _Setyavlyaetsya_vyzovom_na_ulicu;
    property yavl_vyzovom_na_raion: TRaion read _Getyavl_vyzovom_na_raion write _Setyavl_vyzovom_na_raion;
    property yavl_vyzovom_na_objekt: TObjekt read _Getyavl_vyzovom_na_objekt write _Setyavl_vyzovom_na_objekt;
    property imeet_pervuyu_ulicu_ugla: TUlica read _Getimeet_pervuyu_ulicu_ugla write _Setimeet_pervuyu_ulicu_ugla;
    property imeet_vtoruyu_ulicu_ugla: TUlica read _Getimeet_vtoruyu_ulicu_ugla write _Setimeet_vtoruyu_ulicu_ugla;
  end;

  TOrganizaciya = class(TPersona)
  private
    function _Get_M_Strana: TBAString;
    function _GetStrana: String;
    procedure _SetStrana(const NewValue: String);
    function _Get_M_Oblastj: TBAString;
    function _GetOblastj: String;
    procedure _SetOblastj(const NewValue: String);
    function _Get_M_Gorod: TBAString;
    function _GetGorod: String;
    procedure _SetGorod(const NewValue: String);
    function _Get_M_BIK: TBAString;
    function _GetBIK: String;
    procedure _SetBIK(const NewValue: String);
    function _Get_M_Naimenovanie: TBAString;
    function _GetNaimenovanie: String;
    procedure _SetNaimenovanie(const NewValue: String);
    function _Get_M_YavlyaetsyaVlad: TBABoolean;
    function _GetYavlyaetsyaVlad: Boolean;
    procedure _SetYavlyaetsyaVlad(const NewValue: Boolean);
    function _Get_M_Rukovoditelj: TBAString;
    function _GetRukovoditelj: String;
    procedure _SetRukovoditelj(const NewValue: String);
    function _Get_M_GlBuhgalter: TBAString;
    function _GetGlBuhgalter: String;
    procedure _SetGlBuhgalter(const NewValue: String);
    function _Get_M_INN: TBAString;
    function _GetINN: String;
    procedure _SetINN(const NewValue: String);
    function _Get_M_Rasch__schet: TBAString;
    function _GetRasch__schet: String;
    procedure _SetRasch__schet(const NewValue: String);
    function _Get_M_KPP: TBAString;
    function _GetKPP: String;
    procedure _SetKPP(const NewValue: String);
    function _Get_M_Tip_organizacii: TBAString;
    function _GetTip_organizacii: String;
    procedure _SetTip_organizacii(const NewValue: String);
    function _Get_M_Kor_schet: TBAString;
    function _GetKor_schet: String;
    procedure _SetKor_schet(const NewValue: String);
    function _Get_M_Naim__banka: TBAString;
    function _GetNaim__banka: String;
    procedure _SetNaim__banka(const NewValue: String);
  protected
  public
    property M_Strana: TBAString read _Get_M_Strana;
    property M_Oblastj: TBAString read _Get_M_Oblastj;
    property M_Gorod: TBAString read _Get_M_Gorod;
    property M_BIK: TBAString read _Get_M_BIK;
    property M_Naimenovanie: TBAString read _Get_M_Naimenovanie;
    property M_YavlyaetsyaVlad: TBABoolean read _Get_M_YavlyaetsyaVlad;
    property M_Rukovoditelj: TBAString read _Get_M_Rukovoditelj;
    property M_GlBuhgalter: TBAString read _Get_M_GlBuhgalter;
    property M_INN: TBAString read _Get_M_INN;
    property M_Rasch__schet: TBAString read _Get_M_Rasch__schet;
    property M_KPP: TBAString read _Get_M_KPP;
    property M_Tip_organizacii: TBAString read _Get_M_Tip_organizacii;
    property M_Kor_schet: TBAString read _Get_M_Kor_schet;
    property M_Naim__banka: TBAString read _Get_M_Naim__banka;
    property Strana: String read _GetStrana write _SetStrana;
    property Oblastj: String read _GetOblastj write _SetOblastj;
    property Gorod: String read _GetGorod write _SetGorod;
    property BIK: String read _GetBIK write _SetBIK;
    property Naimenovanie: String read _GetNaimenovanie write _SetNaimenovanie;
    property YavlyaetsyaVlad: Boolean read _GetYavlyaetsyaVlad write _SetYavlyaetsyaVlad;
    property Rukovoditelj: String read _GetRukovoditelj write _SetRukovoditelj;
    property GlBuhgalter: String read _GetGlBuhgalter write _SetGlBuhgalter;
    property INN: String read _GetINN write _SetINN;
    property Rasch__schet: String read _GetRasch__schet write _SetRasch__schet;
    property KPP: String read _GetKPP write _SetKPP;
    property Tip_organizacii: String read _GetTip_organizacii write _SetTip_organizacii;
    property Kor_schet: String read _GetKor_schet write _SetKor_schet;
    property Naim__banka: String read _GetNaim__banka write _SetNaim__banka;
  end;

  TVyruchka_ot_voditelya = class(TPrihod)
  private
    function _Get_M_Summa: TBAFloat;
    function _GetSumma: double;
    procedure _SetSumma(const NewValue: double);
    function _Get_M_Data_postupleniya: TBADateTime;
    function _GetData_postupleniya: TDateTime;
    procedure _SetData_postupleniya(const NewValue: TDateTime);
    function _Getkem_prinositsya: TVoditelj;
    function _Get_M_kem_prinositsya: TBoldObjectReference;
    procedure _Setkem_prinositsya(const value: TVoditelj);
  protected
  public
    property M_Summa: TBAFloat read _Get_M_Summa;
    property M_Data_postupleniya: TBADateTime read _Get_M_Data_postupleniya;
    property M_kem_prinositsya: TBoldObjectReference read _Get_M_kem_prinositsya;
    property Summa: double read _GetSumma write _SetSumma;
    property Data_postupleniya: TDateTime read _GetData_postupleniya write _SetData_postupleniya;
    property kem_prinositsya: TVoditelj read _Getkem_prinositsya write _Setkem_prinositsya;
  end;

  TGruppa_voditelei = class(TSpravochnik)
  private
    function _Getvklyuchaet_voditelya: TVoditeljList;
  protected
  public
    property M_vklyuchaet_voditelya: TVoditeljList read _Getvklyuchaet_voditelya;
    property vklyuchaet_voditelya: TVoditeljList read _Getvklyuchaet_voditelya;
  end;

  TMashina = class(TSpravochnik)
  private
    function _Get_M_Modelj: TBAString;
    function _GetModelj: String;
    procedure _SetModelj(const NewValue: String);
    function _Getupravlyaetsya_voditelem: TVoditelj;
    function _Get_M_upravlyaetsya_voditelem: TBoldObjectReference;
    procedure _Setupravlyaetsya_voditelem(const value: TVoditelj);
  protected
  public
    property M_Modelj: TBAString read _Get_M_Modelj;
    property M_upravlyaetsya_voditelem: TBoldObjectReference read _Get_M_upravlyaetsya_voditelem;
    property Modelj: String read _GetModelj write _SetModelj;
    property upravlyaetsya_voditelem: TVoditelj read _Getupravlyaetsya_voditelem write _Setupravlyaetsya_voditelem;
  end;

  TObjekt = class(TSpravochnik)
  private
    function _Getobjekt_vyzova_dlya: TShablon_zakazaList;
  protected
  public
    property M_objekt_vyzova_dlya: TShablon_zakazaList read _Getobjekt_vyzova_dlya;
    property objekt_vyzova_dlya: TShablon_zakazaList read _Getobjekt_vyzova_dlya;
  end;

  TRaion = class(TSpravochnik)
  private
    function _Getraion_vyzova_dlya: TShablon_zakazaList;
    function _Getpredpolagaet_stoimostj: TStoimostj;
    function _Get_M_predpolagaet_stoimostj: TBoldObjectReference;
    procedure _Setpredpolagaet_stoimostj(const value: TStoimostj);
    function _Getotnositsya_k_sektoru: TSektor_raboty;
    function _Get_M_otnositsya_k_sektoru: TBoldObjectReference;
    procedure _Setotnositsya_k_sektoru(const value: TSektor_raboty);
  protected
  public
    property M_raion_vyzova_dlya: TShablon_zakazaList read _Getraion_vyzova_dlya;
    property M_predpolagaet_stoimostj: TBoldObjectReference read _Get_M_predpolagaet_stoimostj;
    property M_otnositsya_k_sektoru: TBoldObjectReference read _Get_M_otnositsya_k_sektoru;
    property raion_vyzova_dlya: TShablon_zakazaList read _Getraion_vyzova_dlya;
    property predpolagaet_stoimostj: TStoimostj read _Getpredpolagaet_stoimostj write _Setpredpolagaet_stoimostj;
    property otnositsya_k_sektoru: TSektor_raboty read _Getotnositsya_k_sektoru write _Setotnositsya_k_sektoru;
  end;

  TSektor_raboty = class(TSpravochnik)
  private
    function _Get_M_Nomer_sektora: TBAInteger;
    function _GetNomer_sektora: Integer;
    procedure _SetNomer_sektora(const NewValue: Integer);
    function _Get_M_Oblastj_sverhu: TBAFloat;
    function _GetOblastj_sverhu: double;
    procedure _SetOblastj_sverhu(const NewValue: double);
    function _Get_M_Oblastj_sleva: TBAFloat;
    function _GetOblastj_sleva: double;
    procedure _SetOblastj_sleva(const NewValue: double);
    function _Get_M_Shirina: TBAFloat;
    function _GetShirina: double;
    procedure _SetShirina(const NewValue: double);
    function _Get_M_Vysota: TBAFloat;
    function _GetVysota: double;
    procedure _SetVysota(const NewValue: double);
    function _Get_M_Podskazka_na_sektore: TBAString;
    function _GetPodskazka_na_sektore: String;
    procedure _SetPodskazka_na_sektore(const NewValue: String);
    function _Get_M_Kod_sektora: TBAString;
    function _GetKod_sektora: String;
    procedure _SetKod_sektora(const NewValue: String);
    function _Getvklyuchaet_raion: TRaionList;
    function _Getvklyuchaet_adresa: TZakazList;
    function _Getyavl_sekt_raboty_dlya: TVoditeljList;
    function _Getyavl_konechn_sektorom_dlya: TZakazList;
    function _Getharakt_associacii: TSootvetstvie_parametrov_zakazaList;
    function _Getvoditeljskii_sekt_dlya: TZakazList;
  protected
  public
    property M_Nomer_sektora: TBAInteger read _Get_M_Nomer_sektora;
    property M_Oblastj_sverhu: TBAFloat read _Get_M_Oblastj_sverhu;
    property M_Oblastj_sleva: TBAFloat read _Get_M_Oblastj_sleva;
    property M_Shirina: TBAFloat read _Get_M_Shirina;
    property M_Vysota: TBAFloat read _Get_M_Vysota;
    property M_Podskazka_na_sektore: TBAString read _Get_M_Podskazka_na_sektore;
    property M_Kod_sektora: TBAString read _Get_M_Kod_sektora;
    property M_vklyuchaet_raion: TRaionList read _Getvklyuchaet_raion;
    property M_vklyuchaet_adresa: TZakazList read _Getvklyuchaet_adresa;
    property M_yavl_sekt_raboty_dlya: TVoditeljList read _Getyavl_sekt_raboty_dlya;
    property M_yavl_konechn_sektorom_dlya: TZakazList read _Getyavl_konechn_sektorom_dlya;
    property M_harakt_associacii: TSootvetstvie_parametrov_zakazaList read _Getharakt_associacii;
    property M_voditeljskii_sekt_dlya: TZakazList read _Getvoditeljskii_sekt_dlya;
    property Nomer_sektora: Integer read _GetNomer_sektora write _SetNomer_sektora;
    property Oblastj_sverhu: double read _GetOblastj_sverhu write _SetOblastj_sverhu;
    property Oblastj_sleva: double read _GetOblastj_sleva write _SetOblastj_sleva;
    property Shirina: double read _GetShirina write _SetShirina;
    property Vysota: double read _GetVysota write _SetVysota;
    property Podskazka_na_sektore: String read _GetPodskazka_na_sektore write _SetPodskazka_na_sektore;
    property Kod_sektora: String read _GetKod_sektora write _SetKod_sektora;
    property vklyuchaet_raion: TRaionList read _Getvklyuchaet_raion;
    property vklyuchaet_adresa: TZakazList read _Getvklyuchaet_adresa;
    property yavl_sekt_raboty_dlya: TVoditeljList read _Getyavl_sekt_raboty_dlya;
    property yavl_konechn_sektorom_dlya: TZakazList read _Getyavl_konechn_sektorom_dlya;
    property harakt_associacii: TSootvetstvie_parametrov_zakazaList read _Getharakt_associacii;
    property voditeljskii_sekt_dlya: TZakazList read _Getvoditeljskii_sekt_dlya;
  end;

  TStoimostj = class(TSpravochnik)
  private
    function _Get_M_Stoimostj: TBAFloat;
    function _GetStoimostj: double;
    procedure _SetStoimostj(const NewValue: double);
    function _Getzavisit_ot_raiona: TRaion;
    function _Get_M_zavisit_ot_raiona: TBoldObjectReference;
    procedure _Setzavisit_ot_raiona(const value: TRaion);
    function _Getsostavlyaet_stoimostj_dlya: TZakazList;
  protected
  public
    property M_Stoimostj: TBAFloat read _Get_M_Stoimostj;
    property M_zavisit_ot_raiona: TBoldObjectReference read _Get_M_zavisit_ot_raiona;
    property M_sostavlyaet_stoimostj_dlya: TZakazList read _Getsostavlyaet_stoimostj_dlya;
    property Stoimostj: double read _GetStoimostj write _SetStoimostj;
    property zavisit_ot_raiona: TRaion read _Getzavisit_ot_raiona write _Setzavisit_ot_raiona;
    property sostavlyaet_stoimostj_dlya: TZakazList read _Getsostavlyaet_stoimostj_dlya;
  end;

  TUlica = class(TSpravochnik)
  private
    function _Getulica_vyzova_dlya: TShablon_zakazaList;
    function _Getobrazuet_kak_peruvaya_ulica_ugol: TShablon_zakazaList;
    function _Getobrazuet_kak_vtoraya_ugol: TShablon_zakazaList;
  protected
  public
    property M_ulica_vyzova_dlya: TShablon_zakazaList read _Getulica_vyzova_dlya;
    property M_obrazuet_kak_peruvaya_ulica_ugol: TShablon_zakazaList read _Getobrazuet_kak_peruvaya_ulica_ugol;
    property M_obrazuet_kak_vtoraya_ugol: TShablon_zakazaList read _Getobrazuet_kak_vtoraya_ugol;
    property ulica_vyzova_dlya: TShablon_zakazaList read _Getulica_vyzova_dlya;
    property obrazuet_kak_peruvaya_ulica_ugol: TShablon_zakazaList read _Getobrazuet_kak_peruvaya_ulica_ugol;
    property obrazuet_kak_vtoraya_ugol: TShablon_zakazaList read _Getobrazuet_kak_vtoraya_ugol;
  end;

  TZakaz = class(TShablon_zakaza)
  private
    function _Get_M_Kolichestvo_chasov: TBAFloat;
    function _GetKolichestvo_chasov: double;
    procedure _SetKolichestvo_chasov(const NewValue: double);
    function _Get_M_Nachalo_zakaza_data: TBADateTime;
    function _GetNachalo_zakaza_data: TDateTime;
    procedure _SetNachalo_zakaza_data(const NewValue: TDateTime);
    function _Get_M_Konec_zakaza_data: TBADateTime;
    function _GetKonec_zakaza_data: TDateTime;
    procedure _SetKonec_zakaza_data(const NewValue: TDateTime);
    function _Get_M_Telefon_klienta: TBAString;
    function _GetTelefon_klienta: String;
    procedure _SetTelefon_klienta(const NewValue: String);
    function _Get_M_Stoimostj_zakaza: TBAFloat;
    function _GetStoimostj_zakaza: double;
    function _Get_M_Nomer_zakaza: TBAFloat;
    function _GetNomer_zakaza: double;
    procedure _SetNomer_zakaza(const NewValue: double);
    function _Get_M_Data_podachi: TBADateTime;
    function _GetData_podachi: TDateTime;
    procedure _SetData_podachi(const NewValue: TDateTime);
    function _Get_M_Zavershyon: TBABoolean;
    function _GetZavershyon: Boolean;
    procedure _SetZavershyon(const NewValue: Boolean);
    function _Get_M_Arhivnyi: TBABoolean;
    function _GetArhivnyi: Boolean;
    procedure _SetArhivnyi(const NewValue: Boolean);
    function _Get_M_Uslovn_stoim: TBAFloat;
    function _GetUslovn_stoim: double;
    procedure _SetUslovn_stoim(const NewValue: double);
    function _Get_M_Adres_vyzova_vvodim: TBAString;
    function _GetAdres_vyzova_vvodim: String;
    procedure _SetAdres_vyzova_vvodim(const NewValue: String);
    function _Get_M_Predvariteljnyi: TBABoolean;
    function _GetPredvariteljnyi: Boolean;
    procedure _SetPredvariteljnyi(const NewValue: Boolean);
    function _Get_M_Data_predvariteljnaya: TBADateTime;
    function _GetData_predvariteljnaya: TDateTime;
    procedure _SetData_predvariteljnaya(const NewValue: TDateTime);
    function _Get_M_Zadeistv_predvarit: TBABoolean;
    function _GetZadeistv_predvarit: Boolean;
    procedure _SetZadeistv_predvarit(const NewValue: Boolean);
    function _Get_M_Data_po_umolchaniyu: TBADateTime;
    function _GetData_po_umolchaniyu: TDateTime;
    procedure _SetData_po_umolchaniyu(const NewValue: TDateTime);
    function _Get_M_Soobsheno_voditelyu: TBABoolean;
    function _GetSoobsheno_voditelyu: Boolean;
    procedure _SetSoobsheno_voditelyu(const NewValue: Boolean);
    function _Get_M_Adres_okonchaniya_zayavki: TBAString;
    function _GetAdres_okonchaniya_zayavki: String;
    procedure _SetAdres_okonchaniya_zayavki(const NewValue: String);
    function _Get_M_Yavl_pochasovym: TBABoolean;
    function _GetYavl_pochasovym: Boolean;
    procedure _SetYavl_pochasovym(const NewValue: Boolean);
    function _Get_M_Stoimostj_so_skidkoi: TBAFloat;
    function _GetStoimostj_so_skidkoi: double;
    function _Get_M_Pozyvnoi_ustan: TBAInteger;
    function _GetPozyvnoi_ustan: Integer;
    procedure _SetPozyvnoi_ustan(const NewValue: Integer);
    function _Get_M_Data_pribytie: TBADateTime;
    function _GetData_pribytie: TDateTime;
    procedure _SetData_pribytie(const NewValue: TDateTime);
    function _Get_M_Ustan_pribytie: TBABoolean;
    function _GetUstan_pribytie: Boolean;
    procedure _SetUstan_pribytie(const NewValue: Boolean);
    function _Get_M_Nomer_skidki: TBAInteger;
    function _GetNomer_skidki: Integer;
    procedure _SetNomer_skidki(const NewValue: Integer);
    function _Get_M_Slugebnyi: TBABoolean;
    function _GetSlugebnyi: Boolean;
    procedure _SetSlugebnyi(const NewValue: Boolean);
    function _Get_M_Primechanie: TBAString;
    function _GetPrimechanie: String;
    procedure _SetPrimechanie(const NewValue: String);
    function _Get_M_Opr_s_obsh_linii: TBABoolean;
    function _GetOpr_s_obsh_linii: Boolean;
    procedure _SetOpr_s_obsh_linii(const NewValue: Boolean);
    function _Get_M_Data_na_tochke: TBADateTime;
    function _GetData_na_tochke: TDateTime;
    procedure _SetData_na_tochke(const NewValue: TDateTime);
    function _Getvypolnyaetsya_voditelem: TVoditelj;
    function _Get_M_vypolnyaetsya_voditelem: TBoldObjectReference;
    procedure _Setvypolnyaetsya_voditelem(const value: TVoditelj);
    function _Getotpuskaetsya_dostepcherom: TPersonal;
    function _Get_M_otpuskaetsya_dostepcherom: TBoldObjectReference;
    procedure _Setotpuskaetsya_dostepcherom(const value: TPersonal);
    function _Getocenivaetsya_cherez: TStoimostj;
    function _Get_M_ocenivaetsya_cherez: TBoldObjectReference;
    procedure _Setocenivaetsya_cherez(const value: TStoimostj);
    function _Getadres_sektora: TSektor_raboty;
    function _Get_M_adres_sektora: TBoldObjectReference;
    procedure _Setadres_sektora(const value: TSektor_raboty);
    function _Getkonechnyi_sektor_raboty: TSektor_raboty;
    function _Get_M_konechnyi_sektor_raboty: TBoldObjectReference;
    procedure _Setkonechnyi_sektor_raboty(const value: TSektor_raboty);
    function _Getsektor_voditelya: TSektor_raboty;
    function _Get_M_sektor_voditelya: TBoldObjectReference;
    procedure _Setsektor_voditelya(const value: TSektor_raboty);
    function _Getotpravlyaetsya: TPersonal;
    function _Get_M_otpravlyaetsya: TBoldObjectReference;
    procedure _Setotpravlyaetsya(const value: TPersonal);
  protected
  public
    property M_Kolichestvo_chasov: TBAFloat read _Get_M_Kolichestvo_chasov;
    property M_Nachalo_zakaza_data: TBADateTime read _Get_M_Nachalo_zakaza_data;
    property M_Konec_zakaza_data: TBADateTime read _Get_M_Konec_zakaza_data;
    property M_Telefon_klienta: TBAString read _Get_M_Telefon_klienta;
    property M_Stoimostj_zakaza: TBAFloat read _Get_M_Stoimostj_zakaza;
    property M_Nomer_zakaza: TBAFloat read _Get_M_Nomer_zakaza;
    property M_Data_podachi: TBADateTime read _Get_M_Data_podachi;
    property M_Zavershyon: TBABoolean read _Get_M_Zavershyon;
    property M_Arhivnyi: TBABoolean read _Get_M_Arhivnyi;
    property M_Uslovn_stoim: TBAFloat read _Get_M_Uslovn_stoim;
    property M_Adres_vyzova_vvodim: TBAString read _Get_M_Adres_vyzova_vvodim;
    property M_Predvariteljnyi: TBABoolean read _Get_M_Predvariteljnyi;
    property M_Data_predvariteljnaya: TBADateTime read _Get_M_Data_predvariteljnaya;
    property M_Zadeistv_predvarit: TBABoolean read _Get_M_Zadeistv_predvarit;
    property M_Data_po_umolchaniyu: TBADateTime read _Get_M_Data_po_umolchaniyu;
    property M_Soobsheno_voditelyu: TBABoolean read _Get_M_Soobsheno_voditelyu;
    property M_Adres_okonchaniya_zayavki: TBAString read _Get_M_Adres_okonchaniya_zayavki;
    property M_Yavl_pochasovym: TBABoolean read _Get_M_Yavl_pochasovym;
    property M_Stoimostj_so_skidkoi: TBAFloat read _Get_M_Stoimostj_so_skidkoi;
    property M_Pozyvnoi_ustan: TBAInteger read _Get_M_Pozyvnoi_ustan;
    property M_Data_pribytie: TBADateTime read _Get_M_Data_pribytie;
    property M_Ustan_pribytie: TBABoolean read _Get_M_Ustan_pribytie;
    property M_Nomer_skidki: TBAInteger read _Get_M_Nomer_skidki;
    property M_Slugebnyi: TBABoolean read _Get_M_Slugebnyi;
    property M_Primechanie: TBAString read _Get_M_Primechanie;
    property M_Opr_s_obsh_linii: TBABoolean read _Get_M_Opr_s_obsh_linii;
    property M_Data_na_tochke: TBADateTime read _Get_M_Data_na_tochke;
    property M_vypolnyaetsya_voditelem: TBoldObjectReference read _Get_M_vypolnyaetsya_voditelem;
    property M_otpuskaetsya_dostepcherom: TBoldObjectReference read _Get_M_otpuskaetsya_dostepcherom;
    property M_ocenivaetsya_cherez: TBoldObjectReference read _Get_M_ocenivaetsya_cherez;
    property M_adres_sektora: TBoldObjectReference read _Get_M_adres_sektora;
    property M_konechnyi_sektor_raboty: TBoldObjectReference read _Get_M_konechnyi_sektor_raboty;
    property M_sektor_voditelya: TBoldObjectReference read _Get_M_sektor_voditelya;
    property M_otpravlyaetsya: TBoldObjectReference read _Get_M_otpravlyaetsya;
    property Kolichestvo_chasov: double read _GetKolichestvo_chasov write _SetKolichestvo_chasov;
    property Nachalo_zakaza_data: TDateTime read _GetNachalo_zakaza_data write _SetNachalo_zakaza_data;
    property Konec_zakaza_data: TDateTime read _GetKonec_zakaza_data write _SetKonec_zakaza_data;
    property Telefon_klienta: String read _GetTelefon_klienta write _SetTelefon_klienta;
    property Stoimostj_zakaza: double read _GetStoimostj_zakaza;
    property Nomer_zakaza: double read _GetNomer_zakaza write _SetNomer_zakaza;
    property Data_podachi: TDateTime read _GetData_podachi write _SetData_podachi;
    property Zavershyon: Boolean read _GetZavershyon write _SetZavershyon;
    property Arhivnyi: Boolean read _GetArhivnyi write _SetArhivnyi;
    property Uslovn_stoim: double read _GetUslovn_stoim write _SetUslovn_stoim;
    property Adres_vyzova_vvodim: String read _GetAdres_vyzova_vvodim write _SetAdres_vyzova_vvodim;
    property Predvariteljnyi: Boolean read _GetPredvariteljnyi write _SetPredvariteljnyi;
    property Data_predvariteljnaya: TDateTime read _GetData_predvariteljnaya write _SetData_predvariteljnaya;
    property Zadeistv_predvarit: Boolean read _GetZadeistv_predvarit write _SetZadeistv_predvarit;
    property Data_po_umolchaniyu: TDateTime read _GetData_po_umolchaniyu write _SetData_po_umolchaniyu;
    property Soobsheno_voditelyu: Boolean read _GetSoobsheno_voditelyu write _SetSoobsheno_voditelyu;
    property Adres_okonchaniya_zayavki: String read _GetAdres_okonchaniya_zayavki write _SetAdres_okonchaniya_zayavki;
    property Yavl_pochasovym: Boolean read _GetYavl_pochasovym write _SetYavl_pochasovym;
    property Stoimostj_so_skidkoi: double read _GetStoimostj_so_skidkoi;
    property Pozyvnoi_ustan: Integer read _GetPozyvnoi_ustan write _SetPozyvnoi_ustan;
    property Data_pribytie: TDateTime read _GetData_pribytie write _SetData_pribytie;
    property Ustan_pribytie: Boolean read _GetUstan_pribytie write _SetUstan_pribytie;
    property Nomer_skidki: Integer read _GetNomer_skidki write _SetNomer_skidki;
    property Slugebnyi: Boolean read _GetSlugebnyi write _SetSlugebnyi;
    property Primechanie: String read _GetPrimechanie write _SetPrimechanie;
    property Opr_s_obsh_linii: Boolean read _GetOpr_s_obsh_linii write _SetOpr_s_obsh_linii;
    property Data_na_tochke: TDateTime read _GetData_na_tochke write _SetData_na_tochke;
    property vypolnyaetsya_voditelem: TVoditelj read _Getvypolnyaetsya_voditelem write _Setvypolnyaetsya_voditelem;
    property otpuskaetsya_dostepcherom: TPersonal read _Getotpuskaetsya_dostepcherom write _Setotpuskaetsya_dostepcherom;
    property ocenivaetsya_cherez: TStoimostj read _Getocenivaetsya_cherez write _Setocenivaetsya_cherez;
    property adres_sektora: TSektor_raboty read _Getadres_sektora write _Setadres_sektora;
    property konechnyi_sektor_raboty: TSektor_raboty read _Getkonechnyi_sektor_raboty write _Setkonechnyi_sektor_raboty;
    property sektor_voditelya: TSektor_raboty read _Getsektor_voditelya write _Setsektor_voditelya;
    property otpravlyaetsya: TPersonal read _Getotpravlyaetsya write _Setotpravlyaetsya;
  end;

  TVoditelj = class(TOrganizaciya)
  private
    function _Get_M_Nachalo_intervala_raschyota: TBADateTime;
    function _GetNachalo_intervala_raschyota: TDateTime;
    function _Get_M_Konec_intervala_raschyota: TBADateTime;
    function _GetKonec_intervala_raschyota: TDateTime;
    function _Get_M_Prinyos_vsego: TBAFloat;
    function _GetPrinyos_vsego: double;
    function _Get_M_Prinyos_za_period: TBAFloat;
    function _GetPrinyos_za_period: double;
    function _Get_M_Velichina_procenta: TBAFloat;
    function _GetVelichina_procenta: double;
    function _Get_M_Pozyvnoi: TBAInteger;
    function _GetPozyvnoi: Integer;
    procedure _SetPozyvnoi(const NewValue: Integer);
    function _Get_M_V_rabote: TBABoolean;
    function _GetV_rabote: Boolean;
    procedure _SetV_rabote(const NewValue: Boolean);
    function _Get_M_Na_pereryve: TBABoolean;
    function _GetNa_pereryve: Boolean;
    procedure _SetNa_pereryve(const NewValue: Boolean);
    function _Get_M_Indeks_ocheryodnosti: TBAInteger;
    function _GetIndeks_ocheryodnosti: Integer;
    procedure _SetIndeks_ocheryodnosti(const NewValue: Integer);
    function _Get_M_Nomer_sektora: TBAInteger;
    function _GetNomer_sektora: Integer;
    function _Get_M_Data_po_umolchaniyu: TBADateTime;
    function _GetData_po_umolchaniyu: TDateTime;
    procedure _SetData_po_umolchaniyu(const NewValue: TDateTime);
    function _Get_M_Nomer_posl_sektora: TBAInteger;
    function _GetNomer_posl_sektora: Integer;
    procedure _SetNomer_posl_sektora(const NewValue: Integer);
    function _Get_M_Zanyat_drugim_disp: TBABoolean;
    function _GetZanyat_drugim_disp: Boolean;
    procedure _SetZanyat_drugim_disp(const NewValue: Boolean);
    function _Get_M_Vremya_poslednei_zayavki: TBADateTime;
    function _GetVremya_poslednei_zayavki: TDateTime;
    procedure _SetVremya_poslednei_zayavki(const NewValue: TDateTime);
    function _Get_M_Yavl_degurnym: TBABoolean;
    function _GetYavl_degurnym: Boolean;
    function _Get_M_Nomer_deg_gruppy: TBAInteger;
    function _GetNomer_deg_gruppy: Integer;
    procedure _SetNomer_deg_gruppy(const NewValue: Integer);
    function _Get_M_Marka_avtomobilya: TBAString;
    function _GetMarka_avtomobilya: String;
    procedure _SetMarka_avtomobilya(const NewValue: String);
    function _Get_M_Gos_nomernoi_znak: TBAString;
    function _GetGos_nomernoi_znak: String;
    procedure _SetGos_nomernoi_znak(const NewValue: String);
    function _Get_M_Garagn_nomer: TBAString;
    function _GetGaragn_nomer: String;
    procedure _SetGaragn_nomer(const NewValue: String);
    function _Get_M_Udostoverenie_nom: TBAString;
    function _GetUdostoverenie_nom: String;
    procedure _SetUdostoverenie_nom(const NewValue: String);
    function _Get_M_Licenzionnaya_kart: TBAString;
    function _GetLicenzionnaya_kart: String;
    procedure _SetLicenzionnaya_kart(const NewValue: String);
    function _Get_M_Klass_vych: TBAString;
    function _GetKlass_vych: String;
    function _Get_M_Klass_vodit: TBAString;
    function _GetKlass_vodit: String;
    procedure _SetKlass_vodit(const NewValue: String);
    function _Get_M_A_klass: TBABoolean;
    function _GetA_klass: Boolean;
    procedure _SetA_klass(const NewValue: Boolean);
    function _Get_M_B_klass: TBABoolean;
    function _GetB_klass: Boolean;
    procedure _SetB_klass(const NewValue: Boolean);
    function _Get_M_S_klass: TBABoolean;
    function _GetS_klass: Boolean;
    procedure _SetS_klass(const NewValue: Boolean);
    function _Get_M_D_klass: TBABoolean;
    function _GetD_klass: Boolean;
    procedure _SetD_klass(const NewValue: Boolean);
    function _Get_M_E_klass: TBABoolean;
    function _GetE_klass: Boolean;
    procedure _SetE_klass(const NewValue: Boolean);
    function _Get_M_A_vych: TBAString;
    function _GetA_vych: String;
    function _Get_M_B_vych: TBAString;
    function _GetB_vych: String;
    function _Get_M_S_vych: TBAString;
    function _GetS_vych: String;
    function _Get_M_D_vych: TBAString;
    function _GetD_vych: String;
    function _Get_M_E_vych: TBAString;
    function _GetE_vych: String;
    function _Get_M_Izm_haraktrist: TBABoolean;
    function _GetIzm_haraktrist: Boolean;
    procedure _SetIzm_haraktrist(const NewValue: Boolean);
    function _Get_M_cvet_avto: TBAString;
    function _Getcvet_avto: String;
    procedure _Setcvet_avto(const NewValue: String);
    function _Get_M_tip_nomer_racii: TBAString;
    function _Gettip_nomer_racii: String;
    procedure _Settip_nomer_racii(const NewValue: String);
    function _Get_M_Individ_procent: TBAFloat;
    function _GetIndivid_procent: double;
    procedure _SetIndivid_procent(const NewValue: double);
    function _Getvypolnyaet_zakazy: TZakazList;
    function _Getrabotaet_na: TMashina;
    function _Get_M_rabotaet_na: TBoldObjectReference;
    procedure _Setrabotaet_na(const value: TMashina);
    function _Getprinosit_dohod: TVyruchka_ot_voditelyaList;
    function _Getchem_uchityvaetsya_voditelj: TObjekt_vyborki_otchyotnosti;
    function _Get_M_chem_uchityvaetsya_voditelj: TBoldObjectReference;
    procedure _Setchem_uchityvaetsya_voditelj(const value: TObjekt_vyborki_otchyotnosti);
    function _Getrabotaet_na_sektore: TSektor_raboty;
    function _Get_M_rabotaet_na_sektore: TBoldObjectReference;
    procedure _Setrabotaet_na_sektore(const value: TSektor_raboty);
    function _Getotnositsya_k_gruppe: TGruppa_voditelei;
    function _Get_M_otnositsya_k_gruppe: TBoldObjectReference;
    procedure _Setotnositsya_k_gruppe(const value: TGruppa_voditelei);
  protected
  public
    property M_Nachalo_intervala_raschyota: TBADateTime read _Get_M_Nachalo_intervala_raschyota;
    property M_Konec_intervala_raschyota: TBADateTime read _Get_M_Konec_intervala_raschyota;
    property M_Prinyos_vsego: TBAFloat read _Get_M_Prinyos_vsego;
    property M_Prinyos_za_period: TBAFloat read _Get_M_Prinyos_za_period;
    property M_Velichina_procenta: TBAFloat read _Get_M_Velichina_procenta;
    property M_Pozyvnoi: TBAInteger read _Get_M_Pozyvnoi;
    property M_V_rabote: TBABoolean read _Get_M_V_rabote;
    property M_Na_pereryve: TBABoolean read _Get_M_Na_pereryve;
    property M_Indeks_ocheryodnosti: TBAInteger read _Get_M_Indeks_ocheryodnosti;
    property M_Nomer_sektora: TBAInteger read _Get_M_Nomer_sektora;
    property M_Data_po_umolchaniyu: TBADateTime read _Get_M_Data_po_umolchaniyu;
    property M_Nomer_posl_sektora: TBAInteger read _Get_M_Nomer_posl_sektora;
    property M_Zanyat_drugim_disp: TBABoolean read _Get_M_Zanyat_drugim_disp;
    property M_Vremya_poslednei_zayavki: TBADateTime read _Get_M_Vremya_poslednei_zayavki;
    property M_Yavl_degurnym: TBABoolean read _Get_M_Yavl_degurnym;
    property M_Nomer_deg_gruppy: TBAInteger read _Get_M_Nomer_deg_gruppy;
    property M_Marka_avtomobilya: TBAString read _Get_M_Marka_avtomobilya;
    property M_Gos_nomernoi_znak: TBAString read _Get_M_Gos_nomernoi_znak;
    property M_Garagn_nomer: TBAString read _Get_M_Garagn_nomer;
    property M_Udostoverenie_nom: TBAString read _Get_M_Udostoverenie_nom;
    property M_Licenzionnaya_kart: TBAString read _Get_M_Licenzionnaya_kart;
    property M_Klass_vych: TBAString read _Get_M_Klass_vych;
    property M_Klass_vodit: TBAString read _Get_M_Klass_vodit;
    property M_A_klass: TBABoolean read _Get_M_A_klass;
    property M_B_klass: TBABoolean read _Get_M_B_klass;
    property M_S_klass: TBABoolean read _Get_M_S_klass;
    property M_D_klass: TBABoolean read _Get_M_D_klass;
    property M_E_klass: TBABoolean read _Get_M_E_klass;
    property M_A_vych: TBAString read _Get_M_A_vych;
    property M_B_vych: TBAString read _Get_M_B_vych;
    property M_S_vych: TBAString read _Get_M_S_vych;
    property M_D_vych: TBAString read _Get_M_D_vych;
    property M_E_vych: TBAString read _Get_M_E_vych;
    property M_Izm_haraktrist: TBABoolean read _Get_M_Izm_haraktrist;
    property M_cvet_avto: TBAString read _Get_M_cvet_avto;
    property M_tip_nomer_racii: TBAString read _Get_M_tip_nomer_racii;
    property M_Individ_procent: TBAFloat read _Get_M_Individ_procent;
    property M_vypolnyaet_zakazy: TZakazList read _Getvypolnyaet_zakazy;
    property M_rabotaet_na: TBoldObjectReference read _Get_M_rabotaet_na;
    property M_prinosit_dohod: TVyruchka_ot_voditelyaList read _Getprinosit_dohod;
    property M_chem_uchityvaetsya_voditelj: TBoldObjectReference read _Get_M_chem_uchityvaetsya_voditelj;
    property M_rabotaet_na_sektore: TBoldObjectReference read _Get_M_rabotaet_na_sektore;
    property M_otnositsya_k_gruppe: TBoldObjectReference read _Get_M_otnositsya_k_gruppe;
    property Nachalo_intervala_raschyota: TDateTime read _GetNachalo_intervala_raschyota;
    property Konec_intervala_raschyota: TDateTime read _GetKonec_intervala_raschyota;
    property Prinyos_vsego: double read _GetPrinyos_vsego;
    property Prinyos_za_period: double read _GetPrinyos_za_period;
    property Velichina_procenta: double read _GetVelichina_procenta;
    property Pozyvnoi: Integer read _GetPozyvnoi write _SetPozyvnoi;
    property V_rabote: Boolean read _GetV_rabote write _SetV_rabote;
    property Na_pereryve: Boolean read _GetNa_pereryve write _SetNa_pereryve;
    property Indeks_ocheryodnosti: Integer read _GetIndeks_ocheryodnosti write _SetIndeks_ocheryodnosti;
    property Nomer_sektora: Integer read _GetNomer_sektora;
    property Data_po_umolchaniyu: TDateTime read _GetData_po_umolchaniyu write _SetData_po_umolchaniyu;
    property Nomer_posl_sektora: Integer read _GetNomer_posl_sektora write _SetNomer_posl_sektora;
    property Zanyat_drugim_disp: Boolean read _GetZanyat_drugim_disp write _SetZanyat_drugim_disp;
    property Vremya_poslednei_zayavki: TDateTime read _GetVremya_poslednei_zayavki write _SetVremya_poslednei_zayavki;
    property Yavl_degurnym: Boolean read _GetYavl_degurnym;
    property Nomer_deg_gruppy: Integer read _GetNomer_deg_gruppy write _SetNomer_deg_gruppy;
    property Marka_avtomobilya: String read _GetMarka_avtomobilya write _SetMarka_avtomobilya;
    property Gos_nomernoi_znak: String read _GetGos_nomernoi_znak write _SetGos_nomernoi_znak;
    property Garagn_nomer: String read _GetGaragn_nomer write _SetGaragn_nomer;
    property Udostoverenie_nom: String read _GetUdostoverenie_nom write _SetUdostoverenie_nom;
    property Licenzionnaya_kart: String read _GetLicenzionnaya_kart write _SetLicenzionnaya_kart;
    property Klass_vych: String read _GetKlass_vych;
    property Klass_vodit: String read _GetKlass_vodit write _SetKlass_vodit;
    property A_klass: Boolean read _GetA_klass write _SetA_klass;
    property B_klass: Boolean read _GetB_klass write _SetB_klass;
    property S_klass: Boolean read _GetS_klass write _SetS_klass;
    property D_klass: Boolean read _GetD_klass write _SetD_klass;
    property E_klass: Boolean read _GetE_klass write _SetE_klass;
    property A_vych: String read _GetA_vych;
    property B_vych: String read _GetB_vych;
    property S_vych: String read _GetS_vych;
    property D_vych: String read _GetD_vych;
    property E_vych: String read _GetE_vych;
    property Izm_haraktrist: Boolean read _GetIzm_haraktrist write _SetIzm_haraktrist;
    property cvet_avto: String read _Getcvet_avto write _Setcvet_avto;
    property tip_nomer_racii: String read _Gettip_nomer_racii write _Settip_nomer_racii;
    property Individ_procent: double read _GetIndivid_procent write _SetIndivid_procent;
    property vypolnyaet_zakazy: TZakazList read _Getvypolnyaet_zakazy;
    property rabotaet_na: TMashina read _Getrabotaet_na write _Setrabotaet_na;
    property prinosit_dohod: TVyruchka_ot_voditelyaList read _Getprinosit_dohod;
    property chem_uchityvaetsya_voditelj: TObjekt_vyborki_otchyotnosti read _Getchem_uchityvaetsya_voditelj write _Setchem_uchityvaetsya_voditelj;
    property rabotaet_na_sektore: TSektor_raboty read _Getrabotaet_na_sektore write _Setrabotaet_na_sektore;
    property otnositsya_k_gruppe: TGruppa_voditelei read _Getotnositsya_k_gruppe write _Setotnositsya_k_gruppe;
  end;

  TPersonal = class(TOrganizaciya)
  private
    function _Get_M_Login: TBAString;
    function _GetLogin: String;
    procedure _SetLogin(const NewValue: String);
    function _Get_M_Parolj: TBAString;
    function _GetParolj: String;
    procedure _SetParolj(const NewValue: String);
    function _Get_M_Prava: TBAInteger;
    function _GetPrava: Integer;
    procedure _SetPrava(const NewValue: Integer);
    function _Get_M_Kommentarii: TBAString;
    function _GetKommentarii: String;
    procedure _SetKommentarii(const NewValue: String);
    function _Get_M_Razreshitj_vsyo: TBABoolean;
    function _GetRazreshitj_vsyo: Boolean;
    procedure _SetRazreshitj_vsyo(const NewValue: Boolean);
    function _Get_M_Razresh_administr: TBABoolean;
    function _GetRazresh_administr: Boolean;
    procedure _SetRazresh_administr(const NewValue: Boolean);
    function _Get_M_Razresh_nastroiku_raboty: TBABoolean;
    function _GetRazresh_nastroiku_raboty: Boolean;
    procedure _SetRazresh_nastroiku_raboty(const NewValue: Boolean);
    function _Get_M_Razreshitj_prosmotr_logov: TBABoolean;
    function _GetRazreshitj_prosmotr_logov: Boolean;
    procedure _SetRazreshitj_prosmotr_logov(const NewValue: Boolean);
    function _Get_M_Razr_rabotu_s_arhivom: TBABoolean;
    function _GetRazr_rabotu_s_arhivom: Boolean;
    procedure _SetRazr_rabotu_s_arhivom(const NewValue: Boolean);
    function _Get_M_Razreshitj_udalenie_vypuskov: TBABoolean;
    function _GetRazreshitj_udalenie_vypuskov: Boolean;
    procedure _SetRazreshitj_udalenie_vypuskov(const NewValue: Boolean);
    function _Get_M_Razr_udalenie_razdelov: TBABoolean;
    function _GetRazr_udalenie_razdelov: Boolean;
    procedure _SetRazr_udalenie_razdelov(const NewValue: Boolean);
    function _Get_M_Razreshitj_udalenie_objyavlenii: TBABoolean;
    function _GetRazreshitj_udalenie_objyavlenii: Boolean;
    procedure _SetRazreshitj_udalenie_objyavlenii(const NewValue: Boolean);
    function _Get_M_Razreshitj_udalenie_ostaljnogo: TBABoolean;
    function _GetRazreshitj_udalenie_ostaljnogo: Boolean;
    procedure _SetRazreshitj_udalenie_ostaljnogo(const NewValue: Boolean);
    function _Get_M_Razr_prav_redkomen_sprav: TBABoolean;
    function _GetRazr_prav_redkomen_sprav: Boolean;
    procedure _SetRazr_prav_redkomen_sprav(const NewValue: Boolean);
    function _Get_M_Razr_prav_oper_razdelov: TBABoolean;
    function _GetRazr_prav_oper_razdelov: Boolean;
    procedure _SetRazr_prav_oper_razdelov(const NewValue: Boolean);
    function _Get_M_Ident_dispetchera: TBAInteger;
    function _GetIdent_dispetchera: Integer;
    procedure _SetIdent_dispetchera(const NewValue: Integer);
    function _Get_M_Imya_dispetchera: TBAString;
    function _GetImya_dispetchera: String;
    procedure _SetImya_dispetchera(const NewValue: String);
    function _Get_M_Estj_otpravlennye: TBABoolean;
    function _GetEstj_otpravlennye: Boolean;
    procedure _SetEstj_otpravlennye(const NewValue: Boolean);
    function _Get_M_Estj_nachatye: TBABoolean;
    function _GetEstj_nachatye: Boolean;
    procedure _SetEstj_nachatye(const NewValue: Boolean);
    function _Get_M_Nachalo_intervala: TBADateTime;
    function _GetNachalo_intervala: TDateTime;
    function _Get_M_Konec_intervala: TBADateTime;
    function _GetKonec_intervala: TDateTime;
    function _Get_M_Zayav_za_interval: TBAInteger;
    function _GetZayav_za_interval: Integer;
    function _Get_M_Summa_za_interval: TBAFloat;
    function _GetSumma_za_interval: double;
    function _Get_M_HasRefreshData: TBABoolean;
    function _GetHasRefreshData: Boolean;
    procedure _SetHasRefreshData(const NewValue: Boolean);
    function _Get_M_UserEntered: TBABoolean;
    function _GetUserEntered: Boolean;
    procedure _SetUserEntered(const NewValue: Boolean);
    function _Get_M_EstjVneshnieManip: TBABoolean;
    function _GetEstjVneshnieManip: Boolean;
    procedure _SetEstjVneshnieManip(const NewValue: Boolean);
    function _Get_M_Rolj_dispetchera: TBABoolean;
    function _GetRolj_dispetchera: Boolean;
    procedure _SetRolj_dispetchera(const NewValue: Boolean);
    function _Get_M_Vidit_vseh: TBABoolean;
    function _GetVidit_vseh: Boolean;
    procedure _SetVidit_vseh(const NewValue: Boolean);
    function _Get_M_Prover_vodit: TBABoolean;
    function _GetProver_vodit: Boolean;
    procedure _SetProver_vodit(const NewValue: Boolean);
    function _Getdeistviya_fiksiruyutsya_v: TLog_operaciiList;
    function _Getperechenj_zakazov: TZakazList;
    function _Getchem_uchityvaetsya_dispetcher: TObjekt_vyborki_otchyotnosti;
    function _Get_M_chem_uchityvaetsya_dispetcher: TBoldObjectReference;
    procedure _Setchem_uchityvaetsya_dispetcher(const value: TObjekt_vyborki_otchyotnosti);
    function _Getotpravil_zakazy: TZakazList;
    function _Getimeet_vhody: TVhody_poljzList;
  protected
  public
    property M_Login: TBAString read _Get_M_Login;
    property M_Parolj: TBAString read _Get_M_Parolj;
    property M_Prava: TBAInteger read _Get_M_Prava;
    property M_Kommentarii: TBAString read _Get_M_Kommentarii;
    property M_Razreshitj_vsyo: TBABoolean read _Get_M_Razreshitj_vsyo;
    property M_Razresh_administr: TBABoolean read _Get_M_Razresh_administr;
    property M_Razresh_nastroiku_raboty: TBABoolean read _Get_M_Razresh_nastroiku_raboty;
    property M_Razreshitj_prosmotr_logov: TBABoolean read _Get_M_Razreshitj_prosmotr_logov;
    property M_Razr_rabotu_s_arhivom: TBABoolean read _Get_M_Razr_rabotu_s_arhivom;
    property M_Razreshitj_udalenie_vypuskov: TBABoolean read _Get_M_Razreshitj_udalenie_vypuskov;
    property M_Razr_udalenie_razdelov: TBABoolean read _Get_M_Razr_udalenie_razdelov;
    property M_Razreshitj_udalenie_objyavlenii: TBABoolean read _Get_M_Razreshitj_udalenie_objyavlenii;
    property M_Razreshitj_udalenie_ostaljnogo: TBABoolean read _Get_M_Razreshitj_udalenie_ostaljnogo;
    property M_Razr_prav_redkomen_sprav: TBABoolean read _Get_M_Razr_prav_redkomen_sprav;
    property M_Razr_prav_oper_razdelov: TBABoolean read _Get_M_Razr_prav_oper_razdelov;
    property M_Ident_dispetchera: TBAInteger read _Get_M_Ident_dispetchera;
    property M_Imya_dispetchera: TBAString read _Get_M_Imya_dispetchera;
    property M_Estj_otpravlennye: TBABoolean read _Get_M_Estj_otpravlennye;
    property M_Estj_nachatye: TBABoolean read _Get_M_Estj_nachatye;
    property M_Nachalo_intervala: TBADateTime read _Get_M_Nachalo_intervala;
    property M_Konec_intervala: TBADateTime read _Get_M_Konec_intervala;
    property M_Zayav_za_interval: TBAInteger read _Get_M_Zayav_za_interval;
    property M_Summa_za_interval: TBAFloat read _Get_M_Summa_za_interval;
    property M_HasRefreshData: TBABoolean read _Get_M_HasRefreshData;
    property M_UserEntered: TBABoolean read _Get_M_UserEntered;
    property M_EstjVneshnieManip: TBABoolean read _Get_M_EstjVneshnieManip;
    property M_Rolj_dispetchera: TBABoolean read _Get_M_Rolj_dispetchera;
    property M_Vidit_vseh: TBABoolean read _Get_M_Vidit_vseh;
    property M_Prover_vodit: TBABoolean read _Get_M_Prover_vodit;
    property M_deistviya_fiksiruyutsya_v: TLog_operaciiList read _Getdeistviya_fiksiruyutsya_v;
    property M_perechenj_zakazov: TZakazList read _Getperechenj_zakazov;
    property M_chem_uchityvaetsya_dispetcher: TBoldObjectReference read _Get_M_chem_uchityvaetsya_dispetcher;
    property M_otpravil_zakazy: TZakazList read _Getotpravil_zakazy;
    property M_imeet_vhody: TVhody_poljzList read _Getimeet_vhody;
    property Login: String read _GetLogin write _SetLogin;
    property Parolj: String read _GetParolj write _SetParolj;
    property Prava: Integer read _GetPrava write _SetPrava;
    property Kommentarii: String read _GetKommentarii write _SetKommentarii;
    property Razreshitj_vsyo: Boolean read _GetRazreshitj_vsyo write _SetRazreshitj_vsyo;
    property Razresh_administr: Boolean read _GetRazresh_administr write _SetRazresh_administr;
    property Razresh_nastroiku_raboty: Boolean read _GetRazresh_nastroiku_raboty write _SetRazresh_nastroiku_raboty;
    property Razreshitj_prosmotr_logov: Boolean read _GetRazreshitj_prosmotr_logov write _SetRazreshitj_prosmotr_logov;
    property Razr_rabotu_s_arhivom: Boolean read _GetRazr_rabotu_s_arhivom write _SetRazr_rabotu_s_arhivom;
    property Razreshitj_udalenie_vypuskov: Boolean read _GetRazreshitj_udalenie_vypuskov write _SetRazreshitj_udalenie_vypuskov;
    property Razr_udalenie_razdelov: Boolean read _GetRazr_udalenie_razdelov write _SetRazr_udalenie_razdelov;
    property Razreshitj_udalenie_objyavlenii: Boolean read _GetRazreshitj_udalenie_objyavlenii write _SetRazreshitj_udalenie_objyavlenii;
    property Razreshitj_udalenie_ostaljnogo: Boolean read _GetRazreshitj_udalenie_ostaljnogo write _SetRazreshitj_udalenie_ostaljnogo;
    property Razr_prav_redkomen_sprav: Boolean read _GetRazr_prav_redkomen_sprav write _SetRazr_prav_redkomen_sprav;
    property Razr_prav_oper_razdelov: Boolean read _GetRazr_prav_oper_razdelov write _SetRazr_prav_oper_razdelov;
    property Ident_dispetchera: Integer read _GetIdent_dispetchera write _SetIdent_dispetchera;
    property Imya_dispetchera: String read _GetImya_dispetchera write _SetImya_dispetchera;
    property Estj_otpravlennye: Boolean read _GetEstj_otpravlennye write _SetEstj_otpravlennye;
    property Estj_nachatye: Boolean read _GetEstj_nachatye write _SetEstj_nachatye;
    property Nachalo_intervala: TDateTime read _GetNachalo_intervala;
    property Konec_intervala: TDateTime read _GetKonec_intervala;
    property Zayav_za_interval: Integer read _GetZayav_za_interval;
    property Summa_za_interval: double read _GetSumma_za_interval;
    property HasRefreshData: Boolean read _GetHasRefreshData write _SetHasRefreshData;
    property UserEntered: Boolean read _GetUserEntered write _SetUserEntered;
    property EstjVneshnieManip: Boolean read _GetEstjVneshnieManip write _SetEstjVneshnieManip;
    property Rolj_dispetchera: Boolean read _GetRolj_dispetchera write _SetRolj_dispetchera;
    property Vidit_vseh: Boolean read _GetVidit_vseh write _SetVidit_vseh;
    property Prover_vodit: Boolean read _GetProver_vodit write _SetProver_vodit;
    property deistviya_fiksiruyutsya_v: TLog_operaciiList read _Getdeistviya_fiksiruyutsya_v;
    property perechenj_zakazov: TZakazList read _Getperechenj_zakazov;
    property chem_uchityvaetsya_dispetcher: TObjekt_vyborki_otchyotnosti read _Getchem_uchityvaetsya_dispetcher write _Setchem_uchityvaetsya_dispetcher;
    property otpravil_zakazy: TZakazList read _Getotpravil_zakazy;
    property imeet_vhody: TVhody_poljzList read _Getimeet_vhody;
  end;

  TBusinessClassesRootList = class(TBoldObjectList)
  protected
    function GetBoldObject(index: Integer): TBusinessClassesRoot;
    procedure SetBoldObject(index: Integer; NewObject: TBusinessClassesRoot);
  public
    function Includes(anObject: TBusinessClassesRoot): Boolean;
    function IndexOf(anObject: TBusinessClassesRoot): Integer;
    procedure Add(NewObject: TBusinessClassesRoot);
    function AddNew: TBusinessClassesRoot;
    procedure Insert(index: Integer; NewObject: TBusinessClassesRoot);
    property BoldObjects[index: Integer]: TBusinessClassesRoot read GetBoldObject write SetBoldObject; default;
  end;

  TBalansList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TBalans;
    procedure SetBoldObject(index: Integer; NewObject: TBalans);
  public
    function Includes(anObject: TBalans): Boolean;
    function IndexOf(anObject: TBalans): Integer;
    procedure Add(NewObject: TBalans);
    function AddNew: TBalans;
    procedure Insert(index: Integer; NewObject: TBalans);
    property BoldObjects[index: Integer]: TBalans read GetBoldObject write SetBoldObject; default;
  end;

  TVhody_poljzList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TVhody_poljz;
    procedure SetBoldObject(index: Integer; NewObject: TVhody_poljz);
  public
    function Includes(anObject: TVhody_poljz): Boolean;
    function IndexOf(anObject: TVhody_poljz): Integer;
    procedure Add(NewObject: TVhody_poljz);
    function AddNew: TVhody_poljz;
    procedure Insert(index: Integer; NewObject: TVhody_poljz);
    property BoldObjects[index: Integer]: TVhody_poljz read GetBoldObject write SetBoldObject; default;
  end;

  TKlass_poiskaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TKlass_poiska;
    procedure SetBoldObject(index: Integer; NewObject: TKlass_poiska);
  public
    function Includes(anObject: TKlass_poiska): Boolean;
    function IndexOf(anObject: TKlass_poiska): Integer;
    procedure Add(NewObject: TKlass_poiska);
    function AddNew: TKlass_poiska;
    procedure Insert(index: Integer; NewObject: TKlass_poiska);
    property BoldObjects[index: Integer]: TKlass_poiska read GetBoldObject write SetBoldObject; default;
  end;

  TLog_operaciiList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TLog_operacii;
    procedure SetBoldObject(index: Integer; NewObject: TLog_operacii);
  public
    function Includes(anObject: TLog_operacii): Boolean;
    function IndexOf(anObject: TLog_operacii): Integer;
    procedure Add(NewObject: TLog_operacii);
    function AddNew: TLog_operacii;
    procedure Insert(index: Integer; NewObject: TLog_operacii);
    property BoldObjects[index: Integer]: TLog_operacii read GetBoldObject write SetBoldObject; default;
  end;

  TObjekt_vyborki_otchyotnostiList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TObjekt_vyborki_otchyotnosti;
    procedure SetBoldObject(index: Integer; NewObject: TObjekt_vyborki_otchyotnosti);
  public
    function Includes(anObject: TObjekt_vyborki_otchyotnosti): Boolean;
    function IndexOf(anObject: TObjekt_vyborki_otchyotnosti): Integer;
    procedure Add(NewObject: TObjekt_vyborki_otchyotnosti);
    function AddNew: TObjekt_vyborki_otchyotnosti;
    procedure Insert(index: Integer; NewObject: TObjekt_vyborki_otchyotnosti);
    property BoldObjects[index: Integer]: TObjekt_vyborki_otchyotnosti read GetBoldObject write SetBoldObject; default;
  end;

  TOperaciyaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TOperaciya;
    procedure SetBoldObject(index: Integer; NewObject: TOperaciya);
  public
    function Includes(anObject: TOperaciya): Boolean;
    function IndexOf(anObject: TOperaciya): Integer;
    procedure Add(NewObject: TOperaciya);
    function AddNew: TOperaciya;
    procedure Insert(index: Integer; NewObject: TOperaciya);
    property BoldObjects[index: Integer]: TOperaciya read GetBoldObject write SetBoldObject; default;
  end;

  TPersonaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPersona;
    procedure SetBoldObject(index: Integer; NewObject: TPersona);
  public
    function Includes(anObject: TPersona): Boolean;
    function IndexOf(anObject: TPersona): Integer;
    procedure Add(NewObject: TPersona);
    function AddNew: TPersona;
    procedure Insert(index: Integer; NewObject: TPersona);
    property BoldObjects[index: Integer]: TPersona read GetBoldObject write SetBoldObject; default;
  end;

  TPlohie_klientyList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPlohie_klienty;
    procedure SetBoldObject(index: Integer; NewObject: TPlohie_klienty);
  public
    function Includes(anObject: TPlohie_klienty): Boolean;
    function IndexOf(anObject: TPlohie_klienty): Integer;
    procedure Add(NewObject: TPlohie_klienty);
    function AddNew: TPlohie_klienty;
    procedure Insert(index: Integer; NewObject: TPlohie_klienty);
    property BoldObjects[index: Integer]: TPlohie_klienty read GetBoldObject write SetBoldObject; default;
  end;

  TPrihodList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TPrihod;
    procedure SetBoldObject(index: Integer; NewObject: TPrihod);
  public
    function Includes(anObject: TPrihod): Boolean;
    function IndexOf(anObject: TPrihod): Integer;
    procedure Add(NewObject: TPrihod);
    function AddNew: TPrihod;
    procedure Insert(index: Integer; NewObject: TPrihod);
    property BoldObjects[index: Integer]: TPrihod read GetBoldObject write SetBoldObject; default;
  end;

  TRashodList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TRashod;
    procedure SetBoldObject(index: Integer; NewObject: TRashod);
  public
    function Includes(anObject: TRashod): Boolean;
    function IndexOf(anObject: TRashod): Integer;
    procedure Add(NewObject: TRashod);
    function AddNew: TRashod;
    procedure Insert(index: Integer; NewObject: TRashod);
    property BoldObjects[index: Integer]: TRashod read GetBoldObject write SetBoldObject; default;
  end;

  TSootvetstvie_parametrov_zakazaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSootvetstvie_parametrov_zakaza;
    procedure SetBoldObject(index: Integer; NewObject: TSootvetstvie_parametrov_zakaza);
  public
    function Includes(anObject: TSootvetstvie_parametrov_zakaza): Boolean;
    function IndexOf(anObject: TSootvetstvie_parametrov_zakaza): Integer;
    procedure Add(NewObject: TSootvetstvie_parametrov_zakaza);
    function AddNew: TSootvetstvie_parametrov_zakaza;
    procedure Insert(index: Integer; NewObject: TSootvetstvie_parametrov_zakaza);
    property BoldObjects[index: Integer]: TSootvetstvie_parametrov_zakaza read GetBoldObject write SetBoldObject; default;
  end;

  TSpravochnikList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSpravochnik;
    procedure SetBoldObject(index: Integer; NewObject: TSpravochnik);
  public
    function Includes(anObject: TSpravochnik): Boolean;
    function IndexOf(anObject: TSpravochnik): Integer;
    procedure Add(NewObject: TSpravochnik);
    function AddNew: TSpravochnik;
    procedure Insert(index: Integer; NewObject: TSpravochnik);
    property BoldObjects[index: Integer]: TSpravochnik read GetBoldObject write SetBoldObject; default;
  end;

  TSpravochnik_grupp_vypuskovList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TSpravochnik_grupp_vypuskov;
    procedure SetBoldObject(index: Integer; NewObject: TSpravochnik_grupp_vypuskov);
  public
    function Includes(anObject: TSpravochnik_grupp_vypuskov): Boolean;
    function IndexOf(anObject: TSpravochnik_grupp_vypuskov): Integer;
    procedure Add(NewObject: TSpravochnik_grupp_vypuskov);
    function AddNew: TSpravochnik_grupp_vypuskov;
    procedure Insert(index: Integer; NewObject: TSpravochnik_grupp_vypuskov);
    property BoldObjects[index: Integer]: TSpravochnik_grupp_vypuskov read GetBoldObject write SetBoldObject; default;
  end;

  TShablon_zakazaList = class(TBusinessClassesRootList)
  protected
    function GetBoldObject(index: Integer): TShablon_zakaza;
    procedure SetBoldObject(index: Integer; NewObject: TShablon_zakaza);
  public
    function Includes(anObject: TShablon_zakaza): Boolean;
    function IndexOf(anObject: TShablon_zakaza): Integer;
    procedure Add(NewObject: TShablon_zakaza);
    function AddNew: TShablon_zakaza;
    procedure Insert(index: Integer; NewObject: TShablon_zakaza);
    property BoldObjects[index: Integer]: TShablon_zakaza read GetBoldObject write SetBoldObject; default;
  end;

  TOrganizaciyaList = class(TPersonaList)
  protected
    function GetBoldObject(index: Integer): TOrganizaciya;
    procedure SetBoldObject(index: Integer; NewObject: TOrganizaciya);
  public
    function Includes(anObject: TOrganizaciya): Boolean;
    function IndexOf(anObject: TOrganizaciya): Integer;
    procedure Add(NewObject: TOrganizaciya);
    function AddNew: TOrganizaciya;
    procedure Insert(index: Integer; NewObject: TOrganizaciya);
    property BoldObjects[index: Integer]: TOrganizaciya read GetBoldObject write SetBoldObject; default;
  end;

  TVyruchka_ot_voditelyaList = class(TPrihodList)
  protected
    function GetBoldObject(index: Integer): TVyruchka_ot_voditelya;
    procedure SetBoldObject(index: Integer; NewObject: TVyruchka_ot_voditelya);
  public
    function Includes(anObject: TVyruchka_ot_voditelya): Boolean;
    function IndexOf(anObject: TVyruchka_ot_voditelya): Integer;
    procedure Add(NewObject: TVyruchka_ot_voditelya);
    function AddNew: TVyruchka_ot_voditelya;
    procedure Insert(index: Integer; NewObject: TVyruchka_ot_voditelya);
    property BoldObjects[index: Integer]: TVyruchka_ot_voditelya read GetBoldObject write SetBoldObject; default;
  end;

  TGruppa_voditeleiList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TGruppa_voditelei;
    procedure SetBoldObject(index: Integer; NewObject: TGruppa_voditelei);
  public
    function Includes(anObject: TGruppa_voditelei): Boolean;
    function IndexOf(anObject: TGruppa_voditelei): Integer;
    procedure Add(NewObject: TGruppa_voditelei);
    function AddNew: TGruppa_voditelei;
    procedure Insert(index: Integer; NewObject: TGruppa_voditelei);
    property BoldObjects[index: Integer]: TGruppa_voditelei read GetBoldObject write SetBoldObject; default;
  end;

  TMashinaList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TMashina;
    procedure SetBoldObject(index: Integer; NewObject: TMashina);
  public
    function Includes(anObject: TMashina): Boolean;
    function IndexOf(anObject: TMashina): Integer;
    procedure Add(NewObject: TMashina);
    function AddNew: TMashina;
    procedure Insert(index: Integer; NewObject: TMashina);
    property BoldObjects[index: Integer]: TMashina read GetBoldObject write SetBoldObject; default;
  end;

  TObjektList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TObjekt;
    procedure SetBoldObject(index: Integer; NewObject: TObjekt);
  public
    function Includes(anObject: TObjekt): Boolean;
    function IndexOf(anObject: TObjekt): Integer;
    procedure Add(NewObject: TObjekt);
    function AddNew: TObjekt;
    procedure Insert(index: Integer; NewObject: TObjekt);
    property BoldObjects[index: Integer]: TObjekt read GetBoldObject write SetBoldObject; default;
  end;

  TRaionList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TRaion;
    procedure SetBoldObject(index: Integer; NewObject: TRaion);
  public
    function Includes(anObject: TRaion): Boolean;
    function IndexOf(anObject: TRaion): Integer;
    procedure Add(NewObject: TRaion);
    function AddNew: TRaion;
    procedure Insert(index: Integer; NewObject: TRaion);
    property BoldObjects[index: Integer]: TRaion read GetBoldObject write SetBoldObject; default;
  end;

  TSektor_rabotyList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TSektor_raboty;
    procedure SetBoldObject(index: Integer; NewObject: TSektor_raboty);
  public
    function Includes(anObject: TSektor_raboty): Boolean;
    function IndexOf(anObject: TSektor_raboty): Integer;
    procedure Add(NewObject: TSektor_raboty);
    function AddNew: TSektor_raboty;
    procedure Insert(index: Integer; NewObject: TSektor_raboty);
    property BoldObjects[index: Integer]: TSektor_raboty read GetBoldObject write SetBoldObject; default;
  end;

  TStoimostjList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TStoimostj;
    procedure SetBoldObject(index: Integer; NewObject: TStoimostj);
  public
    function Includes(anObject: TStoimostj): Boolean;
    function IndexOf(anObject: TStoimostj): Integer;
    procedure Add(NewObject: TStoimostj);
    function AddNew: TStoimostj;
    procedure Insert(index: Integer; NewObject: TStoimostj);
    property BoldObjects[index: Integer]: TStoimostj read GetBoldObject write SetBoldObject; default;
  end;

  TUlicaList = class(TSpravochnikList)
  protected
    function GetBoldObject(index: Integer): TUlica;
    procedure SetBoldObject(index: Integer; NewObject: TUlica);
  public
    function Includes(anObject: TUlica): Boolean;
    function IndexOf(anObject: TUlica): Integer;
    procedure Add(NewObject: TUlica);
    function AddNew: TUlica;
    procedure Insert(index: Integer; NewObject: TUlica);
    property BoldObjects[index: Integer]: TUlica read GetBoldObject write SetBoldObject; default;
  end;

  TZakazList = class(TShablon_zakazaList)
  protected
    function GetBoldObject(index: Integer): TZakaz;
    procedure SetBoldObject(index: Integer; NewObject: TZakaz);
  public
    function Includes(anObject: TZakaz): Boolean;
    function IndexOf(anObject: TZakaz): Integer;
    procedure Add(NewObject: TZakaz);
    function AddNew: TZakaz;
    procedure Insert(index: Integer; NewObject: TZakaz);
    property BoldObjects[index: Integer]: TZakaz read GetBoldObject write SetBoldObject; default;
  end;

  TVoditeljList = class(TOrganizaciyaList)
  protected
    function GetBoldObject(index: Integer): TVoditelj;
    procedure SetBoldObject(index: Integer; NewObject: TVoditelj);
  public
    function Includes(anObject: TVoditelj): Boolean;
    function IndexOf(anObject: TVoditelj): Integer;
    procedure Add(NewObject: TVoditelj);
    function AddNew: TVoditelj;
    procedure Insert(index: Integer; NewObject: TVoditelj);
    property BoldObjects[index: Integer]: TVoditelj read GetBoldObject write SetBoldObject; default;
  end;

  TPersonalList = class(TOrganizaciyaList)
  protected
    function GetBoldObject(index: Integer): TPersonal;
    procedure SetBoldObject(index: Integer; NewObject: TPersonal);
  public
    function Includes(anObject: TPersonal): Boolean;
    function IndexOf(anObject: TPersonal): Integer;
    procedure Add(NewObject: TPersonal);
    function AddNew: TPersonal;
    procedure Insert(index: Integer; NewObject: TPersonal);
    property BoldObjects[index: Integer]: TPersonal read GetBoldObject write SetBoldObject; default;
  end;

function GeneratedCodeCRC: String;

implementation

uses
  // implementation uses
  // implementation dependencies
  // other
  BoldGeneratedCodeDictionary;

{$ENDIF}

